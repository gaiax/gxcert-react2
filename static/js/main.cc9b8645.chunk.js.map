{"version":3,"sources":["logo.svg","history.js","Header.js","Footer.js","views/Top.js","views/SignIn.js","views/Registration.js","views/Certificates.js","util/ipfs.js","config.js","views/Certificate.js","util/clipboard.js","views/NewCert.js","views/NewProfile.js","views/EditProfile.js","views/NewGroup.js","views/EditGroup.js","views/GroupMembers.js","views/Issuer.js","views/Issue.js","Loading.js","views/Group.js","views/NotFound.js","views/User.js","App.js","reportWebVitals.js","initialState.js","gxcert-client.js","store.js","reducer.js","torus.js","actions.js","index.js"],"names":["history","Header","props","className","to","isLoggedIn","onClick","signOut","push","Footer","React","Component","Top","SignIn","src","signIn","Registration","Certificates","this","fetchCertificates","userCerts","map","userCert","index","userCertId","certificate","imageUrl","title","groupName","Date","parseInt","timestamp","toISOString","type","color","height","width","ipfs","IpfsHttpClient","host","port","protocol","createImageUrlFromUint8Array","arr","blob","Blob","window","URL","webkitURL","createObjectURL","concatBuffer","buffer1","buffer2","tmp","Uint8Array","byteLength","set","buffer","getImageOnIpfs","ipfsHash","a","async","get","response","data","console","log","content","ArrayBuffer","url","config","web3Host","contractAddress","gxApi","Certificate","match","params","id","fetchCertificate","certificateImage","group","name","description","download","href","groupId","text","dummy","document","createElement","body","appendChild","setAttribute","select","execCommand","removeChild","copyToClipboard","location","alert","domtoimage","toPng","getElementById","then","dataUrl","click","catch","err","error","NewCert","fetchGroupsInSidebar","image","onChange","onChangeGroupInSidebar","defaultValue","groupInSidebar","toString","hidden","groupsInSidebar","value","onChangeTitle","onChangeDescription","onChangeImage","sign","NewProfile","for","onChangeProfileImage","onChangeProfileName","onChangeProfileEmail","registerProfile","EditProfile","fetchProfile","initialImageUrl","profile","email","updateProfile","NewGroup","onChangeGroupName","onChangeGroupAddress","onChangeGroupPhone","registerGroup","EditGroup","residence","phone","updateGroup","GroupMembers","that","onChangeGroupMemberToInvite","inviteMember","members","member","address","disableGroupMember","Issuer","certificates","invalidateUserCert","Issue","certId","onChangeToInIssue","issue","Loading","Group","fetchGroup","NotFound","App","state","from","exact","path","render","routeProps","fetchGroups","onChangeGroup","groups","groupsInIssuer","certificatesInIssuer","fetchCertificatesInIssuer","certificateInIssue","fetchCertificateInIssue","groupInEdit","fetchGroupInEdit","onChangeGroupId","onChangeGroupIdInEdit","onChangeGroupNameInEdit","onChangeGroupAddressInEdit","onChangeGroupPhoneInEdit","groupInShow","fetchGroupInShow","profileImage","profileImageInEdit","profileInEdit","profileName","profileNameInEdit","profileEmail","profileEmailInEdit","fetchProfileInEdit","onChangeProfileNameInEdit","onChangeProfileEmailInEdit","onChangeProfileImageInEdit","component","isLoading","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","toInIssue","groupMemberToInvite","groupAddress","groupPhone","groupIdInEdit","groupNameInEdit","groupAddressInEdit","groupPhoneInEdit","groupInIssuer","profileInShow","gxCert","persistConfig","key","storage","sessionStorage","persistedReducer","persistReducer","action","Object","assign","payload","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","persistStore","torusClient","torus","Torus","init","buildEnv","enableLogging","network","chainId","networkName","showTorusButton","enabledVerifiers","google","facebook","reddit","twitch","discord","login","web3","Web3","provider","gmail","getPublicAddress","verifier","verifierId","gxCertWithoutLogin","GxCertClient","getGxCertWithoutLogin","isInitialized","getGxCert","Error","getMyAddress","wait","Promise","resolve","reject","setTimeout","dispatch","getState","getGroupCerts","i","length","getIssuedUserCerts","j","getProfile","icon","RxApp","connect","evt","target","file","files","reader","FileReader","onload","result","readAsArrayBuffer","groupIdStr","confirm","uploadImageToIpfs","imageCid","context","isCertificate","signed","signCertificate","createCert","cid","getUserCert","getGroup","getReceivedUserCerts","getGroups","getCert","fetchProfileInShow","createGroup","signGroup","signedGroup","newProfile","signProfileForUpdating","signedProfile","iconImage","signProfile","createProfile","signerAddress","getPublicAddressByGoogle","signMemberAddressForInviting","signedMember","inviteMemberToGroup","toEmail","signUserCertificate","createUserCert","signMemberAddressForDisabling","signedAddress","signUserCertForInvalidation","signedUserCert","concat","withRouter","ReactDOM"],"mappings":"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","file":"static/js/main.cc9b8645.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import history from \"history/createHashHistory\";\n\nexport default history();\n","import history from \"./history\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header(props) {\n  return (\n    <header className=\"App-header\">\n      <div className=\"header-wrapper\">\n        <Link to=\"/top\" className=\"logo\">GxCert</Link>\n        { props.isLoggedIn ? (\n            <Link to=\"/\" className=\"header-left-link\">OBTAINED</Link>\n          ) : \"\"\n        }\n        { props.isLoggedIn ? (\n          <Link to=\"/issue\" className=\"header-left-link\">ISSUE</Link>\n          ) : \"\"\n        }\n      </div>\n      { !props.isLoggedIn ? (\n          <div className=\"sign-in-button\" onClick={() => history.push(\"/signup\")}>SIGN IN</div>) : (\n          <div className=\"header-right-links\">\n            <Link to=\"/profile/edit\" className=\"edit-profile-button\">PROFILE</Link>\n            <div className=\"sign-out-button\" onClick={props.signOut}>SIGN OUT</div>\n          </div>\n          )\n      }\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nclass Footer extends React.Component {\n  constructor() {\n    super();\n  }\n  render() {\n    return (\n      <footer>\n        <div className=\"footer-message\">\n          このアプリケーションは、通貨MATICの寄付により、データの書き込み・変更ができます。\n        </div>\n        <div className=\"footer-app\">\n          Copyright Gaiax inc.\n        </div>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","\nimport { Link } from \"react-router-dom\";\n\nfunction Top() {\n  return (\n    <div className=\"top\">\n      <div className=\"top-left\">\n        \n      </div>\n      <div className=\"top-right\">\n        <p className=\"concept\">確かな証明書を誰にでも簡単に</p>\n        <p className=\"concept-large\">ブロックチェーン技術による、改ざんされない確かな証明書を簡単に発行、受け取りすることができます。</p>\n        <Link to=\"/signup\">\n          <div className=\"sign-up\">\n            SIGN UP\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Top;\n","\nfunction SignIn(props) {\n  return (\n    <div className=\"sign-in\">\n      <div className=\"sign-in-content\">\n        <p className=\"sign-in-message\">サービスの利用にはGoogleアカウントでの認証が必須です。Googleアカウントで認証を行った後、登録を完了させてください。</p>\n        <img src=\"/google.png\" onClick={props.signIn}/>\n      </div>\n    </div>\n  );\n}\n\nexport default SignIn;\n","\nfunction Registration() {\n  return (\n    <div className=\"registration\">\n      <div className=\"registration-content\">\n        <p className=\"registration-title\">ユーザー登録</p>\n        <img src=\"\" className=\"registration-icon\" />\n        <div className=\"registration-form\">\n          <p className=\"registration-form-title\">Name</p>\n          <input type=\"text\" className=\"registration-form-name\" />\n          <p className=\"registration-form-title\">E-mail</p>\n          <input type=\"text\" className=\"registration-form-email\" />\n        </div>\n        <div className=\"register-button\">\n          登録\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Registration;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\n\nclass Certificates extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchCertificates();\n  }\n  render() {\n    return (\n      <div className=\"certificates\">\n        <div className=\"certificates-content\">\n          <p className=\"certificates-title\">\n            証明書\n          </p>\n          <div className=\"certificates-list\">\n            { this.props.userCerts !== null ? this.props.userCerts.map((userCert, index) => {\n              return (\n                <Link to={\"/certs/\" + userCert.userCertId}>\n                  <div className=\"certificates-list-cell\">\n                    <img src={userCert.certificate.imageUrl} className=\"certificates-list-cell-icon\"/>\n                    <div className=\"certificates-list-cell-detail\">\n                      <p className=\"certificates-list-cell-title\">\n                        {userCert.certificate.title} \n                      </p>\n                      <p className=\"certificates-list-cell-by\">\n                        {userCert.certificate.groupName}\n                      </p>\n                      <p className=\"certificates-list-cell-date\">\n                        { (new Date(parseInt(userCert.timestamp) * 1000)).toISOString() }\n                      </p>\n                    </div>\n                  </div>\n                </Link>\n              );\n            }) : <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} /> }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Certificates;\n","import * as IpfsHttpClient from \"ipfs-http-client\";\nconst ipfs = IpfsHttpClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\nasync function postCertificate(blob) {\n  const response = await ipfs.add(blob);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the certificate to IPFS network.\");\n}\nasync function postText(text) {\n  const response = await ipfs.add(text);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the text to IPFS network.\");\n}\n\nfunction createImageUrlFromUint8Array(arr) {\n  const blob = new Blob([arr]);\n  const urlCreator = window.URL || window.webkitURL;\n  const imageUrl = urlCreator.createObjectURL(blob);\n  return imageUrl;\n}\nvar concatBuffer = function (buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n};\n\nasync function getImageOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    const url = createImageUrlFromUint8Array(content);\n    return url;\n  }\n  return null;\n}\n\nfunction uintToString(array) {\n  var out, i, len, c;\n  var char2, char3;\n\n  out = \"\";\n  len = array.length;\n  i = 0;\n  while (i < len) {\n    c = array[i++];\n    switch (c >> 4)\n    {\n      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12: case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(((c & 0x0F) << 12) |\n                                   ((char2 & 0x3F) << 6) |\n                                   ((char3 & 0x3F) << 0));\n        break;\n    }\n  }\n  return out;\n}\nasync function getTextOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    return uintToString(new Uint8Array(content));\n  }\n  return null;\n}\n\n\nexport { getImageOnIpfs, getTextOnIpfs, postCertificate, postText, createImageUrlFromUint8Array };\n","\nlet config;\nif (process.env.NODE_ENV === \"development\") {\n  config = {\n    web3Host: \"https://matic-mumbai.chainstacklabs.com\",\n    contractAddress: \"0xE19F38e0fA7B005E8E62E837B0D79C8558fAd8E0\",\n    gxApi: \"http://localhost:5001/gxcert-21233/asia-northeast1/gxcert\",\n    host: \"http://localhost:3000/#\",\n  };\n} else if (process.env.NODE_ENV === \"production\") {\n  //TODO: Change here\n  config = {\n    web3Host: \"https://matic-mumbai.chainstacklabs.com\",\n    contractAddress: \"0xE19F38e0fA7B005E8E62E837B0D79C8558fAd8E0\",\n    gxApi: \"https://asia-northeast1-gxcert-21233.cloudfunctions.net/gxcert\",\n    host: \"https://gaiax.github.io/gxcert-react2/#\",\n  }\n}\n\n\nexport default config;\n","import { getImageOnIpfs } from \"../util/ipfs\"\nimport React from \"react\";\n\nimport { Link } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\nimport domtoimage from \"dom-to-image\";\nimport { copyToClipboard } from \"../util/clipboard\";\nimport config from \"../config\";\n\n\nclass Certificate extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    const userCertId = parseInt(this.props.match.params.id);\n    this.props.fetchCertificate(userCertId);\n  }\n  render() {\n    console.log(this.props.userCert);\n    return (\n      <div className=\"certificate\">\n        { (this.props.userCert && this.props.userCert.certificate) ? (\n        <div className=\"hidden\">\n          <div className=\"certificate-content-export\" id=\"certificate-content-export\">\n            <p className=\"certificate-title\">\n              {this.props.userCert.certificate.title}\n            </p>\n            <img src={this.props.certificateImage} className=\"certificate-icon\" />\n            <table className=\"certificate-detail\">\n              <tr>\n                <td>Issue Date: </td>\n                <td>{(new Date(parseInt(this.props.userCert.timestamp * 1000))).toISOString()}</td>\n              </tr>\n              <tr>\n                <td>Issuer: </td>\n                <td>\n                  {!this.props.userCert.certificate.group ? \"\" : this.props.userCert.certificate.group.name }\n                </td>\n              </tr>\n              <tr>\n                <td>To: </td>\n                <td>\n                  { this.props.userCert.to }\n                </td>\n              </tr>\n              <tr>\n                <td>Title: </td>\n                <td>\n                  {this.props.userCert.certificate.title}\n                </td>\n              </tr>\n              <tr>\n                <td>Description: </td>\n                <td>{this.props.userCert.certificate.description}</td>\n              </tr>\n            </table>\n            <a id=\"cert-link\" download=\"cert.png\" href=\"\" ></a>\n          </div>\n        </div>\n        ) : \"\"}\n        { (!this.props.userCert || !this.props.userCert.certificate) ? (\n            <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\n          ) : (\n            <div className=\"certificate-content\" id=\"certificate-content\">\n              <p className=\"certificate-title\">\n                {this.props.userCert.certificate.title}\n              </p>\n              <img src={this.props.certificateImage} className=\"certificate-icon\" />\n              <table className=\"certificate-detail\">\n                <tr>\n                  <td>Issue Date: </td>\n                  <td>{(new Date(parseInt(this.props.userCert.timestamp * 1000))).toISOString()}</td>\n                </tr>\n                <tr>\n                  <td>Issuer: </td>\n                  <td>\n                    {!this.props.userCert.certificate.group ? \"\" : <a href={config.host + \"/group/\" + this.props.userCert.certificate.group.groupId}>{this.props.userCert.certificate.group.name}</a> }\n                  </td>\n                </tr>\n                <tr>\n                  <td>To: </td>\n                  <td>\n                    { this.props.userCert.to }\n                  </td>\n                </tr>\n                <tr>\n                  <td>Title: </td>\n                  <td>\n                    {this.props.userCert.certificate.title}\n                  </td>\n                </tr>\n                <tr>\n                  <td>Description: </td>\n                  <td>{this.props.userCert.certificate.description}</td>\n                </tr>\n              </table>\n              <a id=\"cert-link\" download=\"cert.png\" href=\"\" ></a>\n              <div className=\"certificate-buttons\">\n                <div className=\"certificate-button\" onClick={() => {\n                  copyToClipboard(window.location.href)\n                  alert(\"コピーしました\");\n                }} >\n                  参照URLの発行\n                </div>\n                <div className=\"certificate-button\" onClick={() => {\n                  domtoimage.toPng(document.getElementById(\"certificate-content-export\"))\n                    .then(dataUrl => {\n                      document.getElementById(\"cert-link\").href = dataUrl;\n                      document.getElementById(\"cert-link\").click();\n                    }).catch(err => {\n                      console.error(err);\n                      alert(\"証明書の書き出しに失敗しました\");\n                    });\n                }}>\n                  PDFのダウンロード\n                </div>\n              </div>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default Certificate;\n","function copyToClipboard(text){\n  var dummy = document.createElement(\"input\");\n  document.body.appendChild(dummy);\n  dummy.setAttribute('value', text);\n  dummy.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(dummy);\n}\n\nexport {\n  copyToClipboard,\n}\n","import React from \"react\";\nimport { createImageUrlFromUint8Array } from \"../util/ipfs\";\nimport { Link } from \"react-router-dom\";\n\nclass NewCert extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchGroupsInSidebar();\n  }\n  render() {\n    let imageUrl = \"\";\n    try {\n      imageUrl = createImageUrlFromUint8Array(this.props.image);\n    } catch(err) {\n      console.error(err);\n    }\n    return (\n      <div className=\"new-cert\">\n        <div className=\"sidebar\">\n            <p className=\"sidebar-title\">ISSUE</p>\n            <select className=\"sidebar-group\" onChange={this.props.onChangeGroupInSidebar} defaultValue={ this.props.groupInSidebar !== null ? this.props.groupInSidebar.groupId.toString() : \"\"}>\n              <option hidden>Choose group</option>\n              { this.props.groupsInSidebar !== null ? this.props.groupsInSidebar.map(group => {\n                return (\n                  <option value={group.groupId.toString()}>{group.name}</option>\n                )\n              }) : \"\" }\n              <option value=\"new\">Create new group</option>\n            </select>\n          <ul>\n            <li><Link to=\"/issue\">CERTIFICATE</Link></li>\n            <li><Link to=\"/group\">MEMBERS</Link></li>\n            <li><Link to=\"/group/edit/\">ISSUER</Link></li>\n          </ul>\n        </div>\n        <div className=\"new-cert-content\">\n          <p className=\"new-cert-title\">\n      { this.props.groupInSidebar !== null ? this.props.groupInSidebar.name + \"の\" : \"\"}証明書の登録 \n          </p>\n          <p className=\"new-cert-description\">\n            証明書を登録してください。証明書は複数登録することができ、それぞれの複数のユーザーに対して発行することができます。\n          </p>\n          <div className=\"new-cert-form\">\n            <p className=\"new-cert-form-title\">\n              Title of Certificate\n            </p>\n            <input type=\"text\" className=\"new-cert-form-name\" onChange={this.props.onChangeTitle}/>\n            <p className=\"new-cert-form-title\">\n              Description of Certificate\n            </p>\n            <textarea className=\"new-cert-form-description\" onChange={this.props.onChangeDescription} ></textarea>\n            <p className=\"new-cert-form-title\">\n              Certificate Image\n            </p>\n            <img src={imageUrl} className=\"new-cert-form-image\" />\n            <div className=\"new-cert-form-image-file-div\">\n              <label className=\"new-cert-form-image-file-label\">\n                <input type=\"file\" className=\"new-cert-form-image-file\" onChange={this.props.onChangeImage} />\n                画像選択\n              </label>\n            </div>\n            <div className=\"register-button\" onClick={() => this.props.sign()} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewCert;\n","import React from \"react\";\nimport { createImageUrlFromUint8Array } from \"../util/ipfs\";\n\nclass NewProfile extends React.Component {\n  constructor() {\n    super();\n  }\n  render() {\n    let imageUrl = \"\";\n    try {\n      imageUrl = createImageUrlFromUint8Array(this.props.image);\n    } catch(err) {\n      console.error(err);\n    }\n    return (\n      <div className=\"new-profile\">\n        <div className=\"new-profile-content\">\n          <p className=\"new-profile-title\">\n            ユーザー登録\n          </p>\n          <div className=\"new-profile-form\">\n            <div className=\"new-profile-form-image\">\n              <label for=\"new-profile-form-image-file\">\n                <img src={imageUrl} className=\"new-profile-form-image\" />\n              </label>\n              <input id=\"new-profile-form-image-file\" type=\"file\" onChange={this.props.onChangeProfileImage} />\n            </div>\n            <p className=\"new-profile-form-title\">Name</p>\n            <input type=\"text\" className=\"new-profile-form-name\" onChange={this.props.onChangeProfileName} />\n            <p className=\"new-profile-form-title\">E-mail</p>\n            <input type=\"text\" className=\"new-profile-form-email\" onChange={this.props.onChangeProfileEmail} />\n            <div className=\"register-button\" onClick={this.props.registerProfile} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewProfile;\n","import React from \"react\";\nimport { getImageOnIpfs } from \"../util/ipfs\";\nimport { createImageUrlFromUint8Array } from \"../util/ipfs\";\n\nclass EditProfile extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchProfile();\n  }\n  render() {\n    let imageUrl = null;\n    let initialImageUrl = null;\n    if (this.props.profile !== null) {\n      initialImageUrl = this.props.profile.imageUrl;\n    }\n    if (this.props.image) {\n      try {\n        imageUrl = createImageUrlFromUint8Array(this.props.image);\n      } catch(err) {\n        console.error(err);\n      }\n    }\n    console.log(imageUrl);\n    return (\n      <div className=\"edit-profile\">\n        <div className=\"edit-profile-content\">\n          <p className=\"edit-profile-title\">\n            プロフィール編集\n          </p>\n          <div className=\"edit-profile-form\">\n            <div className=\"edit-profile-form-image\">\n              <label for=\"edit-profile-form-image-file\">\n                <img src={imageUrl === null ? initialImageUrl : imageUrl} className=\"edit-profile-form-image\" />\n              </label>\n              <input id=\"edit-profile-form-image-file\" type=\"file\" onChange={this.props.onChangeProfileImage} />\n            </div>\n            <p className=\"edit-profile-form-title\">Name</p>\n            <input type=\"text\" className=\"edit-profile-form-name\" onChange={this.props.onChangeProfileName} defaultValue={this.props.profile !== null ? this.props.profile.name : \"\"} />\n            <p className=\"edit-profile-form-title\">E-mail</p>\n            <input type=\"text\" className=\"edit-profile-form-email\" onChange={this.props.onChangeProfileEmail} defaultValue={this.props.profile !== null ? this.props.profile.email : \"\"} />\n            <div className=\"register-button\" onClick={this.props.updateProfile} >\n              更新\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditProfile;\n","import React from \"react\";\n\nclass NewGroup extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div className=\"new-group\">\n        <div className=\"new-group-content\">\n          <p className=\"new-group-title\">発行元の登録</p>\n          <p className=\"new-group-description\">証明書の発行には発行元となる団体（企業、教育機関、NPO法人など）の登録が必要です。</p>\n          <div className=\"new-group-form\">\n            <p className=\"new-group-form-title\">Name</p>\n            <input type=\"text\" className=\"new-group-form-name\" onChange={this.props.onChangeGroupName} />\n            <p className=\"new-group-form-title\">Address</p>\n            <input type=\"text\" className=\"new-group-form-address\" onChange={this.props.onChangeGroupAddress} />\n            <p className=\"new-group-form-title\">Phone</p>\n            <input type=\"text\" className=\"new-group-form-phone\" onChange={this.props.onChangeGroupPhone} />\n\n            <div className=\"register-button\" onClick={this.props.registerGroup} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewGroup;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\n\nclass EditGroup extends React.Component {\n  constructor() {\n    super();\n  }\n\n  componentDidMount() {\n  }\n  render() {\n    console.log(this.props.groupInSidebar);\n    return (\n      <div className=\"edit-group\">\n        <div className=\"sidebar\">\n            <p className=\"sidebar-title\">ISSUE</p>\n            <select className=\"sidebar-group\" onChange={this.props.onChangeGroupInSidebar} defaultValue={ this.props.groupInSidebar !== null ? this.props.groupInSidebar.groupId.toString() : \"\"}>\n              <option hidden>Choose group</option>\n              { this.props.groupsInSidebar !== null ? this.props.groupsInSidebar.map(group => {\n                return (\n                  <option value={group.groupId.toString()}>{group.name}</option>\n                )\n              }) : \"\" }\n              <option value=\"new\">Create new group</option>\n            </select>\n          <ul>\n            <li><Link to=\"/issue\">CERTIFICATE</Link></li>\n            <li><Link to=\"/group\">MEMBERS</Link></li>\n            <li><Link to=\"/group/edit/\">ISSUER</Link></li>\n          </ul>\n        </div>\n        { this.props.groupInSidebar !== null ? (\n        <div className=\"edit-group-content\">\n          <p className=\"edit-group-title\">発行元 {this.props.groupInSidebar.name}の更新</p>\n          <p className=\"edit-group-description\">証明書の発行には発行元となる団体（企業、教育機関、NPO法人など）の登録が必要です。</p>\n          <div className=\"edit-group-form\">\n            <p className=\"edit-group-form-title\">Name</p>\n            <input type=\"text\" className=\"edit-group-form-name\" onChange={this.props.onChangeGroupName} defaultValue={this.props.groupInSidebar.name} />\n            <p className=\"edit-group-form-title\">Address</p>\n            <input type=\"text\" className=\"edit-group-form-address\" onChange={this.props.onChangeGroupAddress} defaultValue={this.props.groupInSidebar.residence}/>\n            <p className=\"edit-group-form-title\">Phone</p>\n            <input type=\"text\" className=\"edit-group-form-phone\" onChange={this.props.onChangeGroupPhone} defaultValue={this.props.groupInSidebar.phone} />\n\n            <div className=\"register-button\" onClick={this.props.updateGroup} >\n              更新\n            </div>\n          </div>\n        </div>) : ( <div className=\"edit-group-content\">\n          <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\n        </div>) }\n      </div>\n    );\n  }\n}\n\nexport default EditGroup;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\n\nclass GroupMembers extends React.Component {\n\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <div className=\"group-members\">\n        <div className=\"sidebar\">\n            <p className=\"sidebar-title\">ISSUE</p>\n            <select className=\"sidebar-group\" onChange={this.props.onChangeGroupInSidebar} defaultValue={ this.props.groupInSidebar !== null ? this.props.groupInSidebar.groupId.toString() : \"\"}>\n              <option hidden>Choose group</option>\n              { this.props.groupsInSidebar !== null ? this.props.groupsInSidebar.map(group => {\n                return (\n                  <option value={group.groupId.toString()}>{group.name}</option>\n                )\n              }) : \"\" }\n              <option value=\"new\">Create new group</option>\n            </select>\n          <ul>\n            <li><Link to=\"/issue\">CERTIFICATE</Link></li>\n            <li><Link to=\"/group\">MEMBERS</Link></li>\n            <li><Link to=\"/group/edit/\">ISSUER</Link></li>\n          </ul>\n        </div>\n        <div className=\"group-members-content\">\n          { (() => {\n            const that = this;\n            if (!this.props.groupInSidebar) {\n              return (\n                <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} /> \n              );\n            }\n            return (\n              <div>\n                <p className=\"group-members-title\">{ this.props.groupInSidebar.name }のメンバー</p>\n                <input type=\"text\" className=\"group-members-invite\" onChange={this.props.onChangeGroupMemberToInvite} />\n                <button className=\"group-members-invite-button\" onClick={this.props.inviteMember} >Invite</button>\n                <div className=\"group-members-list\">\n                  { this.props.groupInSidebar.members.map(member => {\n                    return (\n                      <div className=\"group-members-list-cell\">\n                        <img src={member.imageUrl} className=\"group-members-list-cell-icon\"/>\n                        <div className=\"group-members-list-cell-detail\">\n                          <p className=\"group-members-list-cell-name\">\n                            {member.name} \n                          </p>\n                          <p className=\"group-members-list-cell-address\">\n                            {member.address}\n                          </p>\n                        </div>\n                        <div className=\"group-members-list-cell-disable\" onClick={() => that.props.disableGroupMember(that.props.groupInSidebar.groupId, member.address) }>無効化</div>\n                      </div>\n                    );\n                  }) }\n                </div>\n              </div>\n            );\n          })() }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GroupMembers;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\n\nclass Issuer extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchGroupsInSidebar();\n  }\n  render() {\n    return (\n      <div className=\"issuer\">\n        <div className=\"sidebar\">\n            <p className=\"sidebar-title\">ISSUE</p>\n            <select className=\"sidebar-group\" onChange={this.props.onChangeGroupInSidebar} defaultValue={ this.props.groupInSidebar !== null ? this.props.groupInSidebar.groupId.toString() : \"\"}>\n              <option hidden>Choose group</option>\n              { this.props.groupsInSidebar !== null ? this.props.groupsInSidebar.map(group => {\n                return (\n                  <option value={group.groupId.toString()}>{group.name}</option>\n                )\n              }) : \"\" }\n              <option value=\"new\">Create new group</option>\n            </select>\n          <ul>\n            <li><Link to=\"/issue\">CERTIFICATE</Link></li>\n            <li><Link to=\"/group\">MEMBERS</Link></li>\n            <li><Link to=\"/group/edit/\">ISSUER</Link></li>\n          </ul>\n        </div>\n        <div className=\"issuer-certificates-wrapper\">\n          <div className=\"issuer-certificates\">\n            <Link to=\"/new\">\n              <div className=\"issuer-certificates-new\">新規作成</div>\n            </Link>\n            <br/>\n            <p className=\"issuer-certificates-title\">{this.props.groupInSidebar !== null ? this.props.groupInSidebar.name + \"の\" : \"\"}証明書</p>\n            { this.props.groupInSidebar === null ? (\n              <div className=\"issuer-certificates-select-group\">\n                Choose group on sidebar.\n              </div>\n            ) : (\n              <div className=\"issuer-certificates-list\">\n                { this.props.certificates !== null ? \n                  this.props.certificates.map(certificate => {\n                    return (\n                      <div className=\"issuer-certificates-list-cell\">\n                        <img src={certificate.imageUrl} className=\"issuer-certificates-list-cell-icon\"/>\n                        <p className=\"issuer-certificates-list-cell-title\">\n                          {certificate.title} \n                        </p>\n                        <Link to={\"/issue/\" + certificate.id}>\n                          <div className=\"issuer-certificates-list-cell-issue\">発行</div>\n                        </Link>\n                      </div>\n                    );\n                  }) : <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} /> \n                }\n              </div>\n            ) }\n          </div>\n          { this.props.certificates !== null ? this.props.certificates.map((certificate) => {\n            return (\n              <div className=\"issuer-certificate\">\n                <p className=\"issuer-certificate-title\">\n                  {certificate.title}\n                </p>\n                <div className=\"issuer-certificate-list\">\n                  { certificate.userCerts.map((userCert, index) => {\n                    return (\n                      <div className=\"certificates-list-cell\">\n                        <img src={userCert.profile ? userCert.profile.imageUrl : \"\"} className=\"issuer-certificate-list-cell-icon\"/>\n                        <div className=\"issuer-certificate-list-cell-detail\">\n                          <p className=\"issuer-certificate-list-cell-name\">\n                            {userCert.profile ? userCert.profile.name : \"\"} \n                          </p>\n                          <p className=\"issuer-certificate-list-cell-address\">\n                            { userCert.to }\n                          </p>\n                        </div>\n                        <div className=\"issuer-certificate-list-cell-invalidate\" onClick={() => this.props.invalidateUserCert(userCert.userCertId)}>無効化</div>\n                      </div>\n                    );\n                  }) }\n                </div>\n              </div>\n            );\n          }) : \"\" }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Issuer;\n","import React from \"react\";\n\nclass Issue extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.certId = parseInt(this.props.match.params.certId);\n    this.props.fetchCertificate(this.certId);\n  }\n  render() {\n    return (\n      <div className=\"issue\">\n        { !this.props.certificate ? (\n          <div className=\"issue-content\">\n            <p className=\"certificate-not-found\">Certificate not found.</p> \n          </div>\n        ) : (\n          <div className=\"issue-content\">\n            <p className=\"issue-title\">\n              {this.props.certificate.title}の発行\n            </p>\n            <p className=\"issue-form-title\">Add Address</p>\n            <div className=\"issue-form\">\n              <input type=\"text\" className=\"issue-form-to\" onChange={this.props.onChangeToInIssue}/>\n              <button className=\"issue-form-issue\" onClick={ () => { this.props.issue(this.certId)}}>発行</button>\n            </div>\n          </div>\n        ) }\n      </div>\n    );\n  }\n}\n\nexport default Issue;\n","import React from \"react\";\nimport \"./Loading.css\";\nimport Loader from \"react-loader-spinner\";\n\nclass Loading extends React.Component {\n  render() {\n    return (\n      <div className=\"loading-overlay\">\n        <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} className=\"loading-loader\" />\n      </div>\n    )\n  }\n}\n\nexport default Loading;\n","import React from \"react\";\nimport Loader from \"react-loader-spinner\";\nclass Group extends React.Component {\n  constructor() {\n    super();\n  }\n\n  componentDidMount() {\n    const groupId = parseInt(this.props.match.params.groupId);\n    this.props.fetchGroup(groupId);\n  }\n\n  render() {\n    return (\n      <div className=\"group\">\n        { this.props.group ? (\n          <div className=\"group-content\">\n            <p className=\"group-title\">{ this.props.group.name }</p>\n            <table className=\"group-detail\">\n              <tr>\n                <td>電話番号</td>\n                <td>{this.props.group.phone}</td>\n              </tr>\n              <tr>\n                <td>住所</td>\n                <td>{this.props.group.residence}</td>\n              </tr>\n            </table>\n          </div>\n        ) : <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} /> }\n      </div>\n    );\n  }\n}\n\nexport default Group;\n","import React from \"react\";\n\nclass NotFound extends React.Component {\n  constructor() {\n    super();\n  }\n  render() {\n    return (\n      <div className=\"not-found\">\n        <div className=\"not-found-content\">\n          <p className=\"not-found-message\">404 Not Found</p>\n          <p className=\"not-found-message-sub\">This url is invalid.</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","import React from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nclass User extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    const address = this.props.match.params.address;\n    this.props.fetchProfile(address);\n  }\n  render() {\n    return (\n      <div className=\"user\">\n        { this.props.profile ? (\n          <div className=\"user-content\">\n            <img src={this.props.profile.imageUrl} className=\"show-profile-image\" />\n            <p className=\"user-title\">{this.props.profile.name}</p>\n          </div>\n        ) : <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} /> }\n      </div>\n    )\n  }\n}\n\nexport default User;\n","import React from \"react\";\nimport logo from './logo.svg';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Top from \"./views/Top\";\nimport SignIn from \"./views/SignIn\";\nimport Registration from \"./views/Registration\";\nimport Certificates from \"./views/Certificates\";\nimport Certificate from \"./views/Certificate\";\nimport NewCert from \"./views/NewCert\";\nimport NewProfile from \"./views/NewProfile\";\nimport EditProfile from \"./views/EditProfile\";\nimport NewGroup from \"./views/NewGroup\";\nimport EditGroup from \"./views/EditGroup\";\nimport GroupMembers from \"./views/GroupMembers\";\nimport Issuer from \"./views/Issuer\";\nimport Issue from \"./views/Issue\";\nimport Loading from \"./Loading\";\nimport Group from \"./views/Group\";\nimport User from \"./views/User\";\nimport NotFound from \"./views/NotFound\";\nimport './App.css';\nimport { Switch, Route } from \"react-router-dom\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super(); \n  }\n  render() {\n    const that = this;\n    return (\n      <div className=\"App\">\n        <Header\n          isLoggedIn={that.props.state.from !== \"\"}\n          signOut={that.props.signOut}\n        ></Header>\n        <Switch>\n          <Route exact={true} path=\"/\" render={ (routeProps) => {\n            if (that.props.state.from === \"\") { \n              return (\n                <Top />\n              );\n            }\n            return (<Certificates\n              {...routeProps}\n              userCerts={that.props.state.certificates}\n              fetchCertificates={that.props.fetchCertificates}\n            />)\n\n          } }/>\n          <Route exact={true} path=\"/top\" render={ (routeProps) => {\n            return (\n              <Top />\n            )\n          } }/>\n          <Route exact={true} path=\"/signup\" render={ (routeProps) => <SignIn\n            {...routeProps}\n            signIn={that.props.signIn}\n            />\n          } />\n          <Route exact={true} path=\"/new/\" render={ () => <NewCert\n              fetchGroups={that.props.fetchGroups}\n              fetchGroupsInSidebar={that.props.fetchGroupsInSidebar}\n              groupsInSidebar={that.props.state.groupsInSidebar}\n              groupInSidebar={that.props.state.groupInSidebar}\n              onChangeGroupInSidebar={that.props.onChangeGroupInSidebar}\n              onChangeTitle={that.props.onChangeTitle}\n              onChangeDescription={that.props.onChangeDescription}\n              onChangeImage={that.props.onChangeImage}\n              onChangeGroup={that.props.onChangeGroup}\n              sign={that.props.sign}\n              from={that.props.state.from}\n              image={that.props.state.image}\n              groups={that.props.state.groups}\n            />\n          } />\n          <Route exact={true} path=\"/issue/\" render={ (routeProps) => <Issuer\n            {...routeProps}\n            fetchGroupsInSidebar={that.props.fetchGroupsInSidebar}\n            groupsInSidebar={that.props.state.groupsInSidebar}\n            groupInSidebar={that.props.state.groupInSidebar}\n            onChangeGroupInSidebar={that.props.onChangeGroupInSidebar}\n            groups={that.props.state.groupsInIssuer}\n            certificates={that.props.state.certificatesInIssuer}\n            fetchCertificates={that.props.fetchCertificatesInIssuer}\n            issue={that.props.issue}\n            invalidateUserCert={that.props.invalidateUserCert}\n            />\n          } />\n          <Route exact={true} path=\"/issue/:certId\" render={ (routeProps) => <Issue\n            {...routeProps}\n            certificate={that.props.state.certificateInIssue}\n            fetchCertificate={that.props.fetchCertificateInIssue}\n            onChangeToInIssue={that.props.onChangeToInIssue}\n            issue={that.props.issue}\n          />\n          } />\n          <Route exact={true} path=\"/certs/:id\" render={ (routeProps) => <Certificate\n\n            {...routeProps}\n            userCert={that.props.state.certificate}\n            certificateImage={that.props.state.certificateImage}\n            fetchCertificate={that.props.fetchCertificate}\n            />\n          } />\n          <Route exact={true} path=\"/group/new\" render={ (routeProps) => <NewGroup\n            {...routeProps}\n            registerGroup={that.props.registerGroup}\n            onChangeGroupName={that.props.onChangeGroupName}\n            onChangeGroupAddress={that.props.onChangeGroupAddress}\n            onChangeGroupPhone={that.props.onChangeGroupPhone}\n            />\n          } />\n          <Route exact={true} path=\"/group/edit\" render={ (routeProps) => <EditGroup\n            {...routeProps}\n            fetchGroupsInSidebar={that.props.fetchGroupsInSidebar}\n            groupsInSidebar={that.props.state.groupsInSidebar}\n            groupInSidebar={that.props.state.groupInSidebar}\n            onChangeGroupInSidebar={that.props.onChangeGroupInSidebar}\n            group={that.props.state.groupInEdit}\n            updateGroup={that.props.updateGroup}\n            fetchGroup={that.props.fetchGroupInEdit}\n            onChangeGroupId={that.props.onChangeGroupIdInEdit}\n            onChangeGroupName={that.props.onChangeGroupNameInEdit}\n            onChangeGroupAddress={that.props.onChangeGroupAddressInEdit}\n            onChangeGroupPhone={that.props.onChangeGroupPhoneInEdit}\n            />\n          } />\n          <Route exact={true} path=\"/group\" render={ (routeProps) => <GroupMembers\n            {...routeProps}\n            fetchGroupsInSidebar={that.props.fetchGroupsInSidebar}\n            groupsInSidebar={that.props.state.groupsInSidebar}\n            groupInSidebar={that.props.state.groupInSidebar}\n            onChangeGroupInSidebar={that.props.onChangeGroupInSidebar}\n            group={that.props.state.group}\n            fetchGroup={that.props.fetchGroup}\n            inviteMember={that.props.inviteMember}\n            onChangeGroupMemberToInvite={that.props.onChangeGroupMemberToInvite}\n            disableGroupMember={that.props.disableGroupMember}\n            />\n          } />\n          <Route exact={true} path=\"/group/:groupId\" render={ (routeProps) => <Group\n            {...routeProps}\n            group={that.props.state.groupInShow}\n            fetchGroup={that.props.fetchGroupInShow}\n            />\n          } />\n          <Route exact={true} path=\"/profile/new\" render={ (routeProps) => <NewProfile\n            {...routeProps}\n            image={that.props.state.profileImage}\n            registerProfile={that.props.registerProfile}\n            onChangeProfileName={that.props.onChangeProfileName}\n            onChangeProfileEmail={that.props.onChangeProfileEmail}\n            onChangeProfileImage={that.props.onChangeProfileImage}\n            />\n          } />\n          <Route exact={true} path=\"/profile/edit\" render={ (routeProps) => <EditProfile\n            {...routeProps}\n            image={that.props.state.profileImageInEdit}\n            updateProfile={that.props.updateProfile}\n            profile={that.props.state.profileInEdit}\n            profileName={that.props.state.profileNameInEdit}\n            profileEmail={that.props.state.profileEmailInEdit}\n            profileImage={that.props.state.profileImageInEdit}\n            fetchProfile={that.props.fetchProfileInEdit}\n            onChangeProfileName={that.props.onChangeProfileNameInEdit}\n            onChangeProfileEmail={that.props.onChangeProfileEmailInEdit}\n            onChangeProfileImage={that.props.onChangeProfileImageInEdit}\n            />\n          } />\n          <Route component={NotFound} />\n        </Switch>\n        <Footer />\n        { this.props.state.isLoading ? <Loading /> : \"\" }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nconst initialState = {\n  from: \"\",\n  to: \"\",\n  title: \"\",\n  description: \"\",\n  image: null,\n  toInIssue: \"\",\n  isLoading: false,\n  groupId: null,\n  groupInEdit: null,\n  groupName: \"\",\n  groupMemberToInvite: \"\",\n  groupAddress: \"\",\n  groupPhone: \"\",\n  groupIdInEdit: \"\",\n  groupInShow: null,\n  groupNameInEdit: \"\",\n  groupAddressInEdit: \"\",\n  groupPhoneInEdit: \"\",\n  groupInIssuer: null,\n  groupInSidebar: null,\n  groupsInSidebar: [],\n  certificate: {},\n  certificateImage: \"\",\n  certificates: [],\n  certificatesInIssuer: null,\n  certificateInIssue: null,\n  group: null,\n  groups: [],\n  profileInEdit: null,\n  profileInShow: null,\n  profileName: \"\",\n  profileEmail: \"\",\n  profileImage: \"\",\n  profileNameInEdit: \"\",\n  profileEmailInEdit: \"\",\n  profileImageInEdit: \"\",\n}\n\nexport default initialState;\n","import GxCertClient from \"gxcert-lib\";\nimport Web3 from \"web3\";\nimport torusClient from \"./torus\";\n\nimport config from \"./config\";\n\n\nlet gxCertWithoutLogin = new GxCertClient(new Web3(config.web3Host), config.contractAddress);\nlet gxCert;\n\nasync function getGxCertWithoutLogin() {\n  if (!gxCertWithoutLogin.isInitialized()) {\n    await gxCertWithoutLogin.init();\n  }\n  return gxCertWithoutLogin;\n}\nasync function getGxCert() {\n  let web3;\n  try {\n    await torusClient.init();\n    web3 = await torusClient.login();\n  } catch(err) {\n    console.error(err);\n  }\n  console.log(web3);\n  if (web3) {\n    try {\n      gxCert = new GxCertClient(web3, config.contractAddress, config.gxApi);\n      await gxCert.init();\n    } catch(err) {\n      console.error(err);\n      throw new Error(\"gxCert is not initialized.\");\n    }\n  }\n  if (gxCert === null) {\n    throw new Error(\"gxCert is not initialized.\");\n  }\n  if (!gxCert.address) {\n    await gxCert.getMyAddress();\n  }\n  return gxCert;\n}\n\nexport {\n  getGxCert,\n  getGxCertWithoutLogin,\n};\n","import { combineReducers, createStore, compose, applyMiddleware } from \"redux\";\nimport Reducer from \"./reducer\";\nimport thunk from \"redux-thunk\";\nimport { persistReducer, persistStore } from 'redux-persist'\nimport sessionStorage from 'redux-persist/lib/storage/session'\nimport initialState from \"./initialState\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage: sessionStorage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, Reducer);\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers({\n    state: persistedReducer,\n  }),\n  initialState,\n  storeEnhancers(applyMiddleware(thunk))\n);\n\nexport const persistor = persistStore(store);\nexport default store;\n","\nimport initialState from \"./initialState\";\n\nexport default function Reducer(state=initialState, action) {\n  switch(action.type) {\n    case \"ON_CHANGE_TITLE\":\n      return Object.assign({}, state, {\n        title: action.payload\n      });\n    case \"ON_CHANGE_DESCRIPTION\":\n      return Object.assign({}, state, {\n        description: action.payload\n      });\n    case \"ON_CHANGE_IMAGE\":\n      return Object.assign({}, state, {\n        image: action.payload\n      });\n    case \"ON_CHANGE_GROUP\":\n      return Object.assign({}, state, {\n        groupId: action.payload\n      });\n    case \"ON_CHANGE_GROUP_NAME\":\n      return Object.assign({}, state, {\n        groupName: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_ADDRESS\":\n      return Object.assign({}, state, {\n        groupAddress: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_IN_SIDEBAR\":\n      console.log(action.payload);\n      return Object.assign({}, state, {\n        groupInSidebar: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_PHONE\":\n      return Object.assign({}, state, {\n        groupPhone: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_MEMBER_TO_INVITE\":\n      return Object.assign({}, state, {\n        groupMemberToInvite: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_ID_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupIdInEdit: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_NAME_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupNameInEdit: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_ADDRESS_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupAddressInEdit: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_PHONE_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupPhoneInEdit: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_NAME\":\n      return Object.assign({}, state, {\n        profileName: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_EMAIL\":\n      return Object.assign({}, state, {\n        profileEmail: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_IMAGE\":\n      return Object.assign({}, state, {\n        profileImage: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_NAME_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileNameInEdit: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_EMAIL_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileEmailInEdit: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_IMAGE_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileImageInEdit: action.payload,\n      });\n    case \"ON_CHANGE_TO_IN_ISSUE\":\n      return Object.assign({}, state, {\n        toInIssue: action.payload,\n      });\n    case \"LOGGED_IN\":\n      return Object.assign({}, state, {\n        from: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE\":\n      return Object.assign({}, state, {\n        certificate: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE_IN_ISSUE\":\n      return Object.assign({}, state, {\n        certificateInIssue: action.payload,\n      });\n    case \"FETCHED_CERTIFICATES\":\n      if (action.payload === null) {\n        return Object.assign({}, state, {\n          certificates: null,\n        });\n      }\n      return Object.assign({}, state, {\n        certificates: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE_IMAGE\":\n      return Object.assign({}, state, {\n        certificateImage: action.payload,\n      });\n    case \"FETCHED_GROUPS\":\n      return Object.assign({}, state, {\n        groups: action.payload,\n      });\n    case \"FETCHED_GROUPS_IN_SIDEBAR\":\n      return Object.assign({}, state, {\n        groupsInSidebar: action.payload,\n      });\n    case \"FETCHED_GROUP\":\n      return Object.assign({}, state, {\n        group: action.payload,\n      });\n    case \"FETCHED_GROUP_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupInEdit: action.payload,\n      });\n    case \"FETCHED_CERTIFICATES_IN_ISSUER\":\n      return Object.assign({}, state, {\n        certificatesInIssuer: action.payload,\n      });\n    case \"FETCHED_PROFILE_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileInEdit: action.payload,\n      });\n    case \"FETCHED_PROFILE_IN_SHOW\":\n      return Object.assign({}, state, {\n        profileInShow: action.payload,\n      });\n    case \"FETCHED_GROUP_IN_SHOW\":\n      return Object.assign({}, state, {\n        groupInShow: action.payload,\n      });\n    case \"LOADING\":\n      return Object.assign({}, state, {\n        isLoading: action.payload\n      });\n    default:\n      return initialState;\n  }\n}\n\n","import Torus from \"@toruslabs/torus-embed\";\nimport Web3 from \"web3\";\n\nclass TorusClient {\n  constructor() {\n    this.torus = new Torus();\n  }\n  async init() {\n    await this.torus.init({\n      buildEnv: \"production\",\n      enableLogging: true,\n      network: {\n        host: \"https://matic-mumbai.chainstacklabs.com\",\n        chainId: 80001,\n        networkName: \"Mumbai Testnet\"\n      },\n      showTorusButton: true,\n      enabledVerifiers: {\n        google: true,\n        facebook:false,\n        reddit: false,\n        twitch: false,\n        discord: false,\n      }\n    });\n    /*\n    await this.torus.init({\n      buildEnv: \"production\",\n      enableLogging: true,\n      network: {\n        host: \"http://localhost:7545\",\n        chainId: 80001,\n        networkName: \"localhost:7545\"\n      },\n      showTorusButton: true,\n    });\n    */\n  }\n  async login() {\n    const response = await this.torus.login();\n    console.log(response);\n    console.log(this.torus);\n    this.web3 = new Web3(this.torus.provider);\n    console.log(this.web3);\n    return this.web3;\n  }\n  async getPublicAddressByGoogle(gmail) {\n    return await this.torus.getPublicAddress({\n      verifier: \"google\",\n      verifierId: gmail,\n    });\n  }\n}\n\nconst torusClient = new TorusClient();\nexport default torusClient;\n","import { getGxCert, getGxCertWithoutLogin } from \"./gxcert-client\";\nimport { getImageOnIpfs, createImageUrlFromUint8Array } from \"./util/ipfs\";\nimport torusClient from \"./torus\";\nimport history from \"./history\";\n\nfunction wait() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, 6000);\n  });\n}\nconst onChangeTitle = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_TITLE\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeDescription = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_DESCRIPTION\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeImage = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_IMAGE\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\nconst onChangeGroup = (evt) => async (dispatch, getState) => {\n  if (evt.target.value === \"new\") {\n    history.push(\"/group/new\");\n    return;\n  }\n  dispatch({\n    type: \"ON_CHANGE_GROUP\",\n    payload: parseInt(evt.target.value),\n  });\n}\n\nconst onChangeToInIssue = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_TO_IN_ISSUE\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupIdInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ID_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupNameInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_NAME_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupAddressInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ADDRESS_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupPhoneInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_PHONE_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupName = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupAddress = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ADDRESS\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupPhone = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_PHONE\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileName = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileEmail = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_EMAIL\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileImage = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_PROFILE_IMAGE\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\nconst onChangeProfileNameInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileEmailInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_EMAIL_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileImageInEdit = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_PROFILE_IMAGE_IN_EDIT\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\n\nconst onChangeGroupMemberToInvite = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_MEMBER_TO_INVITE\",\n    payload: evt.target.value,\n  });\n}\n\nconst fetchCertificateInIssue = (certId) => async (dispatch) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let certificate;\n  try {\n    certificate = await gxCert.getCert(certId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE_IN_ISSUE\",\n    payload: certificate,\n  });\n}\n\nconst fetchCertificate = (userCertId) => async (dispatch) => {\n  dispatch({\n    type: \"FETCHED_CERTIFICATE\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let userCert;\n  try {\n    userCert = await gxCert.getUserCert(userCertId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE\",\n    payload: userCert,\n  });\n  const imageCid = userCert.certificate.image;\n  let imageUrl;\n  try {\n    imageUrl = await getImageOnIpfs(imageCid);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE_IMAGE\",\n    payload: imageUrl,\n  });\n  try {\n    const group = await gxCert.getGroup(userCert.certificate.groupId);\n    userCert.certificate.group = group;\n    dispatch({\n      type: \"FETCHED_CERTIFICATE\",\n      payload: userCert,\n    });\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  try {\n    const profile = await gxCert.getProfile(userCert.to);\n    userCert.to = profile.name;\n    dispatch({\n      type: \"FETCHED_CERTIFICATE\",\n      payload: userCert,\n    });\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\n\nconst fetchCertificates = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"FETCHED_CERTIFICATES\",\n    payload: null,\n  });\n  const state = getState().state;\n  const address = state.from;\n  if (address === \"\" || !address) {\n    history.push(\"/top\");\n    return;\n  }\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let userCerts;\n  try {\n    userCerts = await gxCert.getReceivedUserCerts(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  for (let i = 0; i < userCerts.length; i++) {\n    gxCert.getGroup(userCerts[i].certificate.groupId).then(group => {\n      userCerts[i].certificate.groupName = group.name;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES\",\n        payload: userCerts,\n      });\n    });\n    getImageOnIpfs(userCerts[i].certificate.image).then(imageUrl => {\n      userCerts[i].certificate.imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES\",\n        payload: userCerts,\n      });\n    });\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES\",\n    payload: userCerts,\n  });\n}\n\nconst fetchGroupsInSidebar = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const address = gxCert.address;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUPS_IN_SIDEBAR\",\n    payload: groups,\n  });\n\n}\n\nconst fetchGroupInShow = (groupId) => async (dispatch, getState) => {\n  dispatch({\n    type: \"FETCHED_GROUP_IN_SHOW\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let group;\n  try {\n    group = await gxCert.getGroup(groupId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUP_IN_SHOW\",\n    payload: group,\n  });\n}\n\nconst onChangeGroupInSidebar = (evt) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const groupIdStr = evt.target.value;\n  if (groupIdStr === \"new\") {\n    history.push(\"/group/new\");\n    return;\n  }\n  const groupId = parseInt(groupIdStr);\n  const groups = state.groupsInSidebar;\n  for (const group of groups) {\n    if (group.groupId === groupId) {\n      dispatch({\n        type: \"ON_CHANGE_GROUP_IN_SIDEBAR\",\n        payload: group,\n      });\n      dispatch({\n        type: \"ON_CHANGE_GROUP_NAME_IN_EDIT\",\n        payload: group.name,\n      });\n      dispatch({\n        type: \"ON_CHANGE_GROUP_ADDRESS_IN_EDIT\",\n        payload: group.residence,\n      });\n      dispatch({\n        type: \"ON_CHANGE_GROUP_PHONE_IN_EDIT\",\n        payload: group.phone,\n      });\n      console.log(group);\n      for (let i = 0; i < group.members.length; i++) {\n        getImageOnIpfs(group.members[i].icon).then(imageUrl => {\n          group.members[i].imageUrl = imageUrl;\n          dispatch({\n            type: \"ON_CHANGE_GROUP_IN_SIDEBAR\",\n            payload: group,\n          });\n        }).catch(err => {\n          console.error(err);\n        });\n      }\n      continue;\n    }\n  }\n  fetchCertificatesInIssuer()(dispatch, getState);\n}\nconst fetchGroups = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const address = state.from;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUPS\",\n    payload: groups,\n  });\n}\n\nconst signIn = () => async (dispatch) => {\n  const gxCert = await getGxCert();\n  if (!gxCert.address) {\n    console.log(\"Failed to login.\");\n    return;\n  }\n  console.log(gxCert.address);\n  dispatch({\n    type: \"LOGGED_IN\",\n    payload: gxCert.address,\n  });\n  let profile;\n  try {\n    profile = await gxCert.getProfile(gxCert.address);\n  } catch(err) {\n    console.error(err);\n    history.push(\"/profile/new\");\n    return;\n  }\n\n  history.push(\"/\");\n}\n\nconst fetchGroup = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"FETCHED_GROUP\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\nconst fetchGroupInEdit = (groupId) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ID_IN_EDIT\",\n    payload: groupId,\n  });\n  dispatch({\n    type: \"FETCHED_GROUP_IN_EDIT\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n\n\n  const state = getState().state;\n  let group;\n  try {\n    group = await gxCert.getGroup(groupId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUP_IN_EDIT\",\n    payload: group,\n  });\n}\nconst fetchProfileInShow = (address) => async (dispatch, getState) => {\n  dispatch({\n    type: \"FETCHED_PROFILE_IN_SHOW\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let profile;\n  try {\n    profile = await gxCert.getProfile(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_PROFILE_IN_SHOW\",\n    payload: profile,\n  });\n\n  getImageOnIpfs(profile.icon).then(imageUrl => {\n    profile.imageUrl = imageUrl;\n    dispatch({\n      type: \"FETCHED_PROFILE_IN_SHOW\",\n      payload: profile,\n    });\n  }).catch(err => {\n    console.error(err);\n  });\n  \n}\nconst fetchProfileInEdit = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"FETCHED_PROFILE_IN_EDIT\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let profile;\n  try {\n    profile = await gxCert.getProfile(gxCert.address);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to fetch profile.\");\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_PROFILE_IN_EDIT\",\n    payload: profile,\n  });\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME_IN_EDIT\",\n    payload: profile.name,\n  });\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_EMAIL_IN_EDIT\",\n    payload: profile.email,\n  });\n\n  getImageOnIpfs(profile.icon).then(imageUrl => {\n    profile.imageUrl = imageUrl;\n    dispatch({\n      type: \"FETCHED_PROFILE_IN_EDIT\",\n      payload: profile,\n    });\n  }).catch(err => {\n    console.error(err);\n  });\n  \n}\nconst fetchCertificatesInIssuer = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const address = gxCert.address;\n  let certificates = [];\n  const group = state.groupInSidebar;\n  const groupId = group.groupId;\n  try {\n    certificates = await gxCert.getGroupCerts(groupId);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to fetch certificates.\");\n    return;\n  }\n  for (let i = 0; i < certificates.length; i++) {\n    certificates[i].userCerts = [];\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n    payload: certificates,\n  });\n  for (let i = 0; i < certificates.length; i++) {\n    const userCerts = await gxCert.getIssuedUserCerts(certificates[i].id);\n    certificates[i].userCerts = userCerts;\n    dispatch({\n      type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n      payload: certificates,\n    });\n    for (let j = 0; j < userCerts.length; j++) {\n      const profile = await gxCert.getProfile(userCerts[j].to);\n      certificates[i].userCerts[j].profile = profile;\n      getImageOnIpfs(profile.icon).then(imageUrl => {\n        profile.imageUrl = imageUrl;\n        certificates[i].userCerts[j].profile = profile;\n        dispatch({\n          type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n\n    }\n    getImageOnIpfs(certificates[i].image).then(imageUrl => {\n      certificates[i].imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n}\n\nconst sign = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"LOADING\",\n    payload: true,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  if (!window.confirm(\"この操作には0.01MATICが必要です。続けますか？\")) {\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  const state = getState().state;\n  if (state.groupInSidebar === null) {\n    alert(\"Please set group on sidebar.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  const image = state.image;\n  if (!image) {\n    alert(\"Image not set.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  let imageCid;\n  try {\n    imageCid = await gxCert.uploadImageToIpfs(image);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to post the image to IPFS.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  const certificate = {\n    context: {},\n    title: state.title,\n    description: state.description,\n    image: imageCid,\n    groupId: state.groupInSidebar.groupId,\n  }\n  if (!gxCert.isCertificate(certificate)) {\n    alert(\"Invalid Certificate.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  let signed = null;\n  try {\n    signed = await gxCert.signCertificate(certificate, { address: gxCert.address });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign the certificate.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  try {\n    await gxCert.createCert(signed);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to post the signed certificate.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  await wait();\n  dispatch({\n    type: \"LOADING\",\n    payload: false,\n  });\n  history.push(\"/issue\");\n}\n\nconst registerProfile = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"LOADING\",\n    payload: true,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  const state = getState().state;\n  const name = state.profileName;\n  const email = state.profileEmail;\n  const iconImage = state.profileImage;\n  const address = state.from;\n\n  let icon;\n  try {\n    icon = await gxCert.uploadImageToIpfs(iconImage);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to upload image to IPFS.\"); \n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  let signedProfile;\n  try {\n    signedProfile = await gxCert.signProfile({\n      name,\n      email,\n      icon,\n    }, { \n      address,\n    });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign profile.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  try {\n    await gxCert.createProfile(address, signedProfile);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to register profile.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  dispatch({\n    type: \"LOADING\",\n    payload: false,\n  });\n  history.push(\"/\");\n\n}\nconst registerGroup = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"LOADING\",\n    payload: true,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  if (!window.confirm(\"この操作には0.01MATICが必要です。続けますか？\")) {\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  const state = getState().state;\n  const from = state.from;\n  const groupName = state.groupName;\n  const groupAddress = state.groupAddress;\n  const groupPhone = state.groupPhone;\n  try {\n    await gxCert.createGroup(groupName, groupAddress, groupPhone, from);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to create group.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  await wait();\n  dispatch({\n    type: \"LOADING\",\n    payload: false,\n  });\n  history.push(\"/new\");\n}\nconst updateProfile = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"LOADING\",\n    payload: true,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  const state = getState().state;\n  const name = state.profileNameInEdit;\n  const email = state.profileEmailInEdit;\n  const image = state.profileImageInEdit;\n  let icon;\n  if (image === \"\") {\n    if (state.profileInEdit !== null) {\n      icon = state.profileInEdit.icon;\n    } else {\n      icon = \"\";\n    }\n  } else {\n    icon = await gxCert.uploadImageToIpfs(image);\n  }\n\n  const address = gxCert.address;\n\n  const newProfile = {\n    name,\n    email,\n    icon,\n  }\n  console.log(newProfile);\n\n  const signedProfile = await gxCert.signProfileForUpdating(newProfile, { address });\n  try {\n    await gxCert.updateProfile(signedProfile);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to update your profile.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  dispatch({\n    type: \"LOADING\",\n    payload: false,\n  });\n  history.push(\"/\");\n}\nconst updateGroup = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"LOADING\",\n    payload: true,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  const state = getState().state;\n  if (state.groupInSidebar === null) {\n    alert(\"Please choose group on sidebar.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  const groupId = state.groupInSidebar.groupId;\n  const name = state.groupNameInEdit;\n  const residence = state.groupAddressInEdit;\n  const phone = state.groupPhoneInEdit;\n  const group = {\n    groupId,\n    name,\n    residence,\n    phone,\n  }\n\n  const signedGroup = await gxCert.signGroup(group, { address: gxCert.address });\n  try {\n    await gxCert.updateGroup(signedGroup);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to update group.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  dispatch({\n    type: \"LOADING\",\n    payload: false,\n  });\n  history.push(\"/\");\n}\nconst issue = (certId) => async (dispatch, getState) => {\n  dispatch({\n    type: \"LOADING\",\n    payload: true,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  if (!window.confirm(\"この操作には0.01MATICが必要です。続けますか？\")) {\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  const state = getState().state;\n  const from = state.from;\n  const signerAddress = state.from;\n  const toEmail = state.toInIssue;\n  let to;\n  try {\n    to = await torusClient.getPublicAddressByGoogle(toEmail);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to get public address of the Google account.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  const userCert = {\n    certId,\n    from,\n    to,\n  }\n  let signed;\n  try {\n    signed = await gxCert.signUserCertificate(userCert, { address: from });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign the certificate.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  try {\n    await gxCert.createUserCert(signed);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to issue the certificate.\");\n    dispatch({\n      type: \"LOADING\",\n      payload: false,\n    });\n    return;\n  }\n  await wait();\n  dispatch({\n    type: \"LOADING\",\n    payload: false,\n  });\n  history.push(\"/\");\n}\nconst inviteMember = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const signerAddress = state.from;\n  const groupId = state.group.groupId;\n  const email = state.groupMemberToInvite;\n  let address;\n  try {\n    address = await torusClient.getPublicAddressByGoogle(email);\n  } catch(err) {\n    console.error(err);\n    alert(\"Email is not registered.\");\n    return;\n  }\n  let signedMember;\n  try {\n    signedMember = await gxCert.signMemberAddressForInviting(address, { address: signerAddress });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign for invitation.\");\n    return;\n  }\n  try {\n    await gxCert.inviteMemberToGroup(groupId, signedMember);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to send invitation.\");\n    return;\n  }\n  let group;\n  try {\n    group = await gxCert.getGroup(groupId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUP\",\n    payload: group,\n  });\n}\n\nconst disableGroupMember = (groupId, address) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const signedAddress = await gxCert.signMemberAddressForDisabling(address, { address: gxCert.address });\n  try {\n    await gxCert.disableGroupMember(groupId, signedAddress);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\n\nconst invalidateUserCert = (userCertId) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const signedUserCert = await gxCert.signUserCertForInvalidation(userCertId, { address: gxCert.address });\n  console.log(signedUserCert);\n  try {\n    await gxCert.invalidateUserCert(signedUserCert);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  await wait();\n\n  const state = getState().state;\n  const address = gxCert.address;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to fetch your groups\");\n    return;\n  }\n  let certificates = [];\n  for (const group of groups) {\n    const groupId = group.groupId;\n    try {\n      certificates = certificates.concat(await gxCert.getGroupCerts(groupId));\n    } catch(err) {\n      console.error(err);\n      continue;\n    }\n  }\n  for (let i = 0; i < certificates.length; i++) {\n    certificates[i].userCerts = [];\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n    payload: certificates,\n  });\n  for (let i = 0; i < certificates.length; i++) {\n    const userCerts = await gxCert.getIssuedUserCerts(certificates[i].id);\n    certificates[i].userCerts = userCerts;\n    dispatch({\n      type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n      payload: certificates,\n    });\n    for (let j = 0; j < userCerts.length; j++) {\n      const profile = await gxCert.getProfile(userCerts[j].to);\n      certificates[i].userCerts[j].profile = profile;\n    }\n    getImageOnIpfs(certificates[i].image).then(imageUrl => {\n      certificates[i].imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n}\n\nconst signOut = () => async (dispatch) => {\n  dispatch({\n    type: \"SIGN_OUT\",\n    payload: null,\n  });\n  history.push(\"/top\");\n}\nexport {\n  onChangeTitle,\n  onChangeDescription,\n  onChangeImage,\n  onChangeGroup,\n  onChangeGroupName,\n  onChangeGroupAddress,\n  onChangeGroupPhone,\n  onChangeGroupNameInEdit,\n  onChangeGroupAddressInEdit,\n  onChangeGroupPhoneInEdit,\n  onChangeProfileName,\n  onChangeProfileEmail,\n  onChangeProfileImage,\n  onChangeProfileNameInEdit,\n  onChangeProfileEmailInEdit,\n  onChangeProfileImageInEdit,\n  onChangeToInIssue,\n  onChangeGroupMemberToInvite,\n  onChangeGroupInSidebar,\n  sign,\n  signIn,\n  fetchProfileInEdit,\n  fetchProfileInShow,\n  fetchCertificate,\n  fetchCertificateInIssue,\n  fetchCertificates,\n  fetchGroups,\n  fetchGroupsInSidebar,\n  fetchGroup,\n  fetchGroupInShow,\n  fetchGroupInEdit,\n  fetchCertificatesInIssuer,\n  registerGroup,\n  registerProfile,\n  inviteMember,\n  issue,\n  updateGroup,\n  updateProfile,\n  disableGroupMember,\n  invalidateUserCert,\n  signOut,\n\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { connect, Provider } from \"react-redux\";\nimport { withRouter, HashRouter as Router } from \"react-router-dom\";\nimport store from \"./store\";\nimport history from \"./history\";\nimport {\n  onChangeTitle,\n  onChangeDescription,\n  onChangeImage,\n  onChangeToInIssue,\n  onChangeGroup,\n  onChangeGroupName,\n  onChangeGroupAddress,\n  onChangeGroupPhone,\n  onChangeProfileName,\n  onChangeProfileEmail,\n  onChangeProfileImage,\n  onChangeGroupNameInEdit,\n  onChangeGroupIdInEdit,\n  onChangeGroupAddressInEdit,\n  onChangeGroupPhoneInEdit,\n  onChangeProfileNameInEdit,\n  onChangeProfileEmailInEdit,\n  onChangeProfileImageInEdit,\n  onChangeGroupMemberToInvite,\n  onChangeGroupInSidebar,\n  sign,\n  signIn,\n  signOut,\n  fetchCertificate,\n  fetchCertificates,\n  fetchCertificatesInIssuer,\n  fetchGroups,\n  fetchGroup,\n  fetchGroupInEdit,\n  fetchGroupInShow,\n  fetchGroupsInIssuer,\n  fetchCertificateInIssue,\n  fetchProfileInEdit,\n  fetchProfileInShow,\n  fetchGroupsInSidebar,\n  invalidateUserCert,\n  updateProfile,\n  updateGroup,\n  issue,\n  registerGroup,\n  registerProfile,\n  inviteMember,\n  disableGroupMember,\n} from \"./actions\";\n//import CertClient from \"./client\"\n\nfunction mapStateToProps(state, props) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    onChangeTitle: (evt) => {\n      dispatch(onChangeTitle(evt));\n    },\n    onChangeDescription: (evt) => {\n      dispatch(onChangeDescription(evt));\n    },\n    onChangeImage: (evt) => {\n      dispatch(onChangeImage(evt));\n    },\n    onChangeGroupName: (evt) => {\n      dispatch(onChangeGroupName(evt));\n    },\n    onChangeGroupAddress: (evt) => {\n      dispatch(onChangeGroupAddress(evt));\n    },\n    onChangeGroupPhone: (evt) => {\n      dispatch(onChangeGroupPhone(evt));\n    },\n    onChangeGroupNameInEdit: (evt) => {\n      dispatch(onChangeGroupNameInEdit(evt));\n    },\n    onChangeGroupAddressInEdit: (evt) => {\n      dispatch(onChangeGroupAddressInEdit(evt));\n    },\n    onChangeGroupPhoneInEdit: (evt) => {\n      dispatch(onChangeGroupPhoneInEdit(evt));\n    },\n    onChangeProfileName: (evt) => {\n      dispatch(onChangeProfileName(evt));\n    },\n    onChangeProfileEmail: (evt) => {\n      dispatch(onChangeProfileEmail(evt));\n    },\n    onChangeProfileImage: (evt) => {\n      dispatch(onChangeProfileImage(evt));\n    },\n    onChangeProfileNameInEdit: (evt) => {\n      dispatch(onChangeProfileNameInEdit(evt));\n    },\n    onChangeProfileEmailInEdit: (evt) => {\n      dispatch(onChangeProfileEmailInEdit(evt));\n    },\n    onChangeProfileImageInEdit: (evt) => {\n      dispatch(onChangeProfileImageInEdit(evt));\n    },\n    onChangeGroup: (evt) => {\n      dispatch(onChangeGroup(evt));\n    },\n    onChangeToInIssue: (evt) => {\n      dispatch(onChangeToInIssue(evt));\n    },\n    onChangeGroupMemberToInvite: (evt) => {\n      dispatch(onChangeGroupMemberToInvite(evt));\n    },\n    onChangeGroupInSidebar: (evt) => {\n      dispatch(onChangeGroupInSidebar(evt));\n    },\n    sign: () => {\n      dispatch(sign());\n    },\n    fetchCertificate: (cid) => {\n      dispatch(fetchCertificate(cid));\n    },\n    fetchCertificates: () => {\n      dispatch(fetchCertificates());\n    },\n    fetchGroups: () => {\n      dispatch(fetchGroups());\n    },\n    fetchGroup: (groupId) => {\n      dispatch(fetchGroup(groupId));\n    },\n    fetchGroupInShow: (groupId) => {\n      dispatch(fetchGroupInShow(groupId));\n    },\n    fetchGroupInEdit: (groupId) => {\n      dispatch(fetchGroupInEdit(groupId));\n    },\n    fetchCertificatesInIssuer: () => {\n      dispatch(fetchCertificatesInIssuer());\n    },\n    fetchCertificateInIssue: (certId) => {\n      dispatch(fetchCertificateInIssue(certId));\n    },\n    fetchGroupsInSidebar: () => {\n      dispatch(fetchGroupsInSidebar());\n    },\n    fetchProfileInEdit: () => {\n      dispatch(fetchProfileInEdit());\n    },\n    fetchProfileInShow: (address) => {\n      dispatch(fetchProfileInShow(address));\n    },\n    signIn: () => {\n      dispatch(signIn());\n    },\n    registerGroup: () => {\n      dispatch(registerGroup());\n    },\n    updateGroup: () => {\n      dispatch(updateGroup());\n    },\n    updateProfile: () => {\n      dispatch(updateProfile());\n    },\n    registerProfile: () => {\n      dispatch(registerProfile());\n    },\n    inviteMember: () => {\n      dispatch(inviteMember());\n    },\n    issue: (certId) => {\n      dispatch(issue(certId));\n    },\n    disableGroupMember: (groupId, address) => {\n      dispatch(disableGroupMember(groupId, address));\n    },\n    invalidateUserCert: (userCertId) => {\n      dispatch(invalidateUserCert(userCertId));\n    },\n    signOut: () => {\n      dispatch(signOut());\n    }\n  }\n}\n\nconst RxApp = connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <RxApp />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}