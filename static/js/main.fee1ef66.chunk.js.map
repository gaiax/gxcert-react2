{"version":3,"sources":["logo.svg","history.js","Header.js","Footer.js","views/Top.js","views/SignIn.js","views/Registration.js","views/Certificates.js","util/ipfs.js","views/Certificate.js","views/NewCert.js","views/NewProfile.js","views/EditProfile.js","views/NewGroup.js","views/EditGroup.js","views/GroupMembers.js","views/Issuer.js","views/Issue.js","App.js","reportWebVitals.js","initialState.js","gxcert-client.js","store.js","reducer.js","torus.js","config.js","actions.js","index.js"],"names":["history","Header","props","className","to","isLoggedIn","onClick","signOut","push","Footer","React","Component","Top","SignIn","src","signIn","Registration","Certificates","this","fetchCertificates","userCerts","map","userCert","index","userCertId","certificate","imageUrl","title","groupName","Date","parseInt","timestamp","toISOString","type","color","height","width","ipfs","IpfsHttpClient","host","port","protocol","createImageUrlFromUint8Array","arr","blob","Blob","window","URL","webkitURL","createObjectURL","concatBuffer","buffer1","buffer2","tmp","Uint8Array","byteLength","set","buffer","getImageOnIpfs","ipfsHash","a","async","get","response","data","console","log","content","ArrayBuffer","url","Certificate","match","params","id","fetchCertificate","certificateImage","group","name","description","NewCert","fetchGroupsInSidebar","image","err","error","onChange","onChangeGroupInSidebar","defaultValue","groupInSidebar","groupId","toString","hidden","groupsInSidebar","value","onChangeTitle","onChangeDescription","onChangeImage","sign","NewProfile","for","onChangeProfileImage","onChangeProfileName","onChangeProfileEmail","registerProfile","EditProfile","fetchProfile","initialImageUrl","profile","email","updateProfile","NewGroup","onChangeGroupName","onChangeGroupAddress","onChangeGroupPhone","registerGroup","EditGroup","residence","phone","updateGroup","GroupMembers","that","onChangeGroupMemberToInvite","inviteMember","members","member","address","disableGroupMember","Issuer","certificates","invalidateUserCert","Issue","certId","onChangeToInIssue","issue","App","state","from","exact","path","render","routeProps","fetchGroups","onChangeGroup","groups","groupsInIssuer","certificatesInIssuer","fetchCertificatesInIssuer","certificateInIssue","fetchCertificateInIssue","groupInEdit","fetchGroup","fetchGroupInEdit","onChangeGroupId","onChangeGroupIdInEdit","onChangeGroupNameInEdit","onChangeGroupAddressInEdit","onChangeGroupPhoneInEdit","profileImage","profileImageInEdit","profileInEdit","profileName","profileNameInEdit","profileEmail","profileEmailInEdit","fetchProfileInEdit","onChangeProfileNameInEdit","onChangeProfileEmailInEdit","onChangeProfileImageInEdit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","toInIssue","groupMemberToInvite","groupAddress","groupPhone","groupIdInEdit","groupNameInEdit","groupAddressInEdit","groupPhoneInEdit","groupInIssuer","gxCert","persistConfig","key","storage","sessionStorage","persistedReducer","persistReducer","action","Object","assign","payload","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","persistStore","torusClient","torus","Torus","init","buildEnv","enableLogging","network","chainId","networkName","showTorusButton","enabledVerifiers","google","facebook","reddit","twitch","discord","login","web3","Web3","provider","gmail","getPublicAddress","verifier","verifierId","config","web3Host","contractAddress","gxApi","gxCertWithoutLogin","GxCertClient","getGxCertWithoutLogin","isInitialized","getGxCert","Error","getMyAddress","wait","Promise","resolve","reject","setTimeout","dispatch","getState","getGroupCerts","alert","i","length","getIssuedUserCerts","j","getProfile","icon","catch","RxApp","connect","evt","target","file","files","reader","FileReader","onload","result","readAsArrayBuffer","groupIdStr","uploadImageToIpfs","imageCid","context","isCertificate","signed","signCertificate","createCert","cid","getUserCert","getGroup","getReceivedUserCerts","getGroups","getCert","createGroup","signGroup","signedGroup","newProfile","signProfileForUpdating","signedProfile","iconImage","signProfile","createProfile","signerAddress","getPublicAddressByGoogle","signMemberAddressForInviting","signedMember","inviteMemberToGroup","toEmail","signUserCertificate","createUserCert","signMemberAddressForDisabling","signedAddress","signUserCertForInvalidation","signedUserCert","concat","withRouter","ReactDOM","document","getElementById"],"mappings":"iUAAe,I,QCEAA,E,MAAAA,K,eC2BAC,MA1Bf,SAAgBC,GACd,OACE,yBAAQC,UAAU,aAAlB,UACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,IAAD,CAAMC,GAAG,OAAOD,UAAU,OAA1B,oBACED,EAAMG,WACJ,cAAC,IAAD,CAAMD,GAAG,IAAID,UAAU,mBAAvB,sBACE,GAEJD,EAAMG,WACN,cAAC,IAAD,CAAMD,GAAG,SAASD,UAAU,mBAA5B,mBACI,MAGLD,EAAMG,WAEL,sBAAKF,UAAU,qBAAf,UACE,cAAC,IAAD,CAAMC,GAAG,gBAAgBD,UAAU,sBAAnC,qBACA,qBAAKA,UAAU,kBAAkBG,QAASJ,EAAMK,QAAhD,yBAHF,qBAAKJ,UAAU,iBAAiBG,QAAS,kBAAMN,EAAQQ,KAAK,YAA5D,yBCEKC,E,kDAjBb,aAAe,wC,0CAGf,WACE,OACE,mCACE,qBAAKN,UAAU,iBAAf,uPAGA,qBAAKA,UAAU,aAAf,yC,GAVaO,IAAMC,WCoBZC,MAnBf,WACE,OACE,sBAAKT,UAAU,MAAf,UACE,qBAAKA,UAAU,aAGf,sBAAKA,UAAU,YAAf,UACE,mBAAGA,UAAU,UAAb,kGACA,mBAAGA,UAAU,gBAAb,8SACA,cAAC,IAAD,CAAMC,GAAG,UAAT,SACE,qBAAKD,UAAU,UAAf,8BCDKU,MAXf,SAAgBX,GACd,OACE,qBAAKC,UAAU,UAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,kBAAb,4UACA,qBAAKW,IAAI,cAAcR,QAASJ,EAAMa,eCe/BC,I,iBCyBAC,E,kDAzCb,aAAe,wC,qDAGf,WACEC,KAAKhB,MAAMiB,sB,oBAEb,WACE,OACE,qBAAKhB,UAAU,eAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,mBAAGA,UAAU,qBAAb,gCAGA,qBAAKA,UAAU,oBAAf,SAC6B,OAAzBe,KAAKhB,MAAMkB,UAAqBF,KAAKhB,MAAMkB,UAAUC,KAAI,SAACC,EAAUC,GACpE,OACE,cAAC,IAAD,CAAMnB,GAAI,UAAYkB,EAASE,WAA/B,SACE,sBAAKrB,UAAU,yBAAf,UACE,qBAAKW,IAAKQ,EAASG,YAAYC,SAAUvB,UAAU,gCACnD,sBAAKA,UAAU,gCAAf,UACE,mBAAGA,UAAU,+BAAb,SACGmB,EAASG,YAAYE,QAExB,mBAAGxB,UAAU,4BAAb,SACGmB,EAASG,YAAYG,YAExB,mBAAGzB,UAAU,8BAAb,SACK,IAAI0B,KAAoC,IAA/BC,SAASR,EAASS,YAAoBC,2BAMzD,cAAC,IAAD,CAAQC,KAAK,OAAOC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,iB,GAlC9C1B,IAAMC,W,iCCH3B0B,E,MAAOC,CAAe,CAC1BC,KAAM,iBACNC,KAAM,KACNC,SAAU,UAiBZ,SAASC,EAA6BC,GACpC,IAAMC,EAAO,IAAIC,KAAK,CAACF,IAGvB,OAFmBG,OAAOC,KAAOD,OAAOE,WACZC,gBAAgBL,GAG9C,IAAIM,EAAe,SAAUC,EAASC,GACpC,IAAIC,EAAM,IAAIC,WAAWH,EAAQI,WAAaH,EAAQG,YAGtD,OAFAF,EAAIG,IAAI,IAAIF,WAAWH,GAAU,GACjCE,EAAIG,IAAI,IAAIF,WAAWF,GAAUD,EAAQI,YAClCF,EAAII,QAGb,SAAeC,EAAeC,GAA9B,6CAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACyBvB,EAAKyB,IAAIH,IADlC,OACQI,EADR,wCAE2BA,GAF3B,yBAAAH,EAAA,4DAAAA,EAAA,sDAEmBI,EAFnB,EAGIC,QAAQC,IAAIF,GACRG,EAAU,IAAIC,YAAY,GAJlC,kCAK8BJ,EAAKG,SALnC,2BAAAP,EAAA,6DAAAA,EAAA,sDAMMO,EAAUjB,EAAaiB,EAN7B,4LAAAP,EAAA,0IAQUS,EAAM3B,EAA6ByB,GAR7C,kBASWE,GATX,uLAAAT,EAAA,4JAWS,MAXT,6G,ICoCeU,E,kDA9Db,aAAe,wC,qDAGf,WACE,IAAM9C,EAAaM,SAASZ,KAAKhB,MAAMqE,MAAMC,OAAOC,IACpDvD,KAAKhB,MAAMwE,iBAAiBlD,K,oBAE9B,WAEE,OADAyC,QAAQC,IAAIhD,KAAKhB,MAAMoB,UAErB,qBAAKnB,UAAU,cAAf,SACMe,KAAKhB,MAAMoB,UAAaJ,KAAKhB,MAAMoB,SAASG,YAG5C,sBAAKtB,UAAU,sBAAf,UACE,mBAAGA,UAAU,oBAAb,SACGe,KAAKhB,MAAMoB,SAASG,YAAYE,QAEnC,qBAAKb,IAAKI,KAAKhB,MAAMyE,iBAAkBxE,UAAU,qBACjD,wBAAOA,UAAU,qBAAjB,UACE,+BACE,8CACA,6BAAM,IAAI0B,KAAKC,SAAyC,IAAhCZ,KAAKhB,MAAMoB,SAASS,YAAoBC,mBAElE,+BACE,0CACA,6BACId,KAAKhB,MAAMoB,SAASG,YAAYmD,MAAa1D,KAAKhB,MAAMoB,SAASG,YAAYmD,MAAMC,KAA3C,QAG9C,+BACE,sCACA,6BACI3D,KAAKhB,MAAMoB,SAASlB,QAG1B,+BACE,yCACA,6BACGc,KAAKhB,MAAMoB,SAASG,YAAYE,WAGrC,+BACE,+CACA,6BAAKT,KAAKhB,MAAMoB,SAASG,YAAYqD,oBAGzC,sBAAK3E,UAAU,sBAAf,UACE,qBAAKA,UAAU,qBAAf,+CAGA,qBAAKA,UAAU,qBAAf,iEAvCJ,cAAC,IAAD,CAAQ8B,KAAK,OAAOC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,Y,GAb1C1B,IAAMC,WCkEjBoE,E,kDApEb,aAAe,wC,qDAGf,WACE7D,KAAKhB,MAAM8E,yB,oBAEb,WAAU,IAAD,OACHtD,EAAW,GACf,IACEA,EAAWgB,EAA6BxB,KAAKhB,MAAM+E,OACnD,MAAMC,GACNjB,QAAQkB,MAAMD,GAEhB,OACE,sBAAK/E,UAAU,WAAf,UACE,sBAAKA,UAAU,UAAf,UACI,mBAAGA,UAAU,gBAAb,mBACA,yBAAQA,UAAU,gBAAgBiF,SAAUlE,KAAKhB,MAAMmF,uBAAwBC,aAA6C,OAA9BpE,KAAKhB,MAAMqF,eAA0BrE,KAAKhB,MAAMqF,eAAeC,QAAQC,WAAa,GAAlL,UACE,wBAAQC,QAAM,EAAd,0BACiC,OAA/BxE,KAAKhB,MAAMyF,gBAA2BzE,KAAKhB,MAAMyF,gBAAgBtE,KAAI,SAAAuD,GACrE,OACE,wBAAQgB,MAAOhB,EAAMY,QAAQC,WAA7B,SAA0Cb,EAAMC,UAE/C,GACL,wBAAQe,MAAM,MAAd,iCAEJ,+BACE,6BAAI,cAAC,IAAD,CAAMxF,GAAG,SAAT,2BACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,SAAT,uBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,eAAT,4BAGR,sBAAKD,UAAU,mBAAf,UACE,oBAAGA,UAAU,iBAAb,UAC4B,OAA9Be,KAAKhB,MAAMqF,eAA0BrE,KAAKhB,MAAMqF,eAAeV,KAAO,SAAM,GAD1E,0CAGA,mBAAG1E,UAAU,uBAAb,oWAGA,sBAAKA,UAAU,gBAAf,UACE,mBAAGA,UAAU,sBAAb,kCAGA,uBAAO8B,KAAK,OAAO9B,UAAU,qBAAqBiF,SAAUlE,KAAKhB,MAAM2F,gBACvE,mBAAG1F,UAAU,sBAAb,wCAGA,0BAAUA,UAAU,4BAA4BiF,SAAUlE,KAAKhB,MAAM4F,sBACrE,mBAAG3F,UAAU,sBAAb,+BAGA,qBAAKW,IAAKY,EAAUvB,UAAU,wBAC9B,qBAAKA,UAAU,+BAAf,SACE,wBAAOA,UAAU,iCAAjB,UACE,uBAAO8B,KAAK,OAAO9B,UAAU,2BAA2BiF,SAAUlE,KAAKhB,MAAM6F,gBAD/E,gCAKF,qBAAK5F,UAAU,kBAAkBG,QAAS,kBAAM,EAAKJ,MAAM8F,QAA3D,uC,GA3DUtF,IAAMC,WCqCbsF,E,kDArCb,aAAe,wC,0CAGf,WACE,IAAIvE,EAAW,GACf,IACEA,EAAWgB,EAA6BxB,KAAKhB,MAAM+E,OACnD,MAAMC,GACNjB,QAAQkB,MAAMD,GAEhB,OACE,qBAAK/E,UAAU,cAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,mBAAGA,UAAU,oBAAb,kDAGA,sBAAKA,UAAU,mBAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,uBAAO+F,IAAI,8BAAX,SACE,qBAAKpF,IAAKY,EAAUvB,UAAU,6BAEhC,uBAAOsE,GAAG,8BAA8BxC,KAAK,OAAOmD,SAAUlE,KAAKhB,MAAMiG,0BAE3E,mBAAGhG,UAAU,yBAAb,kBACA,uBAAO8B,KAAK,OAAO9B,UAAU,wBAAwBiF,SAAUlE,KAAKhB,MAAMkG,sBAC1E,mBAAGjG,UAAU,yBAAb,oBACA,uBAAO8B,KAAK,OAAO9B,UAAU,yBAAyBiF,SAAUlE,KAAKhB,MAAMmG,uBAC3E,qBAAKlG,UAAU,kBAAkBG,QAASY,KAAKhB,MAAMoG,gBAArD,sC,GA5Ba5F,IAAMC,WCiDhB4F,E,kDA/Cb,aAAe,wC,qDAGf,WACErF,KAAKhB,MAAMsG,iB,oBAEb,WACE,IAAI9E,EAAW,KACX+E,EAAkB,KAItB,GAH2B,OAAvBvF,KAAKhB,MAAMwG,UACbD,EAAkBvF,KAAKhB,MAAMwG,QAAQhF,UAEnCR,KAAKhB,MAAM+E,MACb,IACEvD,EAAWgB,EAA6BxB,KAAKhB,MAAM+E,OACnD,MAAMC,GACNjB,QAAQkB,MAAMD,GAIlB,OADAjB,QAAQC,IAAIxC,GAEV,qBAAKvB,UAAU,eAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,mBAAGA,UAAU,qBAAb,8DAGA,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,0BAAf,UACE,uBAAO+F,IAAI,+BAAX,SACE,qBAAKpF,IAAkB,OAAbY,EAAoB+E,EAAkB/E,EAAUvB,UAAU,8BAEtE,uBAAOsE,GAAG,+BAA+BxC,KAAK,OAAOmD,SAAUlE,KAAKhB,MAAMiG,0BAE5E,mBAAGhG,UAAU,0BAAb,kBACA,uBAAO8B,KAAK,OAAO9B,UAAU,yBAAyBiF,SAAUlE,KAAKhB,MAAMkG,oBAAqBd,aAAqC,OAAvBpE,KAAKhB,MAAMwG,QAAmBxF,KAAKhB,MAAMwG,QAAQ7B,KAAO,KACtK,mBAAG1E,UAAU,0BAAb,oBACA,uBAAO8B,KAAK,OAAO9B,UAAU,0BAA0BiF,SAAUlE,KAAKhB,MAAMmG,qBAAsBf,aAAqC,OAAvBpE,KAAKhB,MAAMwG,QAAmBxF,KAAKhB,MAAMwG,QAAQC,MAAQ,KACzK,qBAAKxG,UAAU,kBAAkBG,QAASY,KAAKhB,MAAM0G,cAArD,sC,GAtCclG,IAAMC,WC2BjBkG,E,kDA5Bb,aAAe,wC,0CAIf,WACE,OACE,qBAAK1G,UAAU,YAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,mBAAGA,UAAU,kBAAb,kDACA,mBAAGA,UAAU,wBAAb,2PACA,sBAAKA,UAAU,iBAAf,UACE,mBAAGA,UAAU,uBAAb,kBACA,uBAAO8B,KAAK,OAAO9B,UAAU,sBAAsBiF,SAAUlE,KAAKhB,MAAM4G,oBACxE,mBAAG3G,UAAU,uBAAb,qBACA,uBAAO8B,KAAK,OAAO9B,UAAU,yBAAyBiF,SAAUlE,KAAKhB,MAAM6G,uBAC3E,mBAAG5G,UAAU,uBAAb,mBACA,uBAAO8B,KAAK,OAAO9B,UAAU,uBAAuBiF,SAAUlE,KAAKhB,MAAM8G,qBAEzE,qBAAK7G,UAAU,kBAAkBG,QAASY,KAAKhB,MAAM+G,cAArD,sC,GAnBWvG,IAAMC,WCsDduG,E,kDAnDb,aAAe,wC,qDAIf,c,oBAEA,WAEE,OADAjD,QAAQC,IAAIhD,KAAKhB,MAAMqF,gBAErB,sBAAKpF,UAAU,aAAf,UACE,sBAAKA,UAAU,UAAf,UACI,mBAAGA,UAAU,gBAAb,mBACA,yBAAQA,UAAU,gBAAgBiF,SAAUlE,KAAKhB,MAAMmF,uBAAwBC,aAA6C,OAA9BpE,KAAKhB,MAAMqF,eAA0BrE,KAAKhB,MAAMqF,eAAeC,QAAQC,WAAa,GAAlL,UACE,wBAAQC,QAAM,EAAd,0BACiC,OAA/BxE,KAAKhB,MAAMyF,gBAA2BzE,KAAKhB,MAAMyF,gBAAgBtE,KAAI,SAAAuD,GACrE,OACE,wBAAQgB,MAAOhB,EAAMY,QAAQC,WAA7B,SAA0Cb,EAAMC,UAE/C,GACL,wBAAQe,MAAM,MAAd,iCAEJ,+BACE,6BAAI,cAAC,IAAD,CAAMxF,GAAG,SAAT,2BACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,SAAT,uBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,eAAT,4BAGwB,OAA9Bc,KAAKhB,MAAMqF,eACb,sBAAKpF,UAAU,qBAAf,UACE,oBAAGA,UAAU,mBAAb,gCAAqCe,KAAKhB,MAAMqF,eAAeV,KAA/D,wBACA,mBAAG1E,UAAU,yBAAb,2PACA,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,wBAAb,kBACA,uBAAO8B,KAAK,OAAO9B,UAAU,uBAAuBiF,SAAUlE,KAAKhB,MAAM4G,kBAAmBxB,aAAcpE,KAAKhB,MAAMqF,eAAeV,OACpI,mBAAG1E,UAAU,wBAAb,qBACA,uBAAO8B,KAAK,OAAO9B,UAAU,0BAA0BiF,SAAUlE,KAAKhB,MAAM6G,qBAAsBzB,aAAcpE,KAAKhB,MAAMqF,eAAe4B,YAC1I,mBAAGhH,UAAU,wBAAb,mBACA,uBAAO8B,KAAK,OAAO9B,UAAU,wBAAwBiF,SAAUlE,KAAKhB,MAAM8G,mBAAoB1B,aAAcpE,KAAKhB,MAAMqF,eAAe6B,QAEtI,qBAAKjH,UAAU,kBAAkBG,QAASY,KAAKhB,MAAMmH,YAArD,gCAIQ,qBAAKlH,UAAU,qBAAf,SACV,cAAC,IAAD,CAAQ8B,KAAK,OAAOC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,e,GA7C1C1B,IAAMC,WCqEf2G,E,kDAnEb,aAAe,wC,qDAGf,c,oBAIA,WAAU,IAAD,OACP,OACE,sBAAKnH,UAAU,gBAAf,UACE,sBAAKA,UAAU,UAAf,UACI,mBAAGA,UAAU,gBAAb,mBACA,yBAAQA,UAAU,gBAAgBiF,SAAUlE,KAAKhB,MAAMmF,uBAAwBC,aAA6C,OAA9BpE,KAAKhB,MAAMqF,eAA0BrE,KAAKhB,MAAMqF,eAAeC,QAAQC,WAAa,GAAlL,UACE,wBAAQC,QAAM,EAAd,0BACiC,OAA/BxE,KAAKhB,MAAMyF,gBAA2BzE,KAAKhB,MAAMyF,gBAAgBtE,KAAI,SAAAuD,GACrE,OACE,wBAAQgB,MAAOhB,EAAMY,QAAQC,WAA7B,SAA0Cb,EAAMC,UAE/C,GACL,wBAAQe,MAAM,MAAd,iCAEJ,+BACE,6BAAI,cAAC,IAAD,CAAMxF,GAAG,SAAT,2BACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,SAAT,uBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,eAAT,4BAGR,qBAAKD,UAAU,wBAAf,SACK,WACD,IAAMoH,EAAO,EACb,OAAK,EAAKrH,MAAMqF,eAMd,gCACE,oBAAGpF,UAAU,sBAAb,UAAqC,EAAKD,MAAMqF,eAAeV,KAA/D,oCACA,uBAAO5C,KAAK,OAAO9B,UAAU,uBAAuBiF,SAAU,EAAKlF,MAAMsH,8BACzE,wBAAQrH,UAAU,8BAA8BG,QAAS,EAAKJ,MAAMuH,aAApE,oBACA,qBAAKtH,UAAU,qBAAf,SACI,EAAKD,MAAMqF,eAAemC,QAAQrG,KAAI,SAAAsG,GACtC,OACE,sBAAKxH,UAAU,0BAAf,UACE,qBAAKW,IAAK6G,EAAOjG,SAAUvB,UAAU,iCACrC,sBAAKA,UAAU,iCAAf,UACE,mBAAGA,UAAU,+BAAb,SACGwH,EAAO9C,OAEV,mBAAG1E,UAAU,kCAAb,SACGwH,EAAOC,aAGZ,qBAAKzH,UAAU,kCAAkCG,QAAS,kBAAMiH,EAAKrH,MAAM2H,mBAAmBN,EAAKrH,MAAMqF,eAAeC,QAASmC,EAAOC,UAAxI,2CArBR,cAAC,IAAD,CAAQ3F,KAAK,OAAOC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,MAJ3D,Y,GA9Bc1B,IAAMC,WC2FlBmH,E,kDA1Fb,aAAe,wC,qDAGf,WACE5G,KAAKhB,MAAM8E,yB,oBAEb,WAAU,IAAD,OACP,OACE,sBAAK7E,UAAU,SAAf,UACE,sBAAKA,UAAU,UAAf,UACI,mBAAGA,UAAU,gBAAb,mBACA,yBAAQA,UAAU,gBAAgBiF,SAAUlE,KAAKhB,MAAMmF,uBAAwBC,aAA6C,OAA9BpE,KAAKhB,MAAMqF,eAA0BrE,KAAKhB,MAAMqF,eAAeC,QAAQC,WAAa,GAAlL,UACE,wBAAQC,QAAM,EAAd,0BACiC,OAA/BxE,KAAKhB,MAAMyF,gBAA2BzE,KAAKhB,MAAMyF,gBAAgBtE,KAAI,SAAAuD,GACrE,OACE,wBAAQgB,MAAOhB,EAAMY,QAAQC,WAA7B,SAA0Cb,EAAMC,UAE/C,GACL,wBAAQe,MAAM,MAAd,iCAEJ,+BACE,6BAAI,cAAC,IAAD,CAAMxF,GAAG,SAAT,2BACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,SAAT,uBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,eAAT,4BAGR,sBAAKD,UAAU,8BAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,cAAC,IAAD,CAAMC,GAAG,OAAT,SACE,qBAAKD,UAAU,0BAAf,wCAEF,uBACA,oBAAGA,UAAU,4BAAb,UAAwE,OAA9Be,KAAKhB,MAAMqF,eAA0BrE,KAAKhB,MAAMqF,eAAeV,KAAO,SAAM,GAAtH,wBACgC,OAA9B3D,KAAKhB,MAAMqF,eACX,qBAAKpF,UAAU,mCAAf,sCAIA,qBAAKA,UAAU,2BAAf,SACgC,OAA5Be,KAAKhB,MAAM6H,aACX7G,KAAKhB,MAAM6H,aAAa1G,KAAI,SAAAI,GAC1B,OACE,sBAAKtB,UAAU,gCAAf,UACE,qBAAKW,IAAKW,EAAYC,SAAUvB,UAAU,uCAC1C,mBAAGA,UAAU,sCAAb,SACGsB,EAAYE,QAEf,cAAC,IAAD,CAAMvB,GAAI,UAAYqB,EAAYgD,GAAlC,SACE,qBAAKtE,UAAU,sCAAf,kCAIH,cAAC,IAAD,CAAQ8B,KAAK,OAAOC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,WAKvC,OAA5BlB,KAAKhB,MAAM6H,aAAwB7G,KAAKhB,MAAM6H,aAAa1G,KAAI,SAACI,GAChE,OACE,sBAAKtB,UAAU,qBAAf,UACE,mBAAGA,UAAU,2BAAb,SACGsB,EAAYE,QAEf,qBAAKxB,UAAU,0BAAf,SACIsB,EAAYL,UAAUC,KAAI,SAACC,EAAUC,GACrC,OACE,sBAAKpB,UAAU,yBAAf,UACE,qBAAKW,IAAKQ,EAASoF,QAAUpF,EAASoF,QAAQhF,SAAW,GAAIvB,UAAU,sCACvE,sBAAKA,UAAU,sCAAf,UACE,mBAAGA,UAAU,oCAAb,SACGmB,EAASoF,QAAUpF,EAASoF,QAAQ7B,KAAO,KAE9C,mBAAG1E,UAAU,uCAAb,SACImB,EAASlB,QAGf,qBAAKD,UAAU,0CAA0CG,QAAS,kBAAM,EAAKJ,MAAM8H,mBAAmB1G,EAASE,aAA/G,8CAOT,a,GApFMd,IAAMC,WC8BZsH,E,kDA/Bb,aAAe,wC,qDAGf,WACE/G,KAAKgH,OAASpG,SAASZ,KAAKhB,MAAMqE,MAAMC,OAAO0D,QAC/ChH,KAAKhB,MAAMwE,iBAAiBxD,KAAKgH,U,oBAEnC,WAAU,IAAD,OACP,OACE,qBAAK/H,UAAU,QAAf,SACKe,KAAKhB,MAAMuB,YAKZ,sBAAKtB,UAAU,gBAAf,UACE,oBAAGA,UAAU,cAAb,UACGe,KAAKhB,MAAMuB,YAAYE,MAD1B,wBAGA,mBAAGxB,UAAU,mBAAb,yBACA,sBAAKA,UAAU,aAAf,UACE,uBAAO8B,KAAK,OAAO9B,UAAU,gBAAgBiF,SAAUlE,KAAKhB,MAAMiI,oBAClE,wBAAQhI,UAAU,mBAAmBG,QAAU,WAAQ,EAAKJ,MAAMkI,MAAM,EAAKF,SAA7E,gCAXJ,qBAAK/H,UAAU,gBAAf,SACE,mBAAGA,UAAU,wBAAb,4C,GAbQO,IAAMC,W,iBCsKX0H,G,yDAlJb,aAAe,wC,0CAGf,WACE,IAAMd,EAAOrG,KACb,OACE,sBAAKf,UAAU,MAAf,UACE,cAAC,EAAD,CACEE,WAAsC,KAA1BkH,EAAKrH,MAAMoI,MAAMC,KAC7BhI,QAASgH,EAAKrH,MAAMK,UAEtB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiI,OAAO,EAAMC,KAAK,IAAIC,OAAS,SAACC,GACrC,MAA8B,KAA1BpB,EAAKrH,MAAMoI,MAAMC,KAEjB,cAAC,EAAD,IAGI,cAAC,EAAD,2BACFI,GADE,IAENvH,UAAWmG,EAAKrH,MAAMoI,MAAMP,aAC5B5G,kBAAmBoG,EAAKrH,MAAMiB,wBAIlC,cAAC,IAAD,CAAOqH,OAAO,EAAMC,KAAK,OAAOC,OAAS,SAACC,GACxC,OACE,cAAC,EAAD,OAGJ,cAAC,IAAD,CAAOH,OAAO,EAAMC,KAAK,UAAUC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BACtDA,GADsD,IAE1D5H,OAAQwG,EAAKrH,MAAMa,aAGrB,cAAC,IAAD,CAAOyH,OAAO,EAAMC,KAAK,QAAQC,OAAS,kBAAM,cAAC,EAAD,CAC5CE,YAAarB,EAAKrH,MAAM0I,YACxB5D,qBAAsBuC,EAAKrH,MAAM8E,qBACjCW,gBAAiB4B,EAAKrH,MAAMoI,MAAM3C,gBAClCJ,eAAgBgC,EAAKrH,MAAMoI,MAAM/C,eACjCF,uBAAwBkC,EAAKrH,MAAMmF,uBACnCQ,cAAe0B,EAAKrH,MAAM2F,cAC1BC,oBAAqByB,EAAKrH,MAAM4F,oBAChCC,cAAewB,EAAKrH,MAAM6F,cAC1B8C,cAAetB,EAAKrH,MAAM2I,cAC1B7C,KAAMuB,EAAKrH,MAAM8F,KACjBuC,KAAMhB,EAAKrH,MAAMoI,MAAMC,KACvBtD,MAAOsC,EAAKrH,MAAMoI,MAAMrD,MACxB6D,OAAQvB,EAAKrH,MAAMoI,MAAMQ,YAG7B,cAAC,IAAD,CAAON,OAAO,EAAMC,KAAK,UAAUC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BACtDA,GADsD,IAE1D3D,qBAAsBuC,EAAKrH,MAAM8E,qBACjCW,gBAAiB4B,EAAKrH,MAAMoI,MAAM3C,gBAClCJ,eAAgBgC,EAAKrH,MAAMoI,MAAM/C,eACjCF,uBAAwBkC,EAAKrH,MAAMmF,uBACnCyD,OAAQvB,EAAKrH,MAAMoI,MAAMS,eACzBhB,aAAcR,EAAKrH,MAAMoI,MAAMU,qBAC/B7H,kBAAmBoG,EAAKrH,MAAM+I,0BAC9Bb,MAAOb,EAAKrH,MAAMkI,MAClBJ,mBAAoBT,EAAKrH,MAAM8H,yBAGjC,cAAC,IAAD,CAAOQ,OAAO,EAAMC,KAAK,iBAAiBC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BAC7DA,GAD6D,IAEjElH,YAAa8F,EAAKrH,MAAMoI,MAAMY,mBAC9BxE,iBAAkB6C,EAAKrH,MAAMiJ,wBAC7BhB,kBAAmBZ,EAAKrH,MAAMiI,kBAC9BC,MAAOb,EAAKrH,MAAMkI,YAGpB,cAAC,IAAD,CAAOI,OAAO,EAAMC,KAAK,aAAaC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BAEzDA,GAFyD,IAG7DrH,SAAUiG,EAAKrH,MAAMoI,MAAM7G,YAC3BkD,iBAAkB4C,EAAKrH,MAAMoI,MAAM3D,iBACnCD,iBAAkB6C,EAAKrH,MAAMwE,uBAG/B,cAAC,IAAD,CAAO8D,OAAO,EAAMC,KAAK,aAAaC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BACzDA,GADyD,IAE7D1B,cAAeM,EAAKrH,MAAM+G,cAC1BH,kBAAmBS,EAAKrH,MAAM4G,kBAC9BC,qBAAsBQ,EAAKrH,MAAM6G,qBACjCC,mBAAoBO,EAAKrH,MAAM8G,yBAGjC,cAAC,IAAD,CAAOwB,OAAO,EAAMC,KAAK,cAAcC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BAC1DA,GAD0D,IAE9D3D,qBAAsBuC,EAAKrH,MAAM8E,qBACjCW,gBAAiB4B,EAAKrH,MAAMoI,MAAM3C,gBAClCJ,eAAgBgC,EAAKrH,MAAMoI,MAAM/C,eACjCF,uBAAwBkC,EAAKrH,MAAMmF,uBACnCT,MAAO2C,EAAKrH,MAAMoI,MAAMc,YACxB/B,YAAaE,EAAKrH,MAAMmH,YACxBgC,WAAY9B,EAAKrH,MAAMoJ,iBACvBC,gBAAiBhC,EAAKrH,MAAMsJ,sBAC5B1C,kBAAmBS,EAAKrH,MAAMuJ,wBAC9B1C,qBAAsBQ,EAAKrH,MAAMwJ,2BACjC1C,mBAAoBO,EAAKrH,MAAMyJ,+BAGjC,cAAC,IAAD,CAAOnB,OAAO,EAAMC,KAAK,SAASC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BACrDA,GADqD,IAEzD3D,qBAAsBuC,EAAKrH,MAAM8E,qBACjCW,gBAAiB4B,EAAKrH,MAAMoI,MAAM3C,gBAClCJ,eAAgBgC,EAAKrH,MAAMoI,MAAM/C,eACjCF,uBAAwBkC,EAAKrH,MAAMmF,uBACnCT,MAAO2C,EAAKrH,MAAMoI,MAAM1D,MACxByE,WAAY9B,EAAKrH,MAAMmJ,WACvB5B,aAAcF,EAAKrH,MAAMuH,aACzBD,4BAA6BD,EAAKrH,MAAMsH,4BACxCK,mBAAoBN,EAAKrH,MAAM2H,yBAGjC,cAAC,IAAD,CAAOW,OAAO,EAAMC,KAAK,eAAeC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BAC3DA,GAD2D,IAE/D1D,MAAOsC,EAAKrH,MAAMoI,MAAMsB,aACxBtD,gBAAiBiB,EAAKrH,MAAMoG,gBAC5BF,oBAAqBmB,EAAKrH,MAAMkG,oBAChCC,qBAAsBkB,EAAKrH,MAAMmG,qBACjCF,qBAAsBoB,EAAKrH,MAAMiG,2BAGnC,cAAC,IAAD,CAAOqC,OAAO,EAAMC,KAAK,gBAAgBC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BAC5DA,GAD4D,IAEhE1D,MAAOsC,EAAKrH,MAAMoI,MAAMuB,mBACxBjD,cAAeW,EAAKrH,MAAM0G,cAC1BF,QAASa,EAAKrH,MAAMoI,MAAMwB,cAC1BC,YAAaxC,EAAKrH,MAAMoI,MAAM0B,kBAC9BC,aAAc1C,EAAKrH,MAAMoI,MAAM4B,mBAC/BN,aAAcrC,EAAKrH,MAAMoI,MAAMuB,mBAC/BrD,aAAce,EAAKrH,MAAMiK,mBACzB/D,oBAAqBmB,EAAKrH,MAAMkK,0BAChC/D,qBAAsBkB,EAAKrH,MAAMmK,2BACjClE,qBAAsBoB,EAAKrH,MAAMoK,oCAIrC,cAAC,EAAD,W,GA7IU5J,IAAMC,YCTT4J,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iBC8BCQ,EApCM,CACnBzC,KAAM,GACNnI,GAAI,GACJuB,MAAO,GACPmD,YAAa,GACbG,MAAO,KACPgG,UAAW,GACXzF,QAAS,KACT4D,YAAa,KACbxH,UAAW,GACXsJ,oBAAqB,GACrBC,aAAc,GACdC,WAAY,GACZC,cAAe,GACfC,gBAAiB,GACjBC,mBAAoB,GACpBC,iBAAkB,GAClBC,cAAe,KACflG,eAAgB,KAChBI,gBAAiB,GACjBlE,YAAa,GACbkD,iBAAkB,GAClBoD,aAAc,GACdiB,qBAAsB,KACtBE,mBAAoB,KACpBtE,MAAO,KACPkE,OAAQ,GACRgB,cAAe,KACfC,YAAa,GACbE,aAAc,GACdL,aAAc,GACdI,kBAAmB,GACnBE,mBAAoB,GACpBL,mBAAoB,I,IC1BlB6B,E,2BCDEC,EAAgB,CACpBC,IAAK,OACLC,Q,OAASC,GAGLC,EAAmBC,YAAeL,GCTzB,WAA8C,IAA7BrD,EAA4B,uDAAtB0C,EAAciB,EAAQ,uCAC1D,OAAOA,EAAOhK,MACZ,IAAK,kBACH,OAAOiK,OAAOC,OAAO,GAAI7D,EAAO,CAC9B3G,MAAOsK,EAAOG,UAElB,IAAK,wBACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BxD,YAAamH,EAAOG,UAExB,IAAK,kBACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BrD,MAAOgH,EAAOG,UAElB,IAAK,kBACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B9C,QAASyG,EAAOG,UAEpB,IAAK,uBACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B1G,UAAWqK,EAAOG,UAEtB,IAAK,0BACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B6C,aAAcc,EAAOG,UAEzB,IAAK,6BAEH,OADAnI,QAAQC,IAAI+H,EAAOG,SACZF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B/C,eAAgB0G,EAAOG,UAE3B,IAAK,wBACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B8C,WAAYa,EAAOG,UAEvB,IAAK,mCACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B4C,oBAAqBe,EAAOG,UAEhC,IAAK,6BACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B+C,cAAeY,EAAOG,UAE1B,IAAK,+BACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BgD,gBAAiBW,EAAOG,UAE5B,IAAK,kCACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BiD,mBAAoBU,EAAOG,UAE/B,IAAK,gCACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BkD,iBAAkBS,EAAOG,UAE7B,IAAK,yBACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9ByB,YAAakC,EAAOG,UAExB,IAAK,0BACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B2B,aAAcgC,EAAOG,UAEzB,IAAK,0BACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BsB,aAAcqC,EAAOG,UAEzB,IAAK,iCACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B0B,kBAAmBiC,EAAOG,UAE9B,IAAK,kCACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B4B,mBAAoB+B,EAAOG,UAE/B,IAAK,kCACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BuB,mBAAoBoC,EAAOG,UAE/B,IAAK,wBACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B2C,UAAWgB,EAAOG,UAEtB,IAAK,YACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BC,KAAM0D,EAAOG,UAEjB,IAAK,sBACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B7G,YAAawK,EAAOG,UAExB,IAAK,+BACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BY,mBAAoB+C,EAAOG,UAE/B,IAAK,uBACH,OAAuB,OAAnBH,EAAOG,QACFF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BP,aAAc,OAGXmE,OAAOC,OAAO,GAAI7D,EAAO,CAC9BP,aAAckE,EAAOG,UAEzB,IAAK,4BACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B3D,iBAAkBsH,EAAOG,UAE7B,IAAK,iBACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BQ,OAAQmD,EAAOG,UAEnB,IAAK,4BACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B3C,gBAAiBsG,EAAOG,UAE5B,IAAK,gBACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9B1D,MAAOqH,EAAOG,UAElB,IAAK,wBACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9Bc,YAAa6C,EAAOG,UAExB,IAAK,iCACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BU,qBAAsBiD,EAAOG,UAEjC,IAAK,0BACH,OAAOF,OAAOC,OAAO,GAAI7D,EAAO,CAC9BwB,cAAemC,EAAOG,UAE1B,QACE,OAAOpB,MD1HPqB,EAAiBvJ,OAAOwJ,sCAAwCC,IAEhEC,EAAQC,YACZC,YAAgB,CACdpE,MAAOyD,IAETf,EACAqB,EAAeM,YAAgBC,OAIlBJ,IADUK,YAAaL,GACvBA,G,yEE8BAM,GADK,I,WAlDlB,aAAe,oBACb5L,KAAK6L,MAAQ,IAAIC,K,+EAEnB,sBAAApJ,EAAA,sEACQ1C,KAAK6L,MAAME,KAAK,CACpBC,SAAU,aACVC,eAAe,EACfC,QAAS,CACP7K,KAAM,0CACN8K,QAAS,MACTC,YAAa,kBAEfC,iBAAiB,EACjBC,iBAAkB,CAChBC,QAAQ,EACRC,UAAS,EACTC,QAAQ,EACRC,QAAQ,EACRC,SAAS,KAff,gD,gHA+BA,4BAAAjK,EAAA,sEACyB1C,KAAK6L,MAAMe,QADpC,cACQ/J,EADR,OAEEE,QAAQC,IAAIH,GACZE,QAAQC,IAAIhD,KAAK6L,OACjB7L,KAAK6M,KAAO,IAAIC,KAAK9M,KAAK6L,MAAMkB,UAChChK,QAAQC,IAAIhD,KAAK6M,MALnB,kBAMS7M,KAAK6M,MANd,gD,mIAQA,WAA+BG,GAA/B,SAAAtK,EAAA,sEACe1C,KAAK6L,MAAMoB,iBAAiB,CACvCC,SAAU,SACVC,WAAYH,IAHhB,wF,+DC5BaI,GARJ,CACPC,SAAU,0CACVC,gBAAiB,6CACjBC,MAAO,kEJNPC,GAAqB,IAAIC,KAAa,IAAIX,KAAKM,GAAOC,UAAWD,GAAOE,iB,SAG7DI,K,8EAAf,sBAAAhL,EAAA,yDACO8K,GAAmBG,gBAD1B,gCAEUH,GAAmBzB,OAF7B,gCAISyB,IAJT,4C,+BAMeI,K,8EAAf,4BAAAlL,EAAA,+EAGUkJ,GAAYG,OAHtB,uBAIiBH,GAAYgB,QAJ7B,OAIIC,EAJJ,uDAMI9J,QAAQkB,MAAR,MANJ,WAQElB,QAAQC,IAAI6J,IACRA,EATN,kCAWMrC,EAAS,IAAIiD,KAAaZ,EAAMO,GAAOE,gBAAiBF,GAAOG,OAXrE,UAYY/C,EAAOuB,OAZnB,iEAcMhJ,QAAQkB,MAAR,MACM,IAAI4J,MAAM,8BAftB,WAkBiB,OAAXrD,EAlBN,uBAmBU,IAAIqD,MAAM,8BAnBpB,WAqBOrD,EAAO9D,QArBd,kCAsBU8D,EAAOsD,eAtBjB,iCAwBStD,GAxBT,kE,sBKXA,SAASuD,KACP,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTF,MACC,QAGP,IA+dMlG,GAA4B,yDAAM,WAAOqG,EAAUC,GAAjB,6BAAA3L,EAAA,+EAGrBkL,KAHqB,OAGpCpD,EAHoC,8DAKpCzH,QAAQkB,MAAR,MALoC,kCAQhCmD,EAAQiH,IAAWjH,MACToD,EAAO9D,QACnBG,EAAe,GACbnD,EAAQ0D,EAAM/C,eACdC,EAAUZ,EAAMY,QAZgB,oBAcfkG,EAAO8D,cAAchK,GAdN,QAcpCuC,EAdoC,iEAgBpC9D,QAAQkB,MAAR,MACAsK,MAAM,iCAjB8B,2BAoBtC,IAASC,EAAI,EAAGA,EAAI3H,EAAa4H,OAAQD,IACvC3H,EAAa2H,GAAGtO,UAAY,GAE9BkO,EAAS,CACPrN,KAAM,iCACNmK,QAASrE,IAzB2B,IAAAnE,EAAA,iBA2B7B8L,GA3B6B,mBAAA9L,EAAA,sEA4BZ8H,EAAOkE,mBAAmB7H,EAAa2H,GAAGjL,IA5B9B,OA4B9BrD,EA5B8B,OA6BpC2G,EAAa2H,GAAGtO,UAAYA,EAC5BkO,EAAS,CACPrN,KAAM,iCACNmK,QAASrE,IAhCyB,IAAAnE,EAAA,iBAkC3BiM,GAlC2B,eAAAjM,EAAA,sEAmCZ8H,EAAOoE,WAAW1O,EAAUyO,GAAGzP,IAnCnB,OAmC5BsG,EAnC4B,OAoClCqB,EAAa2H,GAAGtO,UAAUyO,GAAGnJ,QAAUA,EACvChD,EAAegD,EAAQqJ,MAAMrF,MAAK,SAAAhJ,GAChCgF,EAAQhF,SAAWA,EACnBqG,EAAa2H,GAAGtO,UAAUyO,GAAGnJ,QAAUA,EACvC4I,EAAS,CACPrN,KAAM,iCACNmK,QAASrE,OAEViI,OAAM,SAAA9K,GACPjB,QAAQkB,MAAMD,MA7CkB,0CAkC3B2K,EAAI,EAlCuB,YAkCpBA,EAAIzO,EAAUuO,QAlCM,0CAkC3BE,GAlC2B,eAkCEA,IAlCF,uBAiDpCnM,EAAeqE,EAAa2H,GAAGzK,OAAOyF,MAAK,SAAAhJ,GACzCqG,EAAa2H,GAAGhO,SAAWA,EAC3B4N,EAAS,CACPrN,KAAM,iCACNmK,QAASrE,OAEViI,OAAM,SAAA9K,GACPjB,QAAQkB,MAAMD,MAxDoB,2CA2B7BwK,EAAI,EA3ByB,aA2BtBA,EAAI3H,EAAa4H,QA3BK,0CA2B7BD,GA3B6B,iBA2BGA,IA3BH,iFAAN,yDCvTlC,IAAMO,GAAQC,aA9Hd,SAAyB5H,EAAOpI,GAC9B,OAAOoI,KAGT,SAA4BgH,EAAUpP,GACpC,MAAO,CACL2F,cAAe,SAACsK,GACdb,EDjDgB,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDAC7B0L,EAAS,CACPrN,KAAM,kBACNmK,QAAS+D,EAAIC,OAAOxK,QAHO,2CAAT,wDCiDPC,CAAcsK,KAEzBrK,oBAAqB,SAACqK,GACpBb,ED9CsB,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDACnC0L,EAAS,CACPrN,KAAM,wBACNmK,QAAS+D,EAAIC,OAAOxK,QAHa,2CAAT,wDC8CbE,CAAoBqK,KAE/BpK,cAAe,SAACoK,GACdb,ED3CgB,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,iBAAA3L,EAAA,sDACvByM,EAAOF,EAAIC,OAAOE,MAAM,IACxBC,EAAS,IAAIC,YACZC,OAAS,WACdnB,EAAS,CACPrN,KAAM,kBACNmK,QAASmE,EAAOG,UAGpBH,EAAOI,kBAAkBN,GATI,2CAAT,wDC2CPtK,CAAcoK,KAEzBrJ,kBAAmB,SAACqJ,GAClBb,EDQoB,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDACjC0L,EAAS,CACPrN,KAAM,uBACNmK,QAAS+D,EAAIC,OAAOxK,QAHW,2CAAT,wDCRXkB,CAAkBqJ,KAE7BpJ,qBAAsB,SAACoJ,GACrBb,EDYuB,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDACpC0L,EAAS,CACPrN,KAAM,0BACNmK,QAAS+D,EAAIC,OAAOxK,QAHc,2CAAT,wDCZdmB,CAAqBoJ,KAEhCnJ,mBAAoB,SAACmJ,GACnBb,EDeqB,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDAClC0L,EAAS,CACPrN,KAAM,wBACNmK,QAAS+D,EAAIC,OAAOxK,QAHY,2CAAT,wDCfZoB,CAAmBmJ,KAE9B1G,wBAAyB,SAAC0G,GACxBb,EDpB0B,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDACvC0L,EAAS,CACPrN,KAAM,+BACNmK,QAAS+D,EAAIC,OAAOxK,QAHiB,2CAAT,wDCoBjB6D,CAAwB0G,KAEnCzG,2BAA4B,SAACyG,GAC3Bb,EDjB6B,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDAC1C0L,EAAS,CACPrN,KAAM,kCACNmK,QAAS+D,EAAIC,OAAOxK,QAHoB,2CAAT,wDCiBpB8D,CAA2ByG,KAEtCxG,yBAA0B,SAACwG,GACzBb,EDd2B,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDACxC0L,EAAS,CACPrN,KAAM,gCACNmK,QAAS+D,EAAIC,OAAOxK,QAHkB,2CAAT,wDCclB+D,CAAyBwG,KAEpC/J,oBAAqB,SAAC+J,GACpBb,EDUsB,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDACnC0L,EAAS,CACPrN,KAAM,yBACNmK,QAAS+D,EAAIC,OAAOxK,QAHa,2CAAT,wDCVbQ,CAAoB+J,KAE/B9J,qBAAsB,SAAC8J,GACrBb,EDcuB,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDACpC0L,EAAS,CACPrN,KAAM,0BACNmK,QAAS+D,EAAIC,OAAOxK,QAHc,2CAAT,wDCddS,CAAqB8J,KAEhChK,qBAAsB,SAACgK,GACrBb,EDkBuB,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,iBAAA3L,EAAA,sDAC9ByM,EAAOF,EAAIC,OAAOE,MAAM,IACxBC,EAAS,IAAIC,YACZC,OAAS,WACdnB,EAAS,CACPrN,KAAM,0BACNmK,QAASmE,EAAOG,UAGpBH,EAAOI,kBAAkBN,GATW,2CAAT,wDClBdlK,CAAqBgK,KAEhC/F,0BAA2B,SAAC+F,GAC1Bb,ED0B4B,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDACzC0L,EAAS,CACPrN,KAAM,iCACNmK,QAAS+D,EAAIC,OAAOxK,QAHmB,2CAAT,wDC1BnBwE,CAA0B+F,KAErC9F,2BAA4B,SAAC8F,GAC3Bb,ED8B6B,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDAC1C0L,EAAS,CACPrN,KAAM,kCACNmK,QAAS+D,EAAIC,OAAOxK,QAHoB,2CAAT,wDC9BpByE,CAA2B8F,KAEtC7F,2BAA4B,SAAC6F,GAC3Bb,EDkC6B,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,iBAAA3L,EAAA,sDACpCyM,EAAOF,EAAIC,OAAOE,MAAM,IACxBC,EAAS,IAAIC,YACZC,OAAS,WACdnB,EAAS,CACPrN,KAAM,kCACNmK,QAASmE,EAAOG,UAGpBH,EAAOI,kBAAkBN,GATiB,2CAAT,wDClCpB/F,CAA2B6F,KAEtCtH,cAAe,SAACsH,GACdb,EDvEgB,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,yDACJ,QAArBuM,EAAIC,OAAOxK,MADc,uBAE3B5F,EAAQQ,KAAK,cAFc,0BAK7B8O,EAAS,CACPrN,KAAM,kBACNmK,QAAStK,SAASqO,EAAIC,OAAOxK,SAPF,2CAAT,wDCuEPiD,CAAcsH,KAEzBhI,kBAAmB,SAACgI,GAClBb,ED/DoB,SAACa,GAAD,8CAAS,WAAOb,GAAP,SAAA1L,EAAA,sDACjC0L,EAAS,CACPrN,KAAM,wBACNmK,QAAS+D,EAAIC,OAAOxK,QAHW,2CAAT,sDC+DXuC,CAAkBgI,KAE7B3I,4BAA6B,SAAC2I,GAC5Bb,EDqC8B,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,SAAA3L,EAAA,sDAC3C0L,EAAS,CACPrN,KAAM,mCACNmK,QAAS+D,EAAIC,OAAOxK,QAHqB,2CAAT,wDCrCrB4B,CAA4B2I,KAEvC9K,uBAAwB,SAAC8K,GACvBb,ED+LyB,SAACa,GAAD,8CAAS,WAAOb,EAAUC,GAAjB,2BAAA3L,EAAA,+EAGrBkL,KAHqB,qEAKpC7K,QAAQkB,MAAR,MALoC,8BAQhCmD,EAAQiH,IAAWjH,MAEN,SADbsI,EAAaT,EAAIC,OAAOxK,OATQ,wBAWpC5F,EAAQQ,KAAK,cAXuB,2BAchCgF,EAAU1D,SAAS8O,GACnB9H,EAASR,EAAM3C,gBAfiB,eAgBlBmD,GAhBkB,2BAgB3BlE,EAhB2B,QAiBpC,GAAIA,EAAMY,UAAYA,EAAS,CAC7B8J,EAAS,CACPrN,KAAM,6BACNmK,QAASxH,IAEX0K,EAAS,CACPrN,KAAM,+BACNmK,QAASxH,EAAMC,OAEjByK,EAAS,CACPrN,KAAM,kCACNmK,QAASxH,EAAMuC,YAEjBmI,EAAS,CACPrN,KAAM,gCACNmK,QAASxH,EAAMwC,QAEjBnD,QAAQC,IAAIU,GACZ,IAlB6B,eAkBpB8K,GACPhM,EAAekB,EAAM8C,QAAQgI,GAAGK,MAAMrF,MAAK,SAAAhJ,GACzCkD,EAAM8C,QAAQgI,GAAGhO,SAAWA,EAC5B4N,EAAS,CACPrN,KAAM,6BACNmK,QAASxH,OAEVoL,OAAM,SAAA9K,GACPjB,QAAQkB,MAAMD,OARTwK,EAAI,EAAGA,EAAI9K,EAAM8C,QAAQiI,OAAQD,IAAM,EAAvCA,GAWT,mBA9CkC,sQAiDtCzG,KAA4BqG,EAAUC,GAjDA,uEAAT,wDC/LhBlK,CAAuB8K,KAElCnK,KAAM,WACJsJ,EDkbO,uCAAM,WAAOA,EAAUC,GAAjB,yBAAA3L,EAAA,+EAGAkL,KAHA,OAGfpD,EAHe,8DAKfzH,QAAQkB,MAAR,MALe,8BASY,QADvBmD,EAAQiH,IAAWjH,OACf/C,eATO,wBAUfkK,MAAM,gCAVS,8BAaXxK,EAAQqD,EAAMrD,MAbH,wBAefwK,MAAM,kBAfS,sDAoBE/D,EAAOmF,kBAAkB5L,GApB3B,QAoBf6L,EApBe,iEAsBf7M,QAAQkB,MAAR,MACAsK,MAAM,qCAvBS,8BA0BXhO,EAAc,CAClBsP,QAAS,GACTpP,MAAO2G,EAAM3G,MACbmD,YAAawD,EAAMxD,YACnBG,MAAO6L,EACPtL,QAAS8C,EAAM/C,eAAeC,SAE3BkG,EAAOsF,cAAcvP,GAjCT,wBAkCfgO,MAAM,wBAlCS,kCAqCbwB,EAAS,KArCI,oBAuCAvF,EAAOwF,gBAAgBzP,EAAa,CAAEmG,QAAS8D,EAAO9D,UAvCtD,QAuCfqJ,EAvCe,iEAyCfhN,QAAQkB,MAAR,MACAsK,MAAM,mCA1CS,sDA8CT/D,EAAOyF,WAAWF,GA9CT,kEAgDfhN,QAAQkB,MAAR,MACAsK,MAAM,0CAjDS,4CAoDXR,KApDW,QAqDjBjP,EAAQQ,KAAK,UArDI,iFAAN,0DChbTkE,iBAAkB,SAAC0M,GDyDE,IAAC5P,ECxDpB8N,GDwDoB9N,ECxDM4P,EDwDP,uCAAgB,WAAO9B,GAAP,yBAAA1L,EAAA,6DACvC0L,EAAS,CACPrN,KAAM,sBACNmK,QAAS,OAH4B,kBAOtBwC,KAPsB,OAOrClD,EAPqC,8DASrCzH,QAAQkB,MAAR,MATqC,sDAcpBuG,EAAO2F,YAAY7P,GAdC,QAcrCF,EAdqC,iEAgBrC2C,QAAQkB,MAAR,MAhBqC,kCAmBvCmK,EAAS,CACPrN,KAAM,sBACNmK,QAAS9K,IAELwP,EAAWxP,EAASG,YAAYwD,MAvBC,oBA0BpBvB,EAAeoN,GA1BK,QA0BrCpP,EA1BqC,iEA4BrCuC,QAAQkB,MAAR,MA5BqC,kCA+BvCmK,EAAS,CACPrN,KAAM,4BACNmK,QAAS1K,IAjC4B,oBAoCjBgK,EAAO4F,SAAShQ,EAASG,YAAY+D,SApCpB,QAoC/BZ,EApC+B,OAqCrCtD,EAASG,YAAYmD,MAAQA,EAC7B0K,EAAS,CACPrN,KAAM,sBACNmK,QAAS9K,IAxC0B,0DA2CrC2C,QAAQkB,MAAR,MA3CqC,sDA+CfuG,EAAOoE,WAAWxO,EAASlB,IA/CZ,QA+C/BsG,EA/C+B,OAgDrCpF,EAASlB,GAAKsG,EAAQ7B,KACtByK,EAAS,CACPrN,KAAM,sBACNmK,QAAS9K,IAnD0B,0DAsDrC2C,QAAQkB,MAAR,MAtDqC,4GAAhB,yDCtDrBhE,kBAAmB,WACjBmO,EDgHoB,uCAAM,WAAOA,EAAUC,GAAjB,yBAAA3L,EAAA,yDAC9B0L,EAAS,CACPrN,KAAM,uBACNmK,QAAS,OAEL9D,EAAQiH,IAAWjH,MAET,MADVV,EAAUU,EAAMC,OACCX,EAPO,uBAQ5B5H,EAAQQ,KAAK,QARe,mDAaboO,KAba,OAa5BlD,EAb4B,gEAe5BzH,QAAQkB,MAAR,MAf4B,sDAoBVuG,EAAO6F,qBAAqB3J,GApBlB,QAoB5BxG,EApB4B,iEAsB5B6C,QAAQkB,MAAR,MAtB4B,2BAyB9B,IAzB8B,WAyBrBuK,GACPhE,EAAO4F,SAASlQ,EAAUsO,GAAGjO,YAAY+D,SAASkF,MAAK,SAAA9F,GACrDxD,EAAUsO,GAAGjO,YAAYG,UAAYgD,EAAMC,KAC3CyK,EAAS,CACPrN,KAAM,uBACNmK,QAAShL,OAGbsC,EAAetC,EAAUsO,GAAGjO,YAAYwD,OAAOyF,MAAK,SAAAhJ,GAClDN,EAAUsO,GAAGjO,YAAYC,SAAWA,EACpC4N,EAAS,CACPrN,KAAM,uBACNmK,QAAShL,QAZNsO,EAAI,EAAGA,EAAItO,EAAUuO,OAAQD,IAAM,EAAnCA,GAgBTJ,EAAS,CACPrN,KAAM,uBACNmK,QAAShL,IA3CmB,kEAAN,0DC9GtBwH,YAAa,WACX0G,EDsOc,uCAAM,WAAOA,EAAUC,GAAjB,qBAAA3L,EAAA,+EAGPkL,KAHO,OAGtBpD,EAHsB,8DAKtBzH,QAAQkB,MAAR,MALsB,kCAQlBmD,EAAQiH,IAAWjH,MACnBV,EAAUU,EAAMC,KATE,oBAYPmD,EAAO8F,UAAU5J,GAZV,QAYtBkB,EAZsB,iEActB7E,QAAQkB,MAAR,MAdsB,2BAiBxBmK,EAAS,CACPrN,KAAM,iBACNmK,QAAStD,IAnBa,iEAAN,0DCpOhBO,WAAY,SAAC7D,GACX8J,EDiRa,uCAAM,WAAOA,EAAUC,GAAjB,SAAA3L,EAAA,6DACvB0L,EAAS,CACPrN,KAAM,gBACNmK,QAAS,OAHY,kBAONwC,KAPM,qEASrB3K,QAAQkB,MAAR,MATqB,4EAAN,0DC/QfmE,iBAAkB,SAAC9D,GACjB8J,ED2RmB,SAAC9J,GAAD,8CAAa,WAAO8J,EAAUC,GAAjB,iBAAA3L,EAAA,6DACpC0L,EAAS,CACPrN,KAAM,6BACNmK,QAAS5G,IAEX8J,EAAS,CACPrN,KAAM,wBACNmK,QAAS,OAPyB,kBAWnBwC,KAXmB,OAWlClD,EAXkC,8DAalCzH,QAAQkB,MAAR,MAbkC,kCAkBtBoK,IAAWjH,MAlBW,oBAqBpBoD,EAAO4F,SAAS9L,GArBI,QAqBlCZ,EArBkC,iEAuBlCX,QAAQkB,MAAR,MAvBkC,2BA0BpCmK,EAAS,CACPrN,KAAM,wBACNmK,QAASxH,IA5ByB,iEAAb,wDC3RV0E,CAAiB9D,KAE5ByD,0BAA2B,WACzBqG,EAASrG,OAEXE,wBAAyB,SAACjB,GACxBoH,EDiB0B,SAACpH,GAAD,8CAAY,WAAOoH,GAAP,iBAAA1L,EAAA,+EAGzBgL,KAHyB,OAGxClD,EAHwC,8DAKxCzH,QAAQkB,MAAR,MALwC,sDAUpBuG,EAAO+F,QAAQvJ,GAVK,QAUxCzG,EAVwC,iEAYxCwC,QAAQkB,MAAR,MAZwC,2BAe1CmK,EAAS,CACPrN,KAAM,+BACNmK,QAAS3K,IAjB+B,iEAAZ,sDCjBjB0H,CAAwBjB,KAEnClD,qBAAsB,WACpBsK,ED6IuB,uCAAM,WAAOA,EAAUC,GAAjB,mBAAA3L,EAAA,+EAGhBkL,KAHgB,OAG/BpD,EAH+B,8DAK/BzH,QAAQkB,MAAR,MAL+B,kCAQ3ByC,EAAU8D,EAAO9D,QARU,oBAWhB8D,EAAO8F,UAAU5J,GAXD,QAW/BkB,EAX+B,iEAa/B7E,QAAQkB,MAAR,MAb+B,2BAgBjCmK,EAAS,CACPrN,KAAM,4BACNmK,QAAStD,IAlBsB,iEAAN,0DC3IzBqB,mBAAoB,WAClBmF,ED8SqB,uCAAM,WAAOA,EAAUC,GAAjB,iBAAA3L,EAAA,6DAC/B0L,EAAS,CACPrN,KAAM,0BACNmK,QAAS,OAHoB,kBAOd0C,KAPc,OAO7BpD,EAP6B,8DAS7BzH,QAAQkB,MAAR,MAT6B,sDAcbuG,EAAOoE,WAAWpE,EAAO9D,SAdZ,QAc7BlB,EAd6B,iEAgB7BzC,QAAQkB,MAAR,MACAsK,MAAM,4BAjBuB,2BAoB/BH,EAAS,CACPrN,KAAM,0BACNmK,QAAS1F,IAEX4I,EAAS,CACPrN,KAAM,iCACNmK,QAAS1F,EAAQ7B,OAEnByK,EAAS,CACPrN,KAAM,kCACNmK,QAAS1F,EAAQC,QAGnBjD,EAAegD,EAAQqJ,MAAMrF,MAAK,SAAAhJ,GAChCgF,EAAQhF,SAAWA,EACnB4N,EAAS,CACPrN,KAAM,0BACNmK,QAAS1F,OAEVsJ,OAAM,SAAA9K,GACPjB,QAAQkB,MAAMD,MAxCe,iEAAN,0DC5SvBnE,OAAQ,WACNuO,EDwOS,uCAAM,WAAOA,GAAP,eAAA1L,EAAA,sEACEkL,KADF,WACbpD,EADa,QAEP9D,QAFO,uBAGjB3D,QAAQC,IAAI,oBAHK,iCAMnBD,QAAQC,IAAIwH,EAAO9D,SACnB0H,EAAS,CACPrN,KAAM,YACNmK,QAASV,EAAO9D,UATC,mBAaD8D,EAAOoE,WAAWpE,EAAO9D,SAbxB,wEAejB3D,QAAQkB,MAAR,MACAnF,EAAQQ,KAAK,gBAhBI,2BAoBnBR,EAAQQ,KAAK,KApBM,0DAAN,wDCtOXyG,cAAe,WACbqI,EDufgB,uCAAM,WAAOA,EAAUC,GAAjB,yBAAA3L,EAAA,+EAGTkL,KAHS,OAGxBpD,EAHwB,8DAKxBzH,QAAQkB,MAAR,MALwB,kCAQpBmD,EAAQiH,IAAWjH,MACnBC,EAAOD,EAAMC,KACb3G,EAAY0G,EAAM1G,UAClBuJ,EAAe7C,EAAM6C,aACrBC,EAAa9C,EAAM8C,WAZC,oBAclBM,EAAOgG,YAAY9P,EAAWuJ,EAAcC,EAAY7C,GAdtC,kEAgBxBtE,QAAQkB,MAAR,MACAsK,MAAM,2BAjBkB,4CAoBpBR,KApBoB,QAqB1BjP,EAAQQ,KAAK,QArBa,iEAAN,0DCrflB6G,YAAa,WACXiI,EDqjBc,uCAAM,WAAOA,EAAUC,GAAjB,6BAAA3L,EAAA,+EAGPkL,KAHO,OAGtBpD,EAHsB,8DAKtBzH,QAAQkB,MAAR,MALsB,8BASK,QADvBmD,EAAQiH,IAAWjH,OACf/C,eATc,wBAUtBkK,MAAM,mCAVgB,kCAalBjK,EAAU8C,EAAM/C,eAAeC,QAC/BX,EAAOyD,EAAMgD,gBACbnE,EAAYmB,EAAMiD,mBAClBnE,EAAQkB,EAAMkD,iBACd5G,EAAQ,CACZY,UACAX,OACAsC,YACAC,SArBsB,UAwBEsE,EAAOiG,UAAU/M,EAAO,CAAEgD,QAAS8D,EAAO9D,UAxB5C,eAwBlBgK,EAxBkB,2BA0BhBlG,EAAOrE,YAAYuK,GA1BH,kEA4BtB3N,QAAQkB,MAAR,MACAsK,MAAM,2BA7BgB,2BAgCxBzP,EAAQQ,KAAK,KAhCW,iEAAN,0DCnjBhBoG,cAAe,WACb0I,EDwgBgB,uCAAM,WAAOA,EAAUC,GAAjB,+BAAA3L,EAAA,+EAGTkL,KAHS,OAGxBpD,EAHwB,8DAKxBzH,QAAQkB,MAAR,MALwB,8BAQpBmD,EAAQiH,IAAWjH,MACnBzD,EAAOyD,EAAM0B,kBACbrD,EAAQ2B,EAAM4B,mBAGN,MAFRjF,EAAQqD,EAAMuB,oBAXM,iBAetBkG,EAD0B,OAAxBzH,EAAMwB,cACDxB,EAAMwB,cAAciG,KAEpB,GAjBe,yCAoBXrE,EAAOmF,kBAAkB5L,GApBd,QAoBxB8K,EApBwB,sBAuBpBnI,EAAU8D,EAAO9D,QAEjBiK,EAAa,CACjBhN,OACA8B,QACAoJ,QAEF9L,QAAQC,IAAI2N,GA9Bc,UAgCEnG,EAAOoG,uBAAuBD,EAAY,CAAEjK,YAhC9C,eAgCpBmK,EAhCoB,2BAkClBrG,EAAO9E,cAAcmL,GAlCH,kEAoCxB9N,QAAQkB,MAAR,MACAsK,MAAM,kCArCkB,2BAwC1BzP,EAAQQ,KAAK,KAxCa,iEAAN,0DCtgBlB8F,gBAAiB,WACfgJ,EDgckB,uCAAM,WAAOA,EAAUC,GAAjB,6BAAA3L,EAAA,+EAGXkL,KAHW,OAG1BpD,EAH0B,8DAK1BzH,QAAQkB,MAAR,MAL0B,kCAQtBmD,EAAQiH,IAAWjH,MACnBzD,EAAOyD,EAAMyB,YACbpD,EAAQ2B,EAAM2B,aACd+H,EAAY1J,EAAMsB,aAClBhC,EAAUU,EAAMC,KAZM,oBAgBbmD,EAAOmF,kBAAkBmB,GAhBZ,QAgB1BjC,EAhB0B,iEAkB1B9L,QAAQkB,MAAR,MACAsK,MAAM,mCAnBoB,sDAwBJ/D,EAAOuG,YAAY,CACvCpN,OACA8B,QACAoJ,QACC,CACDnI,YA7BwB,QAwB1BmK,EAxB0B,iEAgC1B9N,QAAQkB,MAAR,MACAsK,MAAM,2BAjCoB,sDAqCpB/D,EAAOwG,cAActK,EAASmK,GArCV,kEAuC1B9N,QAAQkB,MAAR,MACAsK,MAAM,+BAxCoB,2BA2C5BzP,EAAQQ,KAAK,KA3Ce,iFAAN,0DC9bpBiH,aAAc,WACZ6H,EDynBe,uCAAM,WAAOA,EAAUC,GAAjB,6BAAA3L,EAAA,+EAGRkL,KAHQ,OAGvBpD,EAHuB,8DAKvBzH,QAAQkB,MAAR,MALuB,kCAQnBmD,EAAQiH,IAAWjH,MACnB6J,EAAgB7J,EAAMC,KACtB/C,EAAU8C,EAAM1D,MAAMY,QACtBmB,EAAQ2B,EAAM4C,oBAXK,oBAcP4B,GAAYsF,yBAAyBzL,GAd9B,QAcvBiB,EAduB,iEAgBvB3D,QAAQkB,MAAR,MACAsK,MAAM,4BAjBiB,sDAsBF/D,EAAO2G,6BAA6BzK,EAAS,CAAEA,QAASuK,IAtBtD,QAsBvBG,EAtBuB,iEAwBvBrO,QAAQkB,MAAR,MACAsK,MAAM,kCAzBiB,sDA6BjB/D,EAAO6G,oBAAoB/M,EAAS8M,GA7BnB,kEA+BvBrO,QAAQkB,MAAR,MACAsK,MAAM,8BAhCiB,sDAqCT/D,EAAO4F,SAAS9L,GArCP,QAqCvBZ,EArCuB,iEAuCvBX,QAAQkB,MAAR,MAvCuB,2BA0CzBmK,EAAS,CACPrN,KAAM,gBACNmK,QAASxH,IA5Cc,yFAAN,0DCvnBjBwD,MAAO,SAACF,GACNoH,ED2kBQ,SAACpH,GAAD,8CAAY,WAAOoH,EAAUC,GAAjB,2BAAA3L,EAAA,+EAGPkL,KAHO,OAGtBpD,EAHsB,8DAKtBzH,QAAQkB,MAAR,MALsB,kCAQlBmD,EAAQiH,IAAWjH,MACnBC,EAAOD,EAAMC,KACGD,EAAMC,KACtBiK,EAAUlK,EAAM2C,UAXE,oBAcX6B,GAAYsF,yBAAyBI,GAd1B,QActBpS,EAdsB,iEAgBtB6D,QAAQkB,MAAR,MACAsK,MAAM,uDAjBgB,kCAoBlBnO,EAAW,CACf4G,SACAK,OACAnI,MAvBsB,oBA2BPsL,EAAO+G,oBAAoBnR,EAAU,CAAEsG,QAASW,IA3BzC,QA2BtB0I,EA3BsB,iEA6BtBhN,QAAQkB,MAAR,MACAsK,MAAM,mCA9BgB,sDAkChB/D,EAAOgH,eAAezB,GAlCN,kEAoCtBhN,QAAQkB,MAAR,MACAsK,MAAM,oCArCgB,4CAwClBR,KAxCkB,QAyCxBjP,EAAQQ,KAAK,KAzCW,iFAAZ,wDC3kBC4H,CAAMF,KAEjBL,mBAAoB,SAACrC,EAASoC,GAC5B0H,EDmqBqB,SAAC9J,EAASoC,GAAV,8CAAsB,WAAO0H,EAAUC,GAAjB,iBAAA3L,EAAA,+EAG9BkL,KAH8B,OAG7CpD,EAH6C,8DAK7CzH,QAAQkB,MAAR,MAL6C,kCAQjCoK,IAAWjH,MARsB,UASnBoD,EAAOiH,8BAA8B/K,EAAS,CAAEA,QAAS8D,EAAO9D,UAT7C,eASzCgL,EATyC,2BAWvClH,EAAO7D,mBAAmBrC,EAASoN,GAXI,kEAa7C3O,QAAQkB,MAAR,MAb6C,oFAAtB,wDCnqBZ0C,CAAmBrC,EAASoC,KAEvCI,mBAAoB,SAACxG,GACnB8N,EDkrBqB,SAAC9N,GAAD,8CAAgB,WAAO8N,EAAUC,GAAjB,qCAAA3L,EAAA,+EAGxBkL,KAHwB,OAGvCpD,EAHuC,8DAKvCzH,QAAQkB,MAAR,MALuC,4CAQZuG,EAAOmH,4BAA4BrR,EAAY,CAAEoG,QAAS8D,EAAO9D,UARrD,eAQnCkL,EARmC,OASzC7O,QAAQC,IAAI4O,GAT6B,oBAWjCpH,EAAO1D,mBAAmB8K,GAXO,kEAavC7O,QAAQkB,MAAR,MAbuC,4CAgBnC8J,KAhBmC,eAkB3BM,IAAWjH,MACnBV,EAAU8D,EAAO9D,QAnBkB,oBAsBxB8D,EAAO8F,UAAU5J,GAtBO,QAsBvCkB,EAtBuC,iEAwBvC7E,QAAQkB,MAAR,MACAsK,MAAM,+BAzBiC,2BA4BrC1H,EAAe,GA5BsB,eA6BrBe,GA7BqB,kEA6B9BlE,EA7B8B,QA8BjCY,EAAUZ,EAAMY,QA9BiB,eAgCtBuC,EAhCsB,UAgCI2D,EAAO8D,cAAchK,GAhCzB,oBAgCrCuC,EAhCqC,KAgCTgL,OAhCS,0EAkCrC9O,QAAQkB,MAAR,MAlCqC,yKAsCzC,IAASuK,EAAI,EAAGA,EAAI3H,EAAa4H,OAAQD,IACvC3H,EAAa2H,GAAGtO,UAAY,GAE9BkO,EAAS,CACPrN,KAAM,iCACNmK,QAASrE,IA3C8B,IAAAnE,EAAA,iBA6ChC8L,GA7CgC,mBAAA9L,EAAA,sEA8Cf8H,EAAOkE,mBAAmB7H,EAAa2H,GAAGjL,IA9C3B,OA8CjCrD,EA9CiC,OA+CvC2G,EAAa2H,GAAGtO,UAAYA,EAC5BkO,EAAS,CACPrN,KAAM,iCACNmK,QAASrE,IAEF8H,EAAI,EApD0B,YAoDvBA,EAAIzO,EAAUuO,QApDS,iCAqDfjE,EAAOoE,WAAW1O,EAAUyO,GAAGzP,IArDhB,OAqD/BsG,EArD+B,OAsDrCqB,EAAa2H,GAAGtO,UAAUyO,GAAGnJ,QAAUA,EAtDF,QAoDDmJ,IApDC,uBAwDvCnM,EAAeqE,EAAa2H,GAAGzK,OAAOyF,MAAK,SAAAhJ,GACzCqG,EAAa2H,GAAGhO,SAAWA,EAC3B4N,EAAS,CACPrN,KAAM,iCACNmK,QAASrE,OAEViI,OAAM,SAAA9K,GACPjB,QAAQkB,MAAMD,MA/DuB,2CA6ChCwK,EAAI,EA7C4B,aA6CzBA,EAAI3H,EAAa4H,QA7CQ,0CA6ChCD,GA7CgC,iBA6CAA,IA7CA,+GAAhB,wDClrBZ1H,CAAmBxG,KAE9BjB,QAAS,WACP+O,EDmvBU,uCAAM,WAAOA,GAAP,SAAA1L,EAAA,sDACpB0L,EAAS,CACPrN,KAAM,WACNmK,QAAS,OAEXpM,EAAQQ,KAAK,QALO,2CAAN,2DC9uBF0P,CAA6C8C,YAAW3K,IAEtE4K,IAASvK,OACP,cAAC,IAAD,CAAU8D,MAAOA,GAAjB,SACE,cAAC,IAAD,CAAQxM,QAASA,EAAjB,SACE,cAACiQ,GAAD,QAGJiD,SAASC,eAAe,SAM1B5I,K","file":"static/js/main.fee1ef66.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import history from \"history/createHashHistory\";\n\nexport default history();\n","import history from \"./history\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header(props) {\n  return (\n    <header className=\"App-header\">\n      <div className=\"header-wrapper\">\n        <Link to=\"/top\" className=\"logo\">GxCert</Link>\n        { props.isLoggedIn ? (\n            <Link to=\"/\" className=\"header-left-link\">OBTAINED</Link>\n          ) : \"\"\n        }\n        { props.isLoggedIn ? (\n          <Link to=\"/issue\" className=\"header-left-link\">ISSUE</Link>\n          ) : \"\"\n        }\n      </div>\n      { !props.isLoggedIn ? (\n          <div className=\"sign-in-button\" onClick={() => history.push(\"/signup\")}>SIGN IN</div>) : (\n          <div className=\"header-right-links\">\n            <Link to=\"/profile/edit\" className=\"edit-profile-button\">PROFILE</Link>\n            <div className=\"sign-out-button\" onClick={props.signOut}>SIGN OUT</div>\n          </div>\n          )\n      }\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nclass Footer extends React.Component {\n  constructor() {\n    super();\n  }\n  render() {\n    return (\n      <footer>\n        <div className=\"footer-message\">\n          このアプリケーションは、通貨MATICの寄付により、データの書き込み・変更ができます。\n        </div>\n        <div className=\"footer-app\">\n          Copyright Gaiax inc.\n        </div>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","\nimport { Link } from \"react-router-dom\";\n\nfunction Top() {\n  return (\n    <div className=\"top\">\n      <div className=\"top-left\">\n        \n      </div>\n      <div className=\"top-right\">\n        <p className=\"concept\">確かな証明書を誰にでも簡単に</p>\n        <p className=\"concept-large\">ブロックチェーン技術による、改ざんされない確かな証明書を簡単に発行、受け取りすることができます。</p>\n        <Link to=\"/signup\">\n          <div className=\"sign-up\">\n            SIGN UP\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Top;\n","\nfunction SignIn(props) {\n  return (\n    <div className=\"sign-in\">\n      <div className=\"sign-in-content\">\n        <p className=\"sign-in-message\">サービスの利用にはGoogleアカウントでの認証が必須です。Googleアカウントで認証を行った後、登録を完了させてください。</p>\n        <img src=\"/google.png\" onClick={props.signIn}/>\n      </div>\n    </div>\n  );\n}\n\nexport default SignIn;\n","\nfunction Registration() {\n  return (\n    <div className=\"registration\">\n      <div className=\"registration-content\">\n        <p className=\"registration-title\">ユーザー登録</p>\n        <img src=\"\" className=\"registration-icon\" />\n        <div className=\"registration-form\">\n          <p className=\"registration-form-title\">Name</p>\n          <input type=\"text\" className=\"registration-form-name\" />\n          <p className=\"registration-form-title\">E-mail</p>\n          <input type=\"text\" className=\"registration-form-email\" />\n        </div>\n        <div className=\"register-button\">\n          登録\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Registration;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\n\nclass Certificates extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchCertificates();\n  }\n  render() {\n    return (\n      <div className=\"certificates\">\n        <div className=\"certificates-content\">\n          <p className=\"certificates-title\">\n            証明書\n          </p>\n          <div className=\"certificates-list\">\n            { this.props.userCerts !== null ? this.props.userCerts.map((userCert, index) => {\n              return (\n                <Link to={\"/certs/\" + userCert.userCertId}>\n                  <div className=\"certificates-list-cell\">\n                    <img src={userCert.certificate.imageUrl} className=\"certificates-list-cell-icon\"/>\n                    <div className=\"certificates-list-cell-detail\">\n                      <p className=\"certificates-list-cell-title\">\n                        {userCert.certificate.title} \n                      </p>\n                      <p className=\"certificates-list-cell-by\">\n                        {userCert.certificate.groupName}\n                      </p>\n                      <p className=\"certificates-list-cell-date\">\n                        { (new Date(parseInt(userCert.timestamp) * 1000)).toISOString() }\n                      </p>\n                    </div>\n                  </div>\n                </Link>\n              );\n            }) : <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} /> }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Certificates;\n","import * as IpfsHttpClient from \"ipfs-http-client\";\nconst ipfs = IpfsHttpClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\nasync function postCertificate(blob) {\n  const response = await ipfs.add(blob);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the certificate to IPFS network.\");\n}\nasync function postText(text) {\n  const response = await ipfs.add(text);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the text to IPFS network.\");\n}\n\nfunction createImageUrlFromUint8Array(arr) {\n  const blob = new Blob([arr]);\n  const urlCreator = window.URL || window.webkitURL;\n  const imageUrl = urlCreator.createObjectURL(blob);\n  return imageUrl;\n}\nvar concatBuffer = function (buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n};\n\nasync function getImageOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    const url = createImageUrlFromUint8Array(content);\n    return url;\n  }\n  return null;\n}\n\nfunction uintToString(array) {\n  var out, i, len, c;\n  var char2, char3;\n\n  out = \"\";\n  len = array.length;\n  i = 0;\n  while (i < len) {\n    c = array[i++];\n    switch (c >> 4)\n    {\n      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12: case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(((c & 0x0F) << 12) |\n                                   ((char2 & 0x3F) << 6) |\n                                   ((char3 & 0x3F) << 0));\n        break;\n    }\n  }\n  return out;\n}\nasync function getTextOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    return uintToString(new Uint8Array(content));\n  }\n  return null;\n}\n\n\nexport { getImageOnIpfs, getTextOnIpfs, postCertificate, postText, createImageUrlFromUint8Array };\n","import { getImageOnIpfs } from \"../util/ipfs\"\nimport React from \"react\";\n\nimport { Link } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\n\n\nclass Certificate extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    const userCertId = parseInt(this.props.match.params.id);\n    this.props.fetchCertificate(userCertId);\n  }\n  render() {\n    console.log(this.props.userCert);\n    return (\n      <div className=\"certificate\">\n        { (!this.props.userCert || !this.props.userCert.certificate) ? (\n            <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\n          ) : (\n            <div className=\"certificate-content\">\n              <p className=\"certificate-title\">\n                {this.props.userCert.certificate.title}\n              </p>\n              <img src={this.props.certificateImage} className=\"certificate-icon\" />\n              <table className=\"certificate-detail\">\n                <tr>\n                  <td>Issue Date: </td>\n                  <td>{(new Date(parseInt(this.props.userCert.timestamp * 1000))).toISOString()}</td>\n                </tr>\n                <tr>\n                  <td>Issuer: </td>\n                  <td>\n                    {!this.props.userCert.certificate.group ? \"\" : this.props.userCert.certificate.group.name }\n                  </td>\n                </tr>\n                <tr>\n                  <td>To: </td>\n                  <td>\n                    { this.props.userCert.to }\n                  </td>\n                </tr>\n                <tr>\n                  <td>Title: </td>\n                  <td>\n                    {this.props.userCert.certificate.title}\n                  </td>\n                </tr>\n                <tr>\n                  <td>Description: </td>\n                  <td>{this.props.userCert.certificate.description}</td>\n                </tr>\n              </table>\n              <div className=\"certificate-buttons\">\n                <div className=\"certificate-button\">\n                  参照URLの発行\n                </div>\n                <div className=\"certificate-button\">\n                  PDFのダウンロード\n                </div>\n              </div>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default Certificate;\n","import React from \"react\";\nimport { createImageUrlFromUint8Array } from \"../util/ipfs\";\nimport { Link } from \"react-router-dom\";\n\nclass NewCert extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchGroupsInSidebar();\n  }\n  render() {\n    let imageUrl = \"\";\n    try {\n      imageUrl = createImageUrlFromUint8Array(this.props.image);\n    } catch(err) {\n      console.error(err);\n    }\n    return (\n      <div className=\"new-cert\">\n        <div className=\"sidebar\">\n            <p className=\"sidebar-title\">ISSUE</p>\n            <select className=\"sidebar-group\" onChange={this.props.onChangeGroupInSidebar} defaultValue={ this.props.groupInSidebar !== null ? this.props.groupInSidebar.groupId.toString() : \"\"}>\n              <option hidden>Choose group</option>\n              { this.props.groupsInSidebar !== null ? this.props.groupsInSidebar.map(group => {\n                return (\n                  <option value={group.groupId.toString()}>{group.name}</option>\n                )\n              }) : \"\" }\n              <option value=\"new\">Create new group</option>\n            </select>\n          <ul>\n            <li><Link to=\"/issue\">CERTIFICATE</Link></li>\n            <li><Link to=\"/group\">MEMBERS</Link></li>\n            <li><Link to=\"/group/edit/\">ISSUER</Link></li>\n          </ul>\n        </div>\n        <div className=\"new-cert-content\">\n          <p className=\"new-cert-title\">\n      { this.props.groupInSidebar !== null ? this.props.groupInSidebar.name + \"の\" : \"\"}証明書の登録 \n          </p>\n          <p className=\"new-cert-description\">\n            証明書を登録してください。証明書は複数登録することができ、それぞれの複数のユーザーに対して発行することができます。\n          </p>\n          <div className=\"new-cert-form\">\n            <p className=\"new-cert-form-title\">\n              Title of Certificate\n            </p>\n            <input type=\"text\" className=\"new-cert-form-name\" onChange={this.props.onChangeTitle}/>\n            <p className=\"new-cert-form-title\">\n              Description of Certificate\n            </p>\n            <textarea className=\"new-cert-form-description\" onChange={this.props.onChangeDescription} ></textarea>\n            <p className=\"new-cert-form-title\">\n              Certificate Image\n            </p>\n            <img src={imageUrl} className=\"new-cert-form-image\" />\n            <div className=\"new-cert-form-image-file-div\">\n              <label className=\"new-cert-form-image-file-label\">\n                <input type=\"file\" className=\"new-cert-form-image-file\" onChange={this.props.onChangeImage} />\n                画像選択\n              </label>\n            </div>\n            <div className=\"register-button\" onClick={() => this.props.sign()} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewCert;\n","import React from \"react\";\nimport { createImageUrlFromUint8Array } from \"../util/ipfs\";\n\nclass NewProfile extends React.Component {\n  constructor() {\n    super();\n  }\n  render() {\n    let imageUrl = \"\";\n    try {\n      imageUrl = createImageUrlFromUint8Array(this.props.image);\n    } catch(err) {\n      console.error(err);\n    }\n    return (\n      <div className=\"new-profile\">\n        <div className=\"new-profile-content\">\n          <p className=\"new-profile-title\">\n            ユーザー登録\n          </p>\n          <div className=\"new-profile-form\">\n            <div className=\"new-profile-form-image\">\n              <label for=\"new-profile-form-image-file\">\n                <img src={imageUrl} className=\"new-profile-form-image\" />\n              </label>\n              <input id=\"new-profile-form-image-file\" type=\"file\" onChange={this.props.onChangeProfileImage} />\n            </div>\n            <p className=\"new-profile-form-title\">Name</p>\n            <input type=\"text\" className=\"new-profile-form-name\" onChange={this.props.onChangeProfileName} />\n            <p className=\"new-profile-form-title\">E-mail</p>\n            <input type=\"text\" className=\"new-profile-form-email\" onChange={this.props.onChangeProfileEmail} />\n            <div className=\"register-button\" onClick={this.props.registerProfile} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewProfile;\n","import React from \"react\";\nimport { getImageOnIpfs } from \"../util/ipfs\";\nimport { createImageUrlFromUint8Array } from \"../util/ipfs\";\n\nclass EditProfile extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchProfile();\n  }\n  render() {\n    let imageUrl = null;\n    let initialImageUrl = null;\n    if (this.props.profile !== null) {\n      initialImageUrl = this.props.profile.imageUrl;\n    }\n    if (this.props.image) {\n      try {\n        imageUrl = createImageUrlFromUint8Array(this.props.image);\n      } catch(err) {\n        console.error(err);\n      }\n    }\n    console.log(imageUrl);\n    return (\n      <div className=\"edit-profile\">\n        <div className=\"edit-profile-content\">\n          <p className=\"edit-profile-title\">\n            プロフィール編集\n          </p>\n          <div className=\"edit-profile-form\">\n            <div className=\"edit-profile-form-image\">\n              <label for=\"edit-profile-form-image-file\">\n                <img src={imageUrl === null ? initialImageUrl : imageUrl} className=\"edit-profile-form-image\" />\n              </label>\n              <input id=\"edit-profile-form-image-file\" type=\"file\" onChange={this.props.onChangeProfileImage} />\n            </div>\n            <p className=\"edit-profile-form-title\">Name</p>\n            <input type=\"text\" className=\"edit-profile-form-name\" onChange={this.props.onChangeProfileName} defaultValue={this.props.profile !== null ? this.props.profile.name : \"\"} />\n            <p className=\"edit-profile-form-title\">E-mail</p>\n            <input type=\"text\" className=\"edit-profile-form-email\" onChange={this.props.onChangeProfileEmail} defaultValue={this.props.profile !== null ? this.props.profile.email : \"\"} />\n            <div className=\"register-button\" onClick={this.props.updateProfile} >\n              更新\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditProfile;\n","import React from \"react\";\n\nclass NewGroup extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div className=\"new-group\">\n        <div className=\"new-group-content\">\n          <p className=\"new-group-title\">発行元の登録</p>\n          <p className=\"new-group-description\">証明書の発行には発行元となる団体（企業、教育機関、NPO法人など）の登録が必要です。</p>\n          <div className=\"new-group-form\">\n            <p className=\"new-group-form-title\">Name</p>\n            <input type=\"text\" className=\"new-group-form-name\" onChange={this.props.onChangeGroupName} />\n            <p className=\"new-group-form-title\">Address</p>\n            <input type=\"text\" className=\"new-group-form-address\" onChange={this.props.onChangeGroupAddress} />\n            <p className=\"new-group-form-title\">Phone</p>\n            <input type=\"text\" className=\"new-group-form-phone\" onChange={this.props.onChangeGroupPhone} />\n\n            <div className=\"register-button\" onClick={this.props.registerGroup} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewGroup;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\n\nclass EditGroup extends React.Component {\n  constructor() {\n    super();\n  }\n\n  componentDidMount() {\n  }\n  render() {\n    console.log(this.props.groupInSidebar);\n    return (\n      <div className=\"edit-group\">\n        <div className=\"sidebar\">\n            <p className=\"sidebar-title\">ISSUE</p>\n            <select className=\"sidebar-group\" onChange={this.props.onChangeGroupInSidebar} defaultValue={ this.props.groupInSidebar !== null ? this.props.groupInSidebar.groupId.toString() : \"\"}>\n              <option hidden>Choose group</option>\n              { this.props.groupsInSidebar !== null ? this.props.groupsInSidebar.map(group => {\n                return (\n                  <option value={group.groupId.toString()}>{group.name}</option>\n                )\n              }) : \"\" }\n              <option value=\"new\">Create new group</option>\n            </select>\n          <ul>\n            <li><Link to=\"/issue\">CERTIFICATE</Link></li>\n            <li><Link to=\"/group\">MEMBERS</Link></li>\n            <li><Link to=\"/group/edit/\">ISSUER</Link></li>\n          </ul>\n        </div>\n        { this.props.groupInSidebar !== null ? (\n        <div className=\"edit-group-content\">\n          <p className=\"edit-group-title\">発行元 {this.props.groupInSidebar.name}の更新</p>\n          <p className=\"edit-group-description\">証明書の発行には発行元となる団体（企業、教育機関、NPO法人など）の登録が必要です。</p>\n          <div className=\"edit-group-form\">\n            <p className=\"edit-group-form-title\">Name</p>\n            <input type=\"text\" className=\"edit-group-form-name\" onChange={this.props.onChangeGroupName} defaultValue={this.props.groupInSidebar.name} />\n            <p className=\"edit-group-form-title\">Address</p>\n            <input type=\"text\" className=\"edit-group-form-address\" onChange={this.props.onChangeGroupAddress} defaultValue={this.props.groupInSidebar.residence}/>\n            <p className=\"edit-group-form-title\">Phone</p>\n            <input type=\"text\" className=\"edit-group-form-phone\" onChange={this.props.onChangeGroupPhone} defaultValue={this.props.groupInSidebar.phone} />\n\n            <div className=\"register-button\" onClick={this.props.updateGroup} >\n              更新\n            </div>\n          </div>\n        </div>) : ( <div className=\"edit-group-content\">\n          <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\n        </div>) }\n      </div>\n    );\n  }\n}\n\nexport default EditGroup;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\n\nclass GroupMembers extends React.Component {\n\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <div className=\"group-members\">\n        <div className=\"sidebar\">\n            <p className=\"sidebar-title\">ISSUE</p>\n            <select className=\"sidebar-group\" onChange={this.props.onChangeGroupInSidebar} defaultValue={ this.props.groupInSidebar !== null ? this.props.groupInSidebar.groupId.toString() : \"\"}>\n              <option hidden>Choose group</option>\n              { this.props.groupsInSidebar !== null ? this.props.groupsInSidebar.map(group => {\n                return (\n                  <option value={group.groupId.toString()}>{group.name}</option>\n                )\n              }) : \"\" }\n              <option value=\"new\">Create new group</option>\n            </select>\n          <ul>\n            <li><Link to=\"/issue\">CERTIFICATE</Link></li>\n            <li><Link to=\"/group\">MEMBERS</Link></li>\n            <li><Link to=\"/group/edit/\">ISSUER</Link></li>\n          </ul>\n        </div>\n        <div className=\"group-members-content\">\n          { (() => {\n            const that = this;\n            if (!this.props.groupInSidebar) {\n              return (\n                <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} /> \n              );\n            }\n            return (\n              <div>\n                <p className=\"group-members-title\">{ this.props.groupInSidebar.name }のメンバー</p>\n                <input type=\"text\" className=\"group-members-invite\" onChange={this.props.onChangeGroupMemberToInvite} />\n                <button className=\"group-members-invite-button\" onClick={this.props.inviteMember} >Invite</button>\n                <div className=\"group-members-list\">\n                  { this.props.groupInSidebar.members.map(member => {\n                    return (\n                      <div className=\"group-members-list-cell\">\n                        <img src={member.imageUrl} className=\"group-members-list-cell-icon\"/>\n                        <div className=\"group-members-list-cell-detail\">\n                          <p className=\"group-members-list-cell-name\">\n                            {member.name} \n                          </p>\n                          <p className=\"group-members-list-cell-address\">\n                            {member.address}\n                          </p>\n                        </div>\n                        <div className=\"group-members-list-cell-disable\" onClick={() => that.props.disableGroupMember(that.props.groupInSidebar.groupId, member.address) }>無効化</div>\n                      </div>\n                    );\n                  }) }\n                </div>\n              </div>\n            );\n          })() }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GroupMembers;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\n\nclass Issuer extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchGroupsInSidebar();\n  }\n  render() {\n    return (\n      <div className=\"issuer\">\n        <div className=\"sidebar\">\n            <p className=\"sidebar-title\">ISSUE</p>\n            <select className=\"sidebar-group\" onChange={this.props.onChangeGroupInSidebar} defaultValue={ this.props.groupInSidebar !== null ? this.props.groupInSidebar.groupId.toString() : \"\"}>\n              <option hidden>Choose group</option>\n              { this.props.groupsInSidebar !== null ? this.props.groupsInSidebar.map(group => {\n                return (\n                  <option value={group.groupId.toString()}>{group.name}</option>\n                )\n              }) : \"\" }\n              <option value=\"new\">Create new group</option>\n            </select>\n          <ul>\n            <li><Link to=\"/issue\">CERTIFICATE</Link></li>\n            <li><Link to=\"/group\">MEMBERS</Link></li>\n            <li><Link to=\"/group/edit/\">ISSUER</Link></li>\n          </ul>\n        </div>\n        <div className=\"issuer-certificates-wrapper\">\n          <div className=\"issuer-certificates\">\n            <Link to=\"/new\">\n              <div className=\"issuer-certificates-new\">新規作成</div>\n            </Link>\n            <br/>\n            <p className=\"issuer-certificates-title\">{this.props.groupInSidebar !== null ? this.props.groupInSidebar.name + \"の\" : \"\"}証明書</p>\n            { this.props.groupInSidebar === null ? (\n              <div className=\"issuer-certificates-select-group\">\n                Choose group on sidebar.\n              </div>\n            ) : (\n              <div className=\"issuer-certificates-list\">\n                { this.props.certificates !== null ? \n                  this.props.certificates.map(certificate => {\n                    return (\n                      <div className=\"issuer-certificates-list-cell\">\n                        <img src={certificate.imageUrl} className=\"issuer-certificates-list-cell-icon\"/>\n                        <p className=\"issuer-certificates-list-cell-title\">\n                          {certificate.title} \n                        </p>\n                        <Link to={\"/issue/\" + certificate.id}>\n                          <div className=\"issuer-certificates-list-cell-issue\">発行</div>\n                        </Link>\n                      </div>\n                    );\n                  }) : <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} /> \n                }\n              </div>\n            ) }\n          </div>\n          { this.props.certificates !== null ? this.props.certificates.map((certificate) => {\n            return (\n              <div className=\"issuer-certificate\">\n                <p className=\"issuer-certificate-title\">\n                  {certificate.title}\n                </p>\n                <div className=\"issuer-certificate-list\">\n                  { certificate.userCerts.map((userCert, index) => {\n                    return (\n                      <div className=\"certificates-list-cell\">\n                        <img src={userCert.profile ? userCert.profile.imageUrl : \"\"} className=\"issuer-certificate-list-cell-icon\"/>\n                        <div className=\"issuer-certificate-list-cell-detail\">\n                          <p className=\"issuer-certificate-list-cell-name\">\n                            {userCert.profile ? userCert.profile.name : \"\"} \n                          </p>\n                          <p className=\"issuer-certificate-list-cell-address\">\n                            { userCert.to }\n                          </p>\n                        </div>\n                        <div className=\"issuer-certificate-list-cell-invalidate\" onClick={() => this.props.invalidateUserCert(userCert.userCertId)}>無効化</div>\n                      </div>\n                    );\n                  }) }\n                </div>\n              </div>\n            );\n          }) : \"\" }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Issuer;\n","import React from \"react\";\n\nclass Issue extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.certId = parseInt(this.props.match.params.certId);\n    this.props.fetchCertificate(this.certId);\n  }\n  render() {\n    return (\n      <div className=\"issue\">\n        { !this.props.certificate ? (\n          <div className=\"issue-content\">\n            <p className=\"certificate-not-found\">Certificate not found.</p> \n          </div>\n        ) : (\n          <div className=\"issue-content\">\n            <p className=\"issue-title\">\n              {this.props.certificate.title}の発行\n            </p>\n            <p className=\"issue-form-title\">Add Address</p>\n            <div className=\"issue-form\">\n              <input type=\"text\" className=\"issue-form-to\" onChange={this.props.onChangeToInIssue}/>\n              <button className=\"issue-form-issue\" onClick={ () => { this.props.issue(this.certId)}}>発行</button>\n            </div>\n          </div>\n        ) }\n      </div>\n    );\n  }\n}\n\nexport default Issue;\n","import React from \"react\";\nimport logo from './logo.svg';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Top from \"./views/Top\";\nimport SignIn from \"./views/SignIn\";\nimport Registration from \"./views/Registration\";\nimport Certificates from \"./views/Certificates\";\nimport Certificate from \"./views/Certificate\";\nimport NewCert from \"./views/NewCert\";\nimport NewProfile from \"./views/NewProfile\";\nimport EditProfile from \"./views/EditProfile\";\nimport NewGroup from \"./views/NewGroup\";\nimport EditGroup from \"./views/EditGroup\";\nimport GroupMembers from \"./views/GroupMembers\";\nimport Issuer from \"./views/Issuer\";\nimport Issue from \"./views/Issue\";\nimport './App.css';\nimport { Switch, Route } from \"react-router-dom\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super(); \n  }\n  render() {\n    const that = this;\n    return (\n      <div className=\"App\">\n        <Header\n          isLoggedIn={that.props.state.from !== \"\"}\n          signOut={that.props.signOut}\n        ></Header>\n        <Switch>\n          <Route exact={true} path=\"/\" render={ (routeProps) => {\n            if (that.props.state.from === \"\") { \n              return (\n                <Top />\n              );\n            }\n            return (<Certificates\n              {...routeProps}\n              userCerts={that.props.state.certificates}\n              fetchCertificates={that.props.fetchCertificates}\n            />)\n\n          } }/>\n          <Route exact={true} path=\"/top\" render={ (routeProps) => {\n            return (\n              <Top />\n            )\n          } }/>\n          <Route exact={true} path=\"/signup\" render={ (routeProps) => <SignIn\n            {...routeProps}\n            signIn={that.props.signIn}\n            />\n          } />\n          <Route exact={true} path=\"/new/\" render={ () => <NewCert\n              fetchGroups={that.props.fetchGroups}\n              fetchGroupsInSidebar={that.props.fetchGroupsInSidebar}\n              groupsInSidebar={that.props.state.groupsInSidebar}\n              groupInSidebar={that.props.state.groupInSidebar}\n              onChangeGroupInSidebar={that.props.onChangeGroupInSidebar}\n              onChangeTitle={that.props.onChangeTitle}\n              onChangeDescription={that.props.onChangeDescription}\n              onChangeImage={that.props.onChangeImage}\n              onChangeGroup={that.props.onChangeGroup}\n              sign={that.props.sign}\n              from={that.props.state.from}\n              image={that.props.state.image}\n              groups={that.props.state.groups}\n            />\n          } />\n          <Route exact={true} path=\"/issue/\" render={ (routeProps) => <Issuer\n            {...routeProps}\n            fetchGroupsInSidebar={that.props.fetchGroupsInSidebar}\n            groupsInSidebar={that.props.state.groupsInSidebar}\n            groupInSidebar={that.props.state.groupInSidebar}\n            onChangeGroupInSidebar={that.props.onChangeGroupInSidebar}\n            groups={that.props.state.groupsInIssuer}\n            certificates={that.props.state.certificatesInIssuer}\n            fetchCertificates={that.props.fetchCertificatesInIssuer}\n            issue={that.props.issue}\n            invalidateUserCert={that.props.invalidateUserCert}\n            />\n          } />\n          <Route exact={true} path=\"/issue/:certId\" render={ (routeProps) => <Issue\n            {...routeProps}\n            certificate={that.props.state.certificateInIssue}\n            fetchCertificate={that.props.fetchCertificateInIssue}\n            onChangeToInIssue={that.props.onChangeToInIssue}\n            issue={that.props.issue}\n          />\n          } />\n          <Route exact={true} path=\"/certs/:id\" render={ (routeProps) => <Certificate\n\n            {...routeProps}\n            userCert={that.props.state.certificate}\n            certificateImage={that.props.state.certificateImage}\n            fetchCertificate={that.props.fetchCertificate}\n            />\n          } />\n          <Route exact={true} path=\"/group/new\" render={ (routeProps) => <NewGroup\n            {...routeProps}\n            registerGroup={that.props.registerGroup}\n            onChangeGroupName={that.props.onChangeGroupName}\n            onChangeGroupAddress={that.props.onChangeGroupAddress}\n            onChangeGroupPhone={that.props.onChangeGroupPhone}\n            />\n          } />\n          <Route exact={true} path=\"/group/edit\" render={ (routeProps) => <EditGroup\n            {...routeProps}\n            fetchGroupsInSidebar={that.props.fetchGroupsInSidebar}\n            groupsInSidebar={that.props.state.groupsInSidebar}\n            groupInSidebar={that.props.state.groupInSidebar}\n            onChangeGroupInSidebar={that.props.onChangeGroupInSidebar}\n            group={that.props.state.groupInEdit}\n            updateGroup={that.props.updateGroup}\n            fetchGroup={that.props.fetchGroupInEdit}\n            onChangeGroupId={that.props.onChangeGroupIdInEdit}\n            onChangeGroupName={that.props.onChangeGroupNameInEdit}\n            onChangeGroupAddress={that.props.onChangeGroupAddressInEdit}\n            onChangeGroupPhone={that.props.onChangeGroupPhoneInEdit}\n            />\n          } />\n          <Route exact={true} path=\"/group\" render={ (routeProps) => <GroupMembers\n            {...routeProps}\n            fetchGroupsInSidebar={that.props.fetchGroupsInSidebar}\n            groupsInSidebar={that.props.state.groupsInSidebar}\n            groupInSidebar={that.props.state.groupInSidebar}\n            onChangeGroupInSidebar={that.props.onChangeGroupInSidebar}\n            group={that.props.state.group}\n            fetchGroup={that.props.fetchGroup}\n            inviteMember={that.props.inviteMember}\n            onChangeGroupMemberToInvite={that.props.onChangeGroupMemberToInvite}\n            disableGroupMember={that.props.disableGroupMember}\n            />\n          } />\n          <Route exact={true} path=\"/profile/new\" render={ (routeProps) => <NewProfile\n            {...routeProps}\n            image={that.props.state.profileImage}\n            registerProfile={that.props.registerProfile}\n            onChangeProfileName={that.props.onChangeProfileName}\n            onChangeProfileEmail={that.props.onChangeProfileEmail}\n            onChangeProfileImage={that.props.onChangeProfileImage}\n            />\n          } />\n          <Route exact={true} path=\"/profile/edit\" render={ (routeProps) => <EditProfile\n            {...routeProps}\n            image={that.props.state.profileImageInEdit}\n            updateProfile={that.props.updateProfile}\n            profile={that.props.state.profileInEdit}\n            profileName={that.props.state.profileNameInEdit}\n            profileEmail={that.props.state.profileEmailInEdit}\n            profileImage={that.props.state.profileImageInEdit}\n            fetchProfile={that.props.fetchProfileInEdit}\n            onChangeProfileName={that.props.onChangeProfileNameInEdit}\n            onChangeProfileEmail={that.props.onChangeProfileEmailInEdit}\n            onChangeProfileImage={that.props.onChangeProfileImageInEdit}\n            />\n          } />\n        </Switch>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nconst initialState = {\n  from: \"\",\n  to: \"\",\n  title: \"\",\n  description: \"\",\n  image: null,\n  toInIssue: \"\",\n  groupId: null,\n  groupInEdit: null,\n  groupName: \"\",\n  groupMemberToInvite: \"\",\n  groupAddress: \"\",\n  groupPhone: \"\",\n  groupIdInEdit: \"\",\n  groupNameInEdit: \"\",\n  groupAddressInEdit: \"\",\n  groupPhoneInEdit: \"\",\n  groupInIssuer: null,\n  groupInSidebar: null,\n  groupsInSidebar: [],\n  certificate: {},\n  certificateImage: \"\",\n  certificates: [],\n  certificatesInIssuer: null,\n  certificateInIssue: null,\n  group: null,\n  groups: [],\n  profileInEdit: null,\n  profileName: \"\",\n  profileEmail: \"\",\n  profileImage: \"\",\n  profileNameInEdit: \"\",\n  profileEmailInEdit: \"\",\n  profileImageInEdit: \"\",\n}\n\nexport default initialState;\n","import GxCertClient from \"gxcert-lib\";\nimport Web3 from \"web3\";\nimport torusClient from \"./torus\";\n\nimport config from \"./config\";\n\n\nlet gxCertWithoutLogin = new GxCertClient(new Web3(config.web3Host), config.contractAddress);\nlet gxCert;\n\nasync function getGxCertWithoutLogin() {\n  if (!gxCertWithoutLogin.isInitialized()) {\n    await gxCertWithoutLogin.init();\n  }\n  return gxCertWithoutLogin;\n}\nasync function getGxCert() {\n  let web3;\n  try {\n    await torusClient.init();\n    web3 = await torusClient.login();\n  } catch(err) {\n    console.error(err);\n  }\n  console.log(web3);\n  if (web3) {\n    try {\n      gxCert = new GxCertClient(web3, config.contractAddress, config.gxApi);\n      await gxCert.init();\n    } catch(err) {\n      console.error(err);\n      throw new Error(\"gxCert is not initialized.\");\n    }\n  }\n  if (gxCert === null) {\n    throw new Error(\"gxCert is not initialized.\");\n  }\n  if (!gxCert.address) {\n    await gxCert.getMyAddress();\n  }\n  return gxCert;\n}\n\nexport {\n  getGxCert,\n  getGxCertWithoutLogin,\n};\n","import { combineReducers, createStore, compose, applyMiddleware } from \"redux\";\nimport Reducer from \"./reducer\";\nimport thunk from \"redux-thunk\";\nimport { persistReducer, persistStore } from 'redux-persist'\nimport sessionStorage from 'redux-persist/lib/storage/session'\nimport initialState from \"./initialState\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage: sessionStorage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, Reducer);\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers({\n    state: persistedReducer,\n  }),\n  initialState,\n  storeEnhancers(applyMiddleware(thunk))\n);\n\nexport const persistor = persistStore(store);\nexport default store;\n","\nimport initialState from \"./initialState\";\n\nexport default function Reducer(state=initialState, action) {\n  switch(action.type) {\n    case \"ON_CHANGE_TITLE\":\n      return Object.assign({}, state, {\n        title: action.payload\n      });\n    case \"ON_CHANGE_DESCRIPTION\":\n      return Object.assign({}, state, {\n        description: action.payload\n      });\n    case \"ON_CHANGE_IMAGE\":\n      return Object.assign({}, state, {\n        image: action.payload\n      });\n    case \"ON_CHANGE_GROUP\":\n      return Object.assign({}, state, {\n        groupId: action.payload\n      });\n    case \"ON_CHANGE_GROUP_NAME\":\n      return Object.assign({}, state, {\n        groupName: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_ADDRESS\":\n      return Object.assign({}, state, {\n        groupAddress: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_IN_SIDEBAR\":\n      console.log(action.payload);\n      return Object.assign({}, state, {\n        groupInSidebar: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_PHONE\":\n      return Object.assign({}, state, {\n        groupPhone: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_MEMBER_TO_INVITE\":\n      return Object.assign({}, state, {\n        groupMemberToInvite: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_ID_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupIdInEdit: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_NAME_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupNameInEdit: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_ADDRESS_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupAddressInEdit: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_PHONE_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupPhoneInEdit: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_NAME\":\n      return Object.assign({}, state, {\n        profileName: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_EMAIL\":\n      return Object.assign({}, state, {\n        profileEmail: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_IMAGE\":\n      return Object.assign({}, state, {\n        profileImage: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_NAME_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileNameInEdit: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_EMAIL_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileEmailInEdit: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_IMAGE_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileImageInEdit: action.payload,\n      });\n    case \"ON_CHANGE_TO_IN_ISSUE\":\n      return Object.assign({}, state, {\n        toInIssue: action.payload,\n      });\n    case \"LOGGED_IN\":\n      return Object.assign({}, state, {\n        from: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE\":\n      return Object.assign({}, state, {\n        certificate: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE_IN_ISSUE\":\n      return Object.assign({}, state, {\n        certificateInIssue: action.payload,\n      });\n    case \"FETCHED_CERTIFICATES\":\n      if (action.payload === null) {\n        return Object.assign({}, state, {\n          certificates: null,\n        });\n      }\n      return Object.assign({}, state, {\n        certificates: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE_IMAGE\":\n      return Object.assign({}, state, {\n        certificateImage: action.payload,\n      });\n    case \"FETCHED_GROUPS\":\n      return Object.assign({}, state, {\n        groups: action.payload,\n      });\n    case \"FETCHED_GROUPS_IN_SIDEBAR\":\n      return Object.assign({}, state, {\n        groupsInSidebar: action.payload,\n      });\n    case \"FETCHED_GROUP\":\n      return Object.assign({}, state, {\n        group: action.payload,\n      });\n    case \"FETCHED_GROUP_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupInEdit: action.payload,\n      });\n    case \"FETCHED_CERTIFICATES_IN_ISSUER\":\n      return Object.assign({}, state, {\n        certificatesInIssuer: action.payload,\n      });\n    case \"FETCHED_PROFILE_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileInEdit: action.payload,\n      });\n    default:\n      return initialState;\n  }\n}\n\n","import Torus from \"@toruslabs/torus-embed\";\nimport Web3 from \"web3\";\n\nclass TorusClient {\n  constructor() {\n    this.torus = new Torus();\n  }\n  async init() {\n    await this.torus.init({\n      buildEnv: \"production\",\n      enableLogging: true,\n      network: {\n        host: \"https://matic-mumbai.chainstacklabs.com\",\n        chainId: 80001,\n        networkName: \"Mumbai Testnet\"\n      },\n      showTorusButton: true,\n      enabledVerifiers: {\n        google: true,\n        facebook:false,\n        reddit: false,\n        twitch: false,\n        discord: false,\n      }\n    });\n    /*\n    await this.torus.init({\n      buildEnv: \"production\",\n      enableLogging: true,\n      network: {\n        host: \"http://localhost:7545\",\n        chainId: 80001,\n        networkName: \"localhost:7545\"\n      },\n      showTorusButton: true,\n    });\n    */\n  }\n  async login() {\n    const response = await this.torus.login();\n    console.log(response);\n    console.log(this.torus);\n    this.web3 = new Web3(this.torus.provider);\n    console.log(this.web3);\n    return this.web3;\n  }\n  async getPublicAddressByGoogle(gmail) {\n    return await this.torus.getPublicAddress({\n      verifier: \"google\",\n      verifierId: gmail,\n    });\n  }\n}\n\nconst torusClient = new TorusClient();\nexport default torusClient;\n","\nlet config;\nif (process.env.NODE_ENV === \"development\") {\n  config = {\n    web3Host: \"https://matic-mumbai.chainstacklabs.com\",\n    contractAddress: \"0xE19F38e0fA7B005E8E62E837B0D79C8558fAd8E0\",\n    gxApi: \"http://localhost:5001/gxcert-21233/asia-northeast1/gxcert\",\n  };\n} else if (process.env.NODE_ENV === \"production\") {\n  //TODO: Change here\n  config = {\n    web3Host: \"https://matic-mumbai.chainstacklabs.com\",\n    contractAddress: \"0xE19F38e0fA7B005E8E62E837B0D79C8558fAd8E0\",\n    gxApi: \"https://asia-northeast1-gxcert-21233.cloudfunctions.net/gxcert\",\n  }\n}\n\n\nexport default config;\n","import { getGxCert, getGxCertWithoutLogin } from \"./gxcert-client\";\nimport { getImageOnIpfs, createImageUrlFromUint8Array } from \"./util/ipfs\";\nimport torusClient from \"./torus\";\nimport history from \"./history\";\n\nfunction wait() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, 6000);\n  });\n}\nconst onChangeTitle = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_TITLE\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeDescription = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_DESCRIPTION\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeImage = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_IMAGE\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\nconst onChangeGroup = (evt) => async (dispatch, getState) => {\n  if (evt.target.value === \"new\") {\n    history.push(\"/group/new\");\n    return;\n  }\n  dispatch({\n    type: \"ON_CHANGE_GROUP\",\n    payload: parseInt(evt.target.value),\n  });\n}\n\nconst onChangeToInIssue = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_TO_IN_ISSUE\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupIdInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ID_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupNameInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_NAME_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupAddressInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ADDRESS_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupPhoneInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_PHONE_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupName = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupAddress = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ADDRESS\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupPhone = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_PHONE\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileName = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileEmail = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_EMAIL\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileImage = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_PROFILE_IMAGE\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\nconst onChangeProfileNameInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileEmailInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_EMAIL_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileImageInEdit = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_PROFILE_IMAGE_IN_EDIT\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\n\nconst onChangeGroupMemberToInvite = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_MEMBER_TO_INVITE\",\n    payload: evt.target.value,\n  });\n}\n\nconst fetchCertificateInIssue = (certId) => async (dispatch) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let certificate;\n  try {\n    certificate = await gxCert.getCert(certId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE_IN_ISSUE\",\n    payload: certificate,\n  });\n}\n\nconst fetchCertificate = (userCertId) => async (dispatch) => {\n  dispatch({\n    type: \"FETCHED_CERTIFICATE\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let userCert;\n  try {\n    userCert = await gxCert.getUserCert(userCertId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE\",\n    payload: userCert,\n  });\n  const imageCid = userCert.certificate.image;\n  let imageUrl;\n  try {\n    imageUrl = await getImageOnIpfs(imageCid);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE_IMAGE\",\n    payload: imageUrl,\n  });\n  try {\n    const group = await gxCert.getGroup(userCert.certificate.groupId);\n    userCert.certificate.group = group;\n    dispatch({\n      type: \"FETCHED_CERTIFICATE\",\n      payload: userCert,\n    });\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  try {\n    const profile = await gxCert.getProfile(userCert.to);\n    userCert.to = profile.name;\n    dispatch({\n      type: \"FETCHED_CERTIFICATE\",\n      payload: userCert,\n    });\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\n\nconst fetchCertificates = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"FETCHED_CERTIFICATES\",\n    payload: null,\n  });\n  const state = getState().state;\n  const address = state.from;\n  if (address === \"\" || !address) {\n    history.push(\"/top\");\n    return;\n  }\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let userCerts;\n  try {\n    userCerts = await gxCert.getReceivedUserCerts(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  for (let i = 0; i < userCerts.length; i++) {\n    gxCert.getGroup(userCerts[i].certificate.groupId).then(group => {\n      userCerts[i].certificate.groupName = group.name;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES\",\n        payload: userCerts,\n      });\n    });\n    getImageOnIpfs(userCerts[i].certificate.image).then(imageUrl => {\n      userCerts[i].certificate.imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES\",\n        payload: userCerts,\n      });\n    });\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES\",\n    payload: userCerts,\n  });\n}\n\nconst fetchGroupsInSidebar = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const address = gxCert.address;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUPS_IN_SIDEBAR\",\n    payload: groups,\n  });\n\n}\n\nconst onChangeGroupInSidebar = (evt) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const groupIdStr = evt.target.value;\n  if (groupIdStr === \"new\") {\n    history.push(\"/group/new\");\n    return;\n  }\n  const groupId = parseInt(groupIdStr);\n  const groups = state.groupsInSidebar;\n  for (const group of groups) {\n    if (group.groupId === groupId) {\n      dispatch({\n        type: \"ON_CHANGE_GROUP_IN_SIDEBAR\",\n        payload: group,\n      });\n      dispatch({\n        type: \"ON_CHANGE_GROUP_NAME_IN_EDIT\",\n        payload: group.name,\n      });\n      dispatch({\n        type: \"ON_CHANGE_GROUP_ADDRESS_IN_EDIT\",\n        payload: group.residence,\n      });\n      dispatch({\n        type: \"ON_CHANGE_GROUP_PHONE_IN_EDIT\",\n        payload: group.phone,\n      });\n      console.log(group);\n      for (let i = 0; i < group.members.length; i++) {\n        getImageOnIpfs(group.members[i].icon).then(imageUrl => {\n          group.members[i].imageUrl = imageUrl;\n          dispatch({\n            type: \"ON_CHANGE_GROUP_IN_SIDEBAR\",\n            payload: group,\n          });\n        }).catch(err => {\n          console.error(err);\n        });\n      }\n      continue;\n    }\n  }\n  fetchCertificatesInIssuer()(dispatch, getState);\n}\nconst fetchGroups = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const address = state.from;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUPS\",\n    payload: groups,\n  });\n}\n\nconst signIn = () => async (dispatch) => {\n  const gxCert = await getGxCert();\n  if (!gxCert.address) {\n    console.log(\"Failed to login.\");\n    return;\n  }\n  console.log(gxCert.address);\n  dispatch({\n    type: \"LOGGED_IN\",\n    payload: gxCert.address,\n  });\n  let profile;\n  try {\n    profile = await gxCert.getProfile(gxCert.address);\n  } catch(err) {\n    console.error(err);\n    history.push(\"/profile/new\");\n    return;\n  }\n\n  history.push(\"/\");\n}\n\nconst fetchGroup = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"FETCHED_GROUP\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\nconst fetchGroupInEdit = (groupId) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ID_IN_EDIT\",\n    payload: groupId,\n  });\n  dispatch({\n    type: \"FETCHED_GROUP_IN_EDIT\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n\n\n  const state = getState().state;\n  let group;\n  try {\n    group = await gxCert.getGroup(groupId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUP_IN_EDIT\",\n    payload: group,\n  });\n}\nconst fetchProfileInEdit = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"FETCHED_PROFILE_IN_EDIT\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let profile;\n  try {\n    profile = await gxCert.getProfile(gxCert.address);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to fetch profile.\");\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_PROFILE_IN_EDIT\",\n    payload: profile,\n  });\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME_IN_EDIT\",\n    payload: profile.name,\n  });\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_EMAIL_IN_EDIT\",\n    payload: profile.email,\n  });\n\n  getImageOnIpfs(profile.icon).then(imageUrl => {\n    profile.imageUrl = imageUrl;\n    dispatch({\n      type: \"FETCHED_PROFILE_IN_EDIT\",\n      payload: profile,\n    });\n  }).catch(err => {\n    console.error(err);\n  });\n  \n}\nconst fetchCertificatesInIssuer = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const address = gxCert.address;\n  let certificates = [];\n  const group = state.groupInSidebar;\n  const groupId = group.groupId;\n  try {\n    certificates = await gxCert.getGroupCerts(groupId);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to fetch certificates.\");\n    return;\n  }\n  for (let i = 0; i < certificates.length; i++) {\n    certificates[i].userCerts = [];\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n    payload: certificates,\n  });\n  for (let i = 0; i < certificates.length; i++) {\n    const userCerts = await gxCert.getIssuedUserCerts(certificates[i].id);\n    certificates[i].userCerts = userCerts;\n    dispatch({\n      type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n      payload: certificates,\n    });\n    for (let j = 0; j < userCerts.length; j++) {\n      const profile = await gxCert.getProfile(userCerts[j].to);\n      certificates[i].userCerts[j].profile = profile;\n      getImageOnIpfs(profile.icon).then(imageUrl => {\n        profile.imageUrl = imageUrl;\n        certificates[i].userCerts[j].profile = profile;\n        dispatch({\n          type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n          payload: certificates,\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n\n    }\n    getImageOnIpfs(certificates[i].image).then(imageUrl => {\n      certificates[i].imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n}\n\nconst sign = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  if (state.groupInSidebar === null) {\n    alert(\"Please set group on sidebar.\");\n    return;\n  }\n  const image = state.image;\n  if (!image) {\n    alert(\"Image not set.\");\n    return;\n  }\n  let imageCid;\n  try {\n    imageCid = await gxCert.uploadImageToIpfs(image);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to post the image to IPFS.\");\n    return;\n  }\n  const certificate = {\n    context: {},\n    title: state.title,\n    description: state.description,\n    image: imageCid,\n    groupId: state.groupInSidebar.groupId,\n  }\n  if (!gxCert.isCertificate(certificate)) {\n    alert(\"Invalid Certificate.\");\n    return;\n  }\n  let signed = null;\n  try {\n    signed = await gxCert.signCertificate(certificate, { address: gxCert.address });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign the certificate.\");\n    return;\n  }\n  try {\n    await gxCert.createCert(signed);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to post the signed certificate.\");\n    return;\n  }\n  await wait();\n  history.push(\"/issue\");\n}\n\nconst registerProfile = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const name = state.profileName;\n  const email = state.profileEmail;\n  const iconImage = state.profileImage;\n  const address = state.from;\n\n  let icon;\n  try {\n    icon = await gxCert.uploadImageToIpfs(iconImage);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to upload image to IPFS.\"); \n    return;\n  }\n  let signedProfile;\n  try {\n    signedProfile = await gxCert.signProfile({\n      name,\n      email,\n      icon,\n    }, { \n      address,\n    });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign profile.\");\n    return;\n  }\n  try {\n    await gxCert.createProfile(address, signedProfile);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to register profile.\");\n    return;\n  }\n  history.push(\"/\");\n\n}\nconst registerGroup = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const from = state.from;\n  const groupName = state.groupName;\n  const groupAddress = state.groupAddress;\n  const groupPhone = state.groupPhone;\n  try {\n    await gxCert.createGroup(groupName, groupAddress, groupPhone, from);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to create group.\");\n    return;\n  }\n  await wait();\n  history.push(\"/new\");\n}\nconst updateProfile = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const name = state.profileNameInEdit;\n  const email = state.profileEmailInEdit;\n  const image = state.profileImageInEdit;\n  let icon;\n  if (image === \"\") {\n    if (state.profileInEdit !== null) {\n      icon = state.profileInEdit.icon;\n    } else {\n      icon = \"\";\n    }\n  } else {\n    icon = await gxCert.uploadImageToIpfs(image);\n  }\n\n  const address = gxCert.address;\n\n  const newProfile = {\n    name,\n    email,\n    icon,\n  }\n  console.log(newProfile);\n\n  const signedProfile = await gxCert.signProfileForUpdating(newProfile, { address });\n  try {\n    await gxCert.updateProfile(signedProfile);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to update your profile.\");\n    return;\n  }\n  history.push(\"/\");\n}\nconst updateGroup = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  if (state.groupInSidebar === null) {\n    alert(\"Please choose group on sidebar.\");\n    return;\n  }\n  const groupId = state.groupInSidebar.groupId;\n  const name = state.groupNameInEdit;\n  const residence = state.groupAddressInEdit;\n  const phone = state.groupPhoneInEdit;\n  const group = {\n    groupId,\n    name,\n    residence,\n    phone,\n  }\n\n  const signedGroup = await gxCert.signGroup(group, { address: gxCert.address });\n  try {\n    await gxCert.updateGroup(signedGroup);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to update group.\");\n    return;\n  }\n  history.push(\"/\");\n}\nconst issue = (certId) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const from = state.from;\n  const signerAddress = state.from;\n  const toEmail = state.toInIssue;\n  let to;\n  try {\n    to = await torusClient.getPublicAddressByGoogle(toEmail);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to get public address of the Google account.\");\n    return;\n  }\n  const userCert = {\n    certId,\n    from,\n    to,\n  }\n  let signed;\n  try {\n    signed = await gxCert.signUserCertificate(userCert, { address: from });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign the certificate.\");\n    return;\n  }\n  try {\n    await gxCert.createUserCert(signed);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to issue the certificate.\");\n    return;\n  }\n  await wait();\n  history.push(\"/\");\n}\nconst inviteMember = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const signerAddress = state.from;\n  const groupId = state.group.groupId;\n  const email = state.groupMemberToInvite;\n  let address;\n  try {\n    address = await torusClient.getPublicAddressByGoogle(email);\n  } catch(err) {\n    console.error(err);\n    alert(\"Email is not registered.\");\n    return;\n  }\n  let signedMember;\n  try {\n    signedMember = await gxCert.signMemberAddressForInviting(address, { address: signerAddress });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign for invitation.\");\n    return;\n  }\n  try {\n    await gxCert.inviteMemberToGroup(groupId, signedMember);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to send invitation.\");\n    return;\n  }\n  let group;\n  try {\n    group = await gxCert.getGroup(groupId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUP\",\n    payload: group,\n  });\n}\n\nconst disableGroupMember = (groupId, address) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const signedAddress = await gxCert.signMemberAddressForDisabling(address, { address: gxCert.address });\n  try {\n    await gxCert.disableGroupMember(groupId, signedAddress);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\n\nconst invalidateUserCert = (userCertId) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const signedUserCert = await gxCert.signUserCertForInvalidation(userCertId, { address: gxCert.address });\n  console.log(signedUserCert);\n  try {\n    await gxCert.invalidateUserCert(signedUserCert);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  await wait();\n\n  const state = getState().state;\n  const address = gxCert.address;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to fetch your groups\");\n    return;\n  }\n  let certificates = [];\n  for (const group of groups) {\n    const groupId = group.groupId;\n    try {\n      certificates = certificates.concat(await gxCert.getGroupCerts(groupId));\n    } catch(err) {\n      console.error(err);\n      continue;\n    }\n  }\n  for (let i = 0; i < certificates.length; i++) {\n    certificates[i].userCerts = [];\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n    payload: certificates,\n  });\n  for (let i = 0; i < certificates.length; i++) {\n    const userCerts = await gxCert.getIssuedUserCerts(certificates[i].id);\n    certificates[i].userCerts = userCerts;\n    dispatch({\n      type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n      payload: certificates,\n    });\n    for (let j = 0; j < userCerts.length; j++) {\n      const profile = await gxCert.getProfile(userCerts[j].to);\n      certificates[i].userCerts[j].profile = profile;\n    }\n    getImageOnIpfs(certificates[i].image).then(imageUrl => {\n      certificates[i].imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n}\n\nconst signOut = () => async (dispatch) => {\n  dispatch({\n    type: \"SIGN_OUT\",\n    payload: null,\n  });\n  history.push(\"/top\");\n}\nexport {\n  onChangeTitle,\n  onChangeDescription,\n  onChangeImage,\n  onChangeGroup,\n  onChangeGroupName,\n  onChangeGroupAddress,\n  onChangeGroupPhone,\n  onChangeGroupNameInEdit,\n  onChangeGroupAddressInEdit,\n  onChangeGroupPhoneInEdit,\n  onChangeProfileName,\n  onChangeProfileEmail,\n  onChangeProfileImage,\n  onChangeProfileNameInEdit,\n  onChangeProfileEmailInEdit,\n  onChangeProfileImageInEdit,\n  onChangeToInIssue,\n  onChangeGroupMemberToInvite,\n  onChangeGroupInSidebar,\n  sign,\n  signIn,\n  fetchProfileInEdit,\n  fetchCertificate,\n  fetchCertificateInIssue,\n  fetchCertificates,\n  fetchGroups,\n  fetchGroupsInSidebar,\n  fetchGroup,\n  fetchGroupInEdit,\n  fetchCertificatesInIssuer,\n  registerGroup,\n  registerProfile,\n  inviteMember,\n  issue,\n  updateGroup,\n  updateProfile,\n  disableGroupMember,\n  invalidateUserCert,\n  signOut,\n\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { connect, Provider } from \"react-redux\";\nimport { withRouter, HashRouter as Router } from \"react-router-dom\";\nimport store from \"./store\";\nimport history from \"./history\";\nimport {\n  onChangeTitle,\n  onChangeDescription,\n  onChangeImage,\n  onChangeToInIssue,\n  onChangeGroup,\n  onChangeGroupName,\n  onChangeGroupAddress,\n  onChangeGroupPhone,\n  onChangeProfileName,\n  onChangeProfileEmail,\n  onChangeProfileImage,\n  onChangeGroupNameInEdit,\n  onChangeGroupIdInEdit,\n  onChangeGroupAddressInEdit,\n  onChangeGroupPhoneInEdit,\n  onChangeProfileNameInEdit,\n  onChangeProfileEmailInEdit,\n  onChangeProfileImageInEdit,\n  onChangeGroupMemberToInvite,\n  onChangeGroupInSidebar,\n  sign,\n  signIn,\n  signOut,\n  fetchCertificate,\n  fetchCertificates,\n  fetchCertificatesInIssuer,\n  fetchGroups,\n  fetchGroup,\n  fetchGroupInEdit,\n  fetchGroupsInIssuer,\n  fetchCertificateInIssue,\n  fetchProfileInEdit,\n  fetchGroupsInSidebar,\n  invalidateUserCert,\n  updateProfile,\n  updateGroup,\n  issue,\n  registerGroup,\n  registerProfile,\n  inviteMember,\n  disableGroupMember,\n} from \"./actions\";\n//import CertClient from \"./client\"\n\nfunction mapStateToProps(state, props) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    onChangeTitle: (evt) => {\n      dispatch(onChangeTitle(evt));\n    },\n    onChangeDescription: (evt) => {\n      dispatch(onChangeDescription(evt));\n    },\n    onChangeImage: (evt) => {\n      dispatch(onChangeImage(evt));\n    },\n    onChangeGroupName: (evt) => {\n      dispatch(onChangeGroupName(evt));\n    },\n    onChangeGroupAddress: (evt) => {\n      dispatch(onChangeGroupAddress(evt));\n    },\n    onChangeGroupPhone: (evt) => {\n      dispatch(onChangeGroupPhone(evt));\n    },\n    onChangeGroupNameInEdit: (evt) => {\n      dispatch(onChangeGroupNameInEdit(evt));\n    },\n    onChangeGroupAddressInEdit: (evt) => {\n      dispatch(onChangeGroupAddressInEdit(evt));\n    },\n    onChangeGroupPhoneInEdit: (evt) => {\n      dispatch(onChangeGroupPhoneInEdit(evt));\n    },\n    onChangeProfileName: (evt) => {\n      dispatch(onChangeProfileName(evt));\n    },\n    onChangeProfileEmail: (evt) => {\n      dispatch(onChangeProfileEmail(evt));\n    },\n    onChangeProfileImage: (evt) => {\n      dispatch(onChangeProfileImage(evt));\n    },\n    onChangeProfileNameInEdit: (evt) => {\n      dispatch(onChangeProfileNameInEdit(evt));\n    },\n    onChangeProfileEmailInEdit: (evt) => {\n      dispatch(onChangeProfileEmailInEdit(evt));\n    },\n    onChangeProfileImageInEdit: (evt) => {\n      dispatch(onChangeProfileImageInEdit(evt));\n    },\n    onChangeGroup: (evt) => {\n      dispatch(onChangeGroup(evt));\n    },\n    onChangeToInIssue: (evt) => {\n      dispatch(onChangeToInIssue(evt));\n    },\n    onChangeGroupMemberToInvite: (evt) => {\n      dispatch(onChangeGroupMemberToInvite(evt));\n    },\n    onChangeGroupInSidebar: (evt) => {\n      dispatch(onChangeGroupInSidebar(evt));\n    },\n    sign: () => {\n      dispatch(sign());\n    },\n    fetchCertificate: (cid) => {\n      dispatch(fetchCertificate(cid));\n    },\n    fetchCertificates: () => {\n      dispatch(fetchCertificates());\n    },\n    fetchGroups: () => {\n      dispatch(fetchGroups());\n    },\n    fetchGroup: (groupId) => {\n      dispatch(fetchGroup(groupId));\n    },\n    fetchGroupInEdit: (groupId) => {\n      dispatch(fetchGroupInEdit(groupId));\n    },\n    fetchCertificatesInIssuer: () => {\n      dispatch(fetchCertificatesInIssuer());\n    },\n    fetchCertificateInIssue: (certId) => {\n      dispatch(fetchCertificateInIssue(certId));\n    },\n    fetchGroupsInSidebar: () => {\n      dispatch(fetchGroupsInSidebar());\n    },\n    fetchProfileInEdit: () => {\n      dispatch(fetchProfileInEdit());\n    },\n    signIn: () => {\n      dispatch(signIn());\n    },\n    registerGroup: () => {\n      dispatch(registerGroup());\n    },\n    updateGroup: () => {\n      dispatch(updateGroup());\n    },\n    updateProfile: () => {\n      dispatch(updateProfile());\n    },\n    registerProfile: () => {\n      dispatch(registerProfile());\n    },\n    inviteMember: () => {\n      dispatch(inviteMember());\n    },\n    issue: (certId) => {\n      dispatch(issue(certId));\n    },\n    disableGroupMember: (groupId, address) => {\n      dispatch(disableGroupMember(groupId, address));\n    },\n    invalidateUserCert: (userCertId) => {\n      dispatch(invalidateUserCert(userCertId));\n    },\n    signOut: () => {\n      dispatch(signOut());\n    }\n  }\n}\n\nconst RxApp = connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <RxApp />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}