{"version":3,"sources":["logo.svg","history.js","Header.js","views/Top.js","views/SignIn.js","views/Registration.js","views/Certificates.js","util/ipfs.js","views/Certificate.js","views/NewCert.js","views/NewProfile.js","views/EditProfile.js","views/NewGroup.js","views/EditGroup.js","views/GroupMembers.js","views/Issuer.js","views/Issue.js","App.js","reportWebVitals.js","initialState.js","gxcert-client.js","store.js","reducer.js","torus.js","config.js","actions.js","index.js"],"names":["history","Header","props","className","to","onClick","push","Top","SignIn","src","signIn","Registration","Certificates","this","fetchCertificates","userCerts","length","map","userCert","index","userCertId","certificate","imageUrl","title","timestamp","Date","toISOString","from","React","Component","ipfs","IpfsHttpClient","host","port","protocol","createImageUrlFromUint8Array","arr","blob","Blob","window","URL","webkitURL","createObjectURL","concatBuffer","buffer1","buffer2","tmp","Uint8Array","byteLength","set","buffer","getImageOnIpfs","ipfsHash","a","async","get","response","data","console","log","content","ArrayBuffer","url","Certificate","parseInt","match","params","id","fetchCertificate","certificateImage","group","name","description","NewCert","fetchGroups","image","err","error","onChange","onChangeGroup","hidden","groups","value","groupId","toString","type","onChangeTitle","onChangeDescription","onChangeImage","sign","NewProfile","for","onChangeProfileImage","onChangeProfileName","onChangeProfileEmail","registerProfile","EditProfile","fetchProfile","updateProfile","NewGroup","onChangeGroupName","onChangeGroupAddress","onChangeGroupPhone","registerGroup","EditGroup","fetchGroup","updateGroup","GroupMembers","that","onChangeGroupMemberToInvite","inviteMember","members","member","address","disableGroupMember","Issuer","certificates","profile","invalidateUserCert","Issue","certId","onChangeToInIssue","issue","App","exact","path","render","routeProps","state","groupsInIssuer","certificatesInIssuer","fetchCertificatesInIssuer","certificateInIssue","fetchCertificateInIssue","groupInEdit","fetchGroupInEdit","onChangeGroupId","onChangeGroupIdInEdit","onChangeGroupNameInEdit","onChangeGroupAddressInEdit","profileImage","profileInEdit","profileName","profileNameInEdit","profileEmail","profileEmailInEdit","profileImageInEdit","fetchProfileInEdit","onChangeProfileNameInEdit","onChangeProfileEmailInEdit","onChangeProfileIcon","onChangeProfileImageInEdit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","toInIssue","groupName","groupMemberToInvite","groupAddress","groupPhone","groupIdInEdit","groupNameInEdit","groupAddressInEdit","groupPhoneInEdit","groupInIssuer","gxCert","persistConfig","key","storage","sessionStorage","persistedReducer","persistReducer","action","Object","assign","payload","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","persistStore","torusClient","torus","Torus","init","buildEnv","enableLogging","network","chainId","networkName","showTorusButton","enabledVerifiers","google","facebook","reddit","twitch","discord","login","web3","Web3","provider","gmail","getPublicAddress","verifier","verifierId","config","web3Host","contractAddress","gxApi","gxCertWithoutLogin","GxCertClient","getGxCertWithoutLogin","isInitialized","getGxCert","Error","getMyAddress","wait","Promise","resolve","reject","setTimeout","RxApp","connect","dispatch","evt","getState","target","file","files","reader","FileReader","onload","result","readAsArrayBuffer","onChangeGroupPhoneInEdit","alert","uploadImageToIpfs","imageCid","context","isCertificate","signed","signCertificate","createCert","cid","getUserCert","getGroup","getProfile","getReceivedUserCerts","i","getGroups","icon","catch","getGroupCerts","concat","getIssuedUserCerts","j","getCert","email","createGroup","residence","phone","signGroup","signedGroup","newProfile","signProfileForUpdating","signedProfile","iconImage","signProfile","createProfile","signerAddress","getPublicAddressByGoogle","signMemberAddressForInviting","signedMember","inviteMemberToGroup","toEmail","signUserCertificate","createUserCert","signMemberAddressForDisabling","signedAddress","signUserCertForInvalidation","signedUserCert","withRouter","ReactDOM","document","getElementById"],"mappings":"uRAAe,I,QCEAA,E,MAAAA,K,eCaAC,MAZf,SAAgBC,GACd,OACE,yBAAQC,UAAU,aAAlB,UACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,OAAvB,oBACA,cAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,mBAA5B,sBAEF,qBAAKA,UAAU,iBAAiBE,QAAS,kBAAML,EAAQM,KAAK,YAA5D,yBCYSC,MAnBf,WACE,OACE,sBAAKJ,UAAU,MAAf,UACE,qBAAKA,UAAU,aAGf,sBAAKA,UAAU,YAAf,UACE,mBAAGA,UAAU,UAAb,kGACA,mBAAGA,UAAU,gBAAb,8SACA,cAAC,IAAD,CAAMC,GAAG,UAAT,SACE,qBAAKD,UAAU,UAAf,8BCDKK,MAXf,SAAgBN,GACd,OACE,qBAAKC,UAAU,UAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,kBAAb,4UACA,qBAAKM,IAAI,cAAcJ,QAASH,EAAMQ,eCe/BC,ICyBAC,E,kDA1Cb,aAAe,wC,qDAGf,WACEC,KAAKX,MAAMY,sB,oBAEb,WACE,OACE,qBAAKX,UAAU,eAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,mBAAGA,UAAU,qBAAb,gCAGA,sBAAKA,UAAU,oBAAf,UACoC,IAAhCU,KAAKX,MAAMa,UAAUC,OAAe,mBAAGb,UAAU,wBAAb,oCAAkE,GACtGU,KAAKX,MAAMa,UAAUE,KAAI,SAACC,EAAUC,GACpC,OACE,cAAC,IAAD,CAAMf,GAAI,UAAYc,EAASE,WAA/B,SACE,sBAAKjB,UAAU,yBAAf,UACE,qBAAKM,IAAKS,EAASG,YAAYC,SAAUnB,UAAU,gCACnD,sBAAKA,UAAU,gCAAf,UACE,mBAAGA,UAAU,+BAAb,SACGe,EAASG,YAAYE,QAExB,mBAAGpB,UAAU,8BAAb,SACIe,EAASG,YAAYG,UAAa,IAAIC,KAAKP,EAASG,YAAYG,WAAYE,cAAgB,KAEhG,mBAAGvB,UAAU,4BAAb,SACIe,EAASG,YAAYM,8B,GA7BpBC,IAAMC,W,iCCF3BC,E,MAAOC,CAAe,CAC1BC,KAAM,iBACNC,KAAM,KACNC,SAAU,UAiBZ,SAASC,EAA6BC,GACpC,IAAMC,EAAO,IAAIC,KAAK,CAACF,IAGvB,OAFmBG,OAAOC,KAAOD,OAAOE,WACZC,gBAAgBL,GAG9C,IAAIM,EAAe,SAAUC,EAASC,GACpC,IAAIC,EAAM,IAAIC,WAAWH,EAAQI,WAAaH,EAAQG,YAGtD,OAFAF,EAAIG,IAAI,IAAIF,WAAWH,GAAU,GACjCE,EAAIG,IAAI,IAAIF,WAAWF,GAAUD,EAAQI,YAClCF,EAAII,QAGb,SAAeC,EAAeC,GAA9B,6CAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACyBvB,EAAKyB,IAAIH,IADlC,OACQI,EADR,wCAE2BA,GAF3B,yBAAAH,EAAA,4DAAAA,EAAA,sDAEmBI,EAFnB,EAGIC,QAAQC,IAAIF,GACRG,EAAU,IAAIC,YAAY,GAJlC,kCAK8BJ,EAAKG,SALnC,2BAAAP,EAAA,6DAAAA,EAAA,sDAMMO,EAAUjB,EAAaiB,EAN7B,4LAAAP,EAAA,0IAQUS,EAAM3B,EAA6ByB,GAR7C,kBASWE,GATX,uLAAAT,EAAA,4JAWS,MAXT,6G,ICqCeU,E,kDAhEb,aAAe,wC,qDAGf,WACE,IAAM3C,EAAa4C,SAASnD,KAAKX,MAAM+D,MAAMC,OAAOC,IACpDtD,KAAKX,MAAMkE,iBAAiBhD,K,oBAE9B,WAEE,OADAsC,QAAQC,IAAI9C,KAAKX,MAAMgB,UAErB,qBAAKf,UAAU,cAAf,SACMU,KAAKX,MAAMgB,UAAaL,KAAKX,MAAMgB,SAASG,YAK5C,sBAAKlB,UAAU,sBAAf,UACE,mBAAGA,UAAU,oBAAb,SACGU,KAAKX,MAAMgB,SAASG,YAAYE,QAEnC,qBAAKd,IAAKI,KAAKX,MAAMmE,iBAAkBlE,UAAU,qBACjD,wBAAOA,UAAU,qBAAjB,UACE,+BACE,0CACA,6BACIU,KAAKX,MAAMgB,SAASG,YAAYiD,MAAazD,KAAKX,MAAMgB,SAASG,YAAYiD,MAAMC,KAA3C,QAG9C,+BACE,sCACA,6BACI1D,KAAKX,MAAMgB,SAASd,QAG1B,+BACE,yCACA,6BACGS,KAAKX,MAAMgB,SAASG,YAAYE,WAGrC,+BACE,+CACA,6BAAKV,KAAKX,MAAMgB,SAASG,YAAYmD,iBAEvC,+BACE,6CACA,6BAAM,IAAI/C,KAAKuC,SAAyC,IAAhCnD,KAAKX,MAAMgB,SAASM,YAAoBE,sBAGpE,sBAAKvB,UAAU,sBAAf,UACE,qBAAKA,UAAU,qBAAf,+CAGA,qBAAKA,UAAU,qBAAf,iEAzCJ,qBAAKA,UAAU,sBAAf,SACE,mBAAGA,UAAU,wBAAb,4C,GAdYyB,IAAMC,WCsEjB4C,E,kDAvEb,aAAe,wC,qDAGf,WACE5D,KAAKX,MAAMwE,gB,oBAEb,WAAU,IAAD,OACHpD,EAAW,GACf,IACEA,EAAWa,EAA6BtB,KAAKX,MAAMyE,OACnD,MAAMC,GACNlB,QAAQmB,MAAMD,GAEhB,OACE,sBAAKzE,UAAU,WAAf,UACE,qBAAKA,UAAU,UAAf,SACE,+BACE,oBAAIA,UAAU,gBAAd,mBACA,6BAAI,cAAC,IAAD,CAAMC,GAAG,SAAT,2BACJ,yCACA,gDAGJ,sBAAKD,UAAU,mBAAf,UACE,mBAAGA,UAAU,iBAAb,kDAGA,mBAAGA,UAAU,uBAAb,oWAGA,sBAAKA,UAAU,gBAAf,UACE,mBAAGA,UAAU,sBAAb,mBAGA,yBAAQA,UAAU,sBAAsB2E,SAAUjE,KAAKX,MAAM6E,cAA7D,UACE,wBAAQC,QAAM,EAAd,0BACEnE,KAAKX,MAAM+E,OAAOhE,KAAI,SAAAqD,GACtB,OACE,wBAAQY,MAAOZ,EAAMa,QAAQC,WAA7B,SAA0Cd,EAAMC,UAGpD,wBAAQW,MAAM,MAAd,iCAEF,mBAAG/E,UAAU,sBAAb,kCAGA,uBAAOkF,KAAK,OAAOlF,UAAU,qBAAqB2E,SAAUjE,KAAKX,MAAMoF,gBACvE,mBAAGnF,UAAU,sBAAb,wCAGA,0BAAUA,UAAU,4BAA4B2E,SAAUjE,KAAKX,MAAMqF,sBACrE,mBAAGpF,UAAU,sBAAb,+BAGA,qBAAKM,IAAKa,EAAUnB,UAAU,wBAC9B,qBAAKA,UAAU,+BAAf,SACE,wBAAOA,UAAU,iCAAjB,UACE,uBAAOkF,KAAK,OAAOlF,UAAU,2BAA2B2E,SAAUjE,KAAKX,MAAMsF,gBAD/E,gCAKF,qBAAKrF,UAAU,kBAAkBE,QAAS,kBAAM,EAAKH,MAAMuF,QAA3D,uC,GA9DU7D,IAAMC,WCqCb6D,E,kDArCb,aAAe,wC,0CAGf,WACE,IAAIpE,EAAW,GACf,IACEA,EAAWa,EAA6BtB,KAAKX,MAAMyE,OACnD,MAAMC,GACNlB,QAAQmB,MAAMD,GAEhB,OACE,qBAAKzE,UAAU,cAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,mBAAGA,UAAU,oBAAb,kDAGA,sBAAKA,UAAU,mBAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,uBAAOwF,IAAI,8BAAX,SACE,qBAAKlF,IAAKa,EAAUnB,UAAU,6BAEhC,uBAAOgE,GAAG,8BAA8BkB,KAAK,OAAOP,SAAUjE,KAAKX,MAAM0F,0BAE3E,mBAAGzF,UAAU,yBAAb,kBACA,uBAAOkF,KAAK,OAAOlF,UAAU,wBAAwB2E,SAAUjE,KAAKX,MAAM2F,sBAC1E,mBAAG1F,UAAU,yBAAb,oBACA,uBAAOkF,KAAK,OAAOlF,UAAU,yBAAyB2E,SAAUjE,KAAKX,MAAM4F,uBAC3E,qBAAK3F,UAAU,kBAAkBE,QAASQ,KAAKX,MAAM6F,gBAArD,sC,GA5BanE,IAAMC,WC2ChBmE,E,kDAzCb,aAAe,wC,qDAGf,WACEnF,KAAKX,MAAM+F,iB,oBAEb,WACE,IAAI3E,EAAW,GACf,IACEA,EAAWa,EAA6BtB,KAAKX,MAAMyE,OACnD,MAAMC,GACNlB,QAAQmB,MAAMD,GAGhB,OADAlB,QAAQC,IAAI9C,KAAKX,OAEf,qBAAKC,UAAU,eAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,mBAAGA,UAAU,qBAAb,8DAGA,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,0BAAf,UACE,uBAAOwF,IAAI,+BAAX,SACE,qBAAKlF,IAAKa,EAAUnB,UAAU,8BAEhC,uBAAOgE,GAAG,+BAA+BkB,KAAK,OAAOP,SAAUjE,KAAKX,MAAM0F,0BAE5E,mBAAGzF,UAAU,0BAAb,kBACA,uBAAOkF,KAAK,OAAOlF,UAAU,yBAAyB2E,SAAUjE,KAAKX,MAAM2F,sBAC3E,mBAAG1F,UAAU,0BAAb,oBACA,uBAAOkF,KAAK,OAAOlF,UAAU,0BAA0B2E,SAAUjE,KAAKX,MAAM4F,uBAC5E,qBAAK3F,UAAU,kBAAkBE,QAASQ,KAAKX,MAAMgG,cAArD,sC,GAhCctE,IAAMC,WC2BjBsE,E,kDA5Bb,aAAe,wC,0CAIf,WACE,OACE,qBAAKhG,UAAU,YAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,mBAAGA,UAAU,kBAAb,kDACA,mBAAGA,UAAU,wBAAb,2PACA,sBAAKA,UAAU,iBAAf,UACE,mBAAGA,UAAU,uBAAb,kBACA,uBAAOkF,KAAK,OAAOlF,UAAU,sBAAsB2E,SAAUjE,KAAKX,MAAMkG,oBACxE,mBAAGjG,UAAU,uBAAb,qBACA,uBAAOkF,KAAK,OAAOlF,UAAU,yBAAyB2E,SAAUjE,KAAKX,MAAMmG,uBAC3E,mBAAGlG,UAAU,uBAAb,mBACA,uBAAOkF,KAAK,OAAOlF,UAAU,uBAAuB2E,SAAUjE,KAAKX,MAAMoG,qBAEzE,qBAAKnG,UAAU,kBAAkBE,QAASQ,KAAKX,MAAMqG,cAArD,sC,GAnBW3E,IAAMC,WCgDd2E,E,kDA9Cb,aAAe,wC,qDAIf,WACE,IAAMrB,EAAUnB,SAASnD,KAAKX,MAAM+D,MAAMC,OAAOiB,SACjDtE,KAAKX,MAAMuG,WAAWtB,K,oBAExB,WACE,OAAKtE,KAAKX,MAAMoE,MAOd,sBAAKnE,UAAU,aAAf,UACE,qBAAKA,UAAU,UAAf,SACE,+BACE,oBAAIA,UAAU,gBAAd,mBACA,6BAAI,cAAC,IAAD,CAAMC,GAAG,SAAT,2BACJ,yCACA,gDAGJ,sBAAKD,UAAU,qBAAf,UACE,oBAAGA,UAAU,mBAAb,gCAAqCU,KAAKX,MAAMoE,MAAMC,KAAtD,wBACA,mBAAGpE,UAAU,yBAAb,2PACA,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,wBAAb,kBACA,uBAAOkF,KAAK,OAAOlF,UAAU,uBAAuB2E,SAAUjE,KAAKX,MAAMkG,oBACzE,mBAAGjG,UAAU,wBAAb,qBACA,uBAAOkF,KAAK,OAAOlF,UAAU,0BAA0B2E,SAAUjE,KAAKX,MAAMmG,uBAC5E,mBAAGlG,UAAU,wBAAb,mBACA,uBAAOkF,KAAK,OAAOlF,UAAU,wBAAwB2E,SAAUjE,KAAKX,MAAMoG,qBAE1E,qBAAKnG,UAAU,kBAAkBE,QAASQ,KAAKX,MAAMwG,YAArD,mCAzBJ,qBAAKvG,UAAU,mB,GAZCyB,IAAMC,WC4Df8E,E,kDA1Db,aAAe,wC,qDAGf,WACE9F,KAAKX,MAAMuG,WAAWzC,SAASnD,KAAKX,MAAM+D,MAAMC,OAAOC,O,oBAGzD,WAAU,IAAD,OACP,OACE,sBAAKhE,UAAU,gBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,+BACE,oBAAIA,UAAU,gBAAd,mBACA,6BAAI,cAAC,IAAD,CAAMC,GAAG,SAAT,2BACJ,yCACA,gDAGJ,qBAAKD,UAAU,wBAAf,SACK,WACD,IAAMyG,EAAO,EACb,OAAK,EAAK1G,MAAMoE,MAMd,gCACE,oBAAGnE,UAAU,sBAAb,UAAqC,EAAKD,MAAMoE,MAAMC,KAAtD,oCACA,uBAAOc,KAAK,OAAOlF,UAAU,uBAAuB2E,SAAU,EAAK5E,MAAM2G,8BACzE,wBAAQ1G,UAAU,8BAA8BE,QAAS,EAAKH,MAAM4G,aAApE,oBACA,qBAAK3G,UAAU,qBAAf,SACI,EAAKD,MAAMoE,MAAMyC,QAAQ9F,KAAI,SAAA+F,GAC7B,OACE,sBAAK7G,UAAU,0BAAf,UACE,qBAAKM,IAAKuG,EAAO1F,SAAUnB,UAAU,iCACrC,sBAAKA,UAAU,iCAAf,UACE,mBAAGA,UAAU,+BAAb,SACG6G,EAAOzC,OAEV,mBAAGpE,UAAU,kCAAb,SACG6G,EAAOC,aAGZ,qBAAK9G,UAAU,kCAAkCE,QAAS,kBAAMuG,EAAK1G,MAAMgH,mBAAmBN,EAAK1G,MAAMoE,MAAMa,QAAS6B,EAAOC,UAA/H,2CArBR,iDAJH,Y,GArBcrF,IAAMC,WCkElBsF,E,kDAjEb,aAAe,wC,qDAGf,WACEtG,KAAKX,MAAMY,sB,oBAEb,WAAU,IAAD,OACP,OACE,sBAAKX,UAAU,SAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,cAAC,IAAD,CAAMC,GAAG,OAAT,SACE,qBAAKD,UAAU,0BAAf,wCAEF,uBACA,mBAAGA,UAAU,4BAAb,gCACA,qBAAKA,UAAU,2BAAf,SAEIU,KAAKX,MAAMkH,aAAanG,KAAI,SAAAI,GAC1B,OACE,sBAAKlB,UAAU,gCAAf,UACE,qBAAKM,IAAKY,EAAYC,SAAUnB,UAAU,uCAC1C,mBAAGA,UAAU,sCAAb,SACGkB,EAAYE,QAEf,cAAC,IAAD,CAAMnB,GAAI,UAAYiB,EAAY8C,GAAlC,SACE,qBAAKhE,UAAU,sCAAf,uCAQZU,KAAKX,MAAMkH,aAAanG,KAAI,SAACI,GAC7B,OACE,sBAAKlB,UAAU,qBAAf,UACE,mBAAGA,UAAU,2BAAb,SACGkB,EAAYE,QAEf,qBAAKpB,UAAU,0BAAf,SACIkB,EAAYN,UAAUE,KAAI,SAACC,EAAUC,GACrC,OACE,sBAAKhB,UAAU,yBAAf,UACE,qBAAKM,IAAKS,EAASmG,QAAUnG,EAASmG,QAAQ/F,SAAW,GAAInB,UAAU,sCACvE,sBAAKA,UAAU,sCAAf,UACE,mBAAGA,UAAU,oCAAb,SACGe,EAASmG,QAAUnG,EAASmG,QAAQ9C,KAAO,KAE9C,mBAAGpE,UAAU,uCAAb,SACIe,EAASd,QAGf,qBAAKD,UAAU,0CAA0CE,QAAS,kBAAM,EAAKH,MAAMoH,mBAAmBpG,EAASE,aAA/G,qD,GArDDQ,IAAMC,WC+BZ0F,E,kDA/Bb,aAAe,wC,qDAGf,WACE1G,KAAK2G,OAASxD,SAASnD,KAAKX,MAAM+D,MAAMC,OAAOsD,QAC/C3G,KAAKX,MAAMkE,iBAAiBvD,KAAK2G,U,oBAEnC,WAAU,IAAD,OACP,OACE,qBAAKrH,UAAU,QAAf,SACKU,KAAKX,MAAMmB,YAKZ,sBAAKlB,UAAU,gBAAf,UACE,oBAAGA,UAAU,cAAb,UACGU,KAAKX,MAAMmB,YAAYE,MAD1B,wBAGA,mBAAGpB,UAAU,mBAAb,yBACA,sBAAKA,UAAU,aAAf,UACE,uBAAOkF,KAAK,OAAOlF,UAAU,gBAAgB2E,SAAUjE,KAAKX,MAAMuH,oBAClE,wBAAQtH,UAAU,mBAAmBE,QAAU,WAAQ,EAAKH,MAAMwH,MAAM,EAAKF,SAA7E,gCAXJ,qBAAKrH,UAAU,gBAAf,SACE,mBAAGA,UAAU,wBAAb,4C,GAbQyB,IAAMC,W,iBC2IX8F,E,kDAzHb,aAAe,wC,0CAGf,WACE,IAAMf,EAAO/F,KACb,OACE,sBAAKV,UAAU,MAAf,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyH,OAAO,EAAMC,KAAK,IAAIC,OAAS,SAACC,GACrC,MAA8B,KAA1BnB,EAAK1G,MAAM8H,MAAMrG,KAEjB,cAAC,EAAD,IAGI,cAAC,EAAD,2BACFoG,GADE,IAENhH,UAAW6F,EAAK1G,MAAM8H,MAAMZ,aAC5BtG,kBAAmB8F,EAAK1G,MAAMY,wBAIlC,cAAC,IAAD,CAAO8G,OAAO,EAAMC,KAAK,UAAUC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BACtDA,GADsD,IAE1DrH,OAAQkG,EAAK1G,MAAMQ,aAGrB,cAAC,IAAD,CAAOkH,OAAO,EAAMC,KAAK,QAAQC,OAAS,kBAAM,cAAC,EAAD,CAC5CpD,YAAakC,EAAK1G,MAAMwE,YACxBY,cAAesB,EAAK1G,MAAMoF,cAC1BC,oBAAqBqB,EAAK1G,MAAMqF,oBAChCC,cAAeoB,EAAK1G,MAAMsF,cAC1BT,cAAe6B,EAAK1G,MAAM6E,cAC1BU,KAAMmB,EAAK1G,MAAMuF,KACjB9D,KAAMiF,EAAK1G,MAAM8H,MAAMrG,KACvBgD,MAAOiC,EAAK1G,MAAM8H,MAAMrD,MACxBM,OAAQ2B,EAAK1G,MAAM8H,MAAM/C,YAG7B,cAAC,IAAD,CAAO2C,OAAO,EAAMC,KAAK,UAAUC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BACtDA,GADsD,IAE1D9C,OAAQ2B,EAAK1G,MAAM8H,MAAMC,eACzBb,aAAcR,EAAK1G,MAAM8H,MAAME,qBAC/BpH,kBAAmB8F,EAAK1G,MAAMiI,0BAC9BT,MAAOd,EAAK1G,MAAMwH,MAClBJ,mBAAoBV,EAAK1G,MAAMoH,yBAGjC,cAAC,IAAD,CAAOM,OAAO,EAAMC,KAAK,iBAAiBC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BAC7DA,GAD6D,IAEjE1G,YAAauF,EAAK1G,MAAM8H,MAAMI,mBAC9BhE,iBAAkBwC,EAAK1G,MAAMmI,wBAC7BZ,kBAAmBb,EAAK1G,MAAMuH,kBAC9BC,MAAOd,EAAK1G,MAAMwH,YAGpB,cAAC,IAAD,CAAOE,OAAO,EAAMC,KAAK,aAAaC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BAEzDA,GAFyD,IAG7D7G,SAAU0F,EAAK1G,MAAM8H,MAAM3G,YAC3BgD,iBAAkBuC,EAAK1G,MAAM8H,MAAM3D,iBACnCD,iBAAkBwC,EAAK1G,MAAMkE,uBAG/B,cAAC,IAAD,CAAOwD,OAAO,EAAMC,KAAK,aAAaC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BACzDA,GADyD,IAE7DxB,cAAeK,EAAK1G,MAAMqG,cAC1BH,kBAAmBQ,EAAK1G,MAAMkG,kBAC9BC,qBAAsBO,EAAK1G,MAAMmG,qBACjCC,mBAAoBM,EAAK1G,MAAMoG,yBAGjC,cAAC,IAAD,CAAOsB,OAAO,EAAMC,KAAK,uBAAuBC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BACnEA,GADmE,IAEvEzD,MAAOsC,EAAK1G,MAAM8H,MAAMM,YACxB5B,YAAaE,EAAK1G,MAAMwG,YACxBD,WAAYG,EAAK1G,MAAMqI,iBACvBC,gBAAiB5B,EAAK1G,MAAMuI,sBAC5BrC,kBAAmBQ,EAAK1G,MAAMwI,wBAC9BrC,qBAAsBO,EAAK1G,MAAMyI,2BACjCrC,mBAAoBM,EAAK1G,MAAMoG,yBAGjC,cAAC,IAAD,CAAOsB,OAAO,EAAMC,KAAK,aAAaC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BACzDA,GADyD,IAE7DzD,MAAOsC,EAAK1G,MAAM8H,MAAM1D,MACxBmC,WAAYG,EAAK1G,MAAMuG,WACvBK,aAAcF,EAAK1G,MAAM4G,aACzBD,4BAA6BD,EAAK1G,MAAM2G,4BACxCK,mBAAoBN,EAAK1G,MAAMgH,yBAGjC,cAAC,IAAD,CAAOU,OAAO,EAAMC,KAAK,eAAeC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BAC3DA,GAD2D,IAE/DpD,MAAOiC,EAAK1G,MAAM8H,MAAMY,aACxB7C,gBAAiBa,EAAK1G,MAAM6F,gBAC5BF,oBAAqBe,EAAK1G,MAAM2F,oBAChCC,qBAAsBc,EAAK1G,MAAM4F,qBACjCF,qBAAsBgB,EAAK1G,MAAM0F,2BAGnC,cAAC,IAAD,CAAOgC,OAAO,EAAMC,KAAK,gBAAgBC,OAAS,SAACC,GAAD,OAAgB,cAAC,EAAD,2BAC5DA,GAD4D,IAEhEpD,MAAOiC,EAAK1G,MAAM8H,MAAMY,aACxB1C,cAAeU,EAAK1G,MAAMgG,cAC1BmB,QAAST,EAAK1G,MAAM8H,MAAMa,cAC1BC,YAAalC,EAAK1G,MAAM8H,MAAMe,kBAC9BC,aAAcpC,EAAK1G,MAAM8H,MAAMiB,mBAC/BL,aAAchC,EAAK1G,MAAM8H,MAAMkB,mBAC/BjD,aAAcW,EAAK1G,MAAMiJ,mBACzBtD,oBAAqBe,EAAK1G,MAAMkJ,0BAChCtD,qBAAsBc,EAAK1G,MAAMmJ,2BACjCC,oBAAqB1C,EAAK1G,MAAMqJ,2C,GAjH1B3H,IAAMC,WCPT2H,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iBC2BCQ,EAjCM,CACnBtI,KAAM,GACNvB,GAAI,GACJmB,MAAO,GACPiD,YAAa,GACbG,MAAO,KACPuF,UAAW,GACX/E,QAAS,KACTmD,YAAa,KACb6B,UAAW,GACXC,oBAAqB,GACrBC,aAAc,GACdC,WAAY,GACZC,cAAe,GACfC,gBAAiB,GACjBC,mBAAoB,GACpBC,iBAAkB,GAClBC,cAAe,KACftJ,YAAa,GACbgD,iBAAkB,GAClB+C,aAAc,GACdc,qBAAsB,GACtBE,mBAAoB,KACpB9D,MAAO,KACPW,OAAQ,GACR6D,YAAa,GACbE,aAAc,GACdJ,aAAc,GACdG,kBAAmB,GACnBE,mBAAoB,GACpBC,mBAAoB,I,ICvBlB0B,E,2BCDEC,EAAgB,CACpBC,IAAK,OACLC,Q,OAASC,GAGLC,EAAmBC,YAAeL,GCTzB,WAA8C,IAA7B7C,EAA4B,uDAAtBiC,EAAckB,EAAQ,uCAC1D,OAAOA,EAAO9F,MACZ,IAAK,kBACH,OAAO+F,OAAOC,OAAO,GAAIrD,EAAO,CAC9BzG,MAAO4J,EAAOG,UAElB,IAAK,wBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BxD,YAAa2G,EAAOG,UAExB,IAAK,kBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BrD,MAAOwG,EAAOG,UAElB,IAAK,kBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9B7C,QAASgG,EAAOG,UAEpB,IAAK,uBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BmC,UAAWgB,EAAOG,UAEtB,IAAK,0BACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BqC,aAAcc,EAAOG,UAEzB,IAAK,wBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BsC,WAAYa,EAAOG,UAEvB,IAAK,mCACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BoC,oBAAqBe,EAAOG,UAEhC,IAAK,6BACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BuC,cAAeY,EAAOG,UAE1B,IAAK,+BACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BwC,gBAAiBW,EAAOG,UAE5B,IAAK,kCACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9ByC,mBAAoBU,EAAOG,UAE/B,IAAK,gCACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9B0C,iBAAkBS,EAAOG,UAE7B,IAAK,yBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9Bc,YAAaqC,EAAOG,UAExB,IAAK,0BACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BgB,aAAcmC,EAAOG,UAEzB,IAAK,0BACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BY,aAAcuC,EAAOG,UAEzB,IAAK,iCACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9Be,kBAAmBoC,EAAOG,UAE9B,IAAK,kCACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BiB,mBAAoBkC,EAAOG,UAE/B,IAAK,kCACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BkB,mBAAoBiC,EAAOG,UAE/B,IAAK,wBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BkC,UAAWiB,EAAOG,UAEtB,IAAK,YACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BrG,KAAMwJ,EAAOG,UAEjB,IAAK,sBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9B3G,YAAa8J,EAAOG,UAExB,IAAK,+BACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BI,mBAAoB+C,EAAOG,UAE/B,IAAK,uBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BZ,aAAc+D,EAAOG,UAEzB,IAAK,4BACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9B3D,iBAAkB8G,EAAOG,UAE7B,IAAK,iBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9B/C,OAAQkG,EAAOG,UAEnB,IAAK,gBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9B1D,MAAO6G,EAAOG,UAElB,IAAK,wBACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BM,YAAa6C,EAAOG,UAExB,IAAK,iCACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9BE,qBAAsBiD,EAAOG,UAEjC,IAAK,0BACH,OAAOF,OAAOC,OAAO,GAAIrD,EAAO,CAC9Ba,cAAesC,EAAOG,UAE1B,QACE,OAAOrB,MD5GPsB,EAAiBhJ,OAAOiJ,sCAAwCC,IAEhEC,EAAQC,YACZC,YAAgB,CACd5D,MAAOiD,IAEThB,EACAsB,EAAeM,YAAgBC,OAIlBJ,GADUK,YAAaL,GACvBA,G,sEE8BAM,GADK,I,WAlDlB,aAAe,oBACbnL,KAAKoL,MAAQ,IAAIC,K,+EAEnB,sBAAA7I,EAAA,sEACQxC,KAAKoL,MAAME,KAAK,CACpBC,SAAU,aACVC,eAAe,EACfC,QAAS,CACPtK,KAAM,0CACNuK,QAAS,MACTC,YAAa,kBAEfC,iBAAiB,EACjBC,iBAAkB,CAChBC,QAAQ,EACRC,UAAS,EACTC,QAAQ,EACRC,QAAQ,EACRC,SAAS,KAff,gD,gHA+BA,4BAAA1J,EAAA,sEACyBxC,KAAKoL,MAAMe,QADpC,cACQxJ,EADR,OAEEE,QAAQC,IAAIH,GACZE,QAAQC,IAAI9C,KAAKoL,OACjBpL,KAAKoM,KAAO,IAAIC,KAAKrM,KAAKoL,MAAMkB,UAChCzJ,QAAQC,IAAI9C,KAAKoM,MALnB,kBAMSpM,KAAKoM,MANd,gD,mIAQA,WAA+BG,GAA/B,SAAA/J,EAAA,sEACexC,KAAKoL,MAAMoB,iBAAiB,CACvCC,SAAU,SACVC,WAAYH,IAHhB,wF,+DC5BaI,GARJ,CACPC,SAAU,0CACVC,gBAAiB,6CACjBC,MAAO,kEJNPC,GAAqB,IAAIC,KAAa,IAAIX,KAAKM,GAAOC,UAAWD,GAAOE,iB,SAG7DI,K,8EAAf,sBAAAzK,EAAA,yDACOuK,GAAmBG,gBAD1B,gCAEUH,GAAmBzB,OAF7B,gCAISyB,IAJT,4C,+BAMeI,K,8EAAf,4BAAA3K,EAAA,+EAGU2I,GAAYG,OAHtB,uBAIiBH,GAAYgB,QAJ7B,OAIIC,EAJJ,uDAMIvJ,QAAQmB,MAAR,MANJ,WAQEnB,QAAQC,IAAIsJ,IACRA,EATN,kCAWMrC,EAAS,IAAIiD,KAAaZ,EAAMO,GAAOE,gBAAiBF,GAAOG,OAXrE,UAYY/C,EAAOuB,OAZnB,iEAcMzI,QAAQmB,MAAR,MACM,IAAIoJ,MAAM,8BAftB,WAkBiB,OAAXrD,EAlBN,uBAmBU,IAAIqD,MAAM,8BAnBpB,WAqBOrD,EAAO3D,QArBd,kCAsBU2D,EAAOsD,eAtBjB,iCAwBStD,GAxBT,kE,sBKXA,SAASuD,KACP,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTF,MACC,QC+JP,IAAMG,GAAQC,aArHd,SAAyBzG,EAAO9H,GAC9B,OAAO8H,KAGT,SAA4B0G,EAAUxO,GACpC,MAAO,CACLoF,cAAe,SAACqJ,GACdD,ED9CgB,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDAC7BqL,EAAS,CACPrJ,KAAM,kBACNiG,QAASqD,EAAIE,OAAO3J,QAHO,2CAAT,wDC8CPI,CAAcqJ,KAEzBpJ,oBAAqB,SAACoJ,GACpBD,ED3CsB,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDACnCqL,EAAS,CACPrJ,KAAM,wBACNiG,QAASqD,EAAIE,OAAO3J,QAHa,2CAAT,wDC2CbK,CAAoBoJ,KAE/BnJ,cAAe,SAACmJ,GACdD,EDxCgB,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,iBAAAvL,EAAA,sDACvByL,EAAOH,EAAIE,OAAOE,MAAM,IACxBC,EAAS,IAAIC,YACZC,OAAS,WACdR,EAAS,CACPrJ,KAAM,kBACNiG,QAAS0D,EAAOG,UAGpBH,EAAOI,kBAAkBN,GATI,2CAAT,wDCwCPtJ,CAAcmJ,KAEzBvI,kBAAmB,SAACuI,GAClBD,EDWoB,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDACjCqL,EAAS,CACPrJ,KAAM,uBACNiG,QAASqD,EAAIE,OAAO3J,QAHW,2CAAT,wDCXXkB,CAAkBuI,KAE7BtI,qBAAsB,SAACsI,GACrBD,EDeuB,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDACpCqL,EAAS,CACPrJ,KAAM,0BACNiG,QAASqD,EAAIE,OAAO3J,QAHc,2CAAT,wDCfdmB,CAAqBsI,KAEhCrI,mBAAoB,SAACqI,GACnBD,EDkBqB,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDAClCqL,EAAS,CACPrJ,KAAM,wBACNiG,QAASqD,EAAIE,OAAO3J,QAHY,2CAAT,wDClBZoB,CAAmBqI,KAE9BjG,wBAAyB,SAACiG,GACxBD,EDjB0B,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDACvCqL,EAAS,CACPrJ,KAAM,+BACNiG,QAASqD,EAAIE,OAAO3J,QAHiB,2CAAT,wDCiBjBwD,CAAwBiG,KAEnChG,2BAA4B,SAACgG,GAC3BD,EDd6B,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDAC1CqL,EAAS,CACPrJ,KAAM,kCACNiG,QAASqD,EAAIE,OAAO3J,QAHoB,2CAAT,wDCcpByD,CAA2BgG,KAEtCU,yBAA0B,SAACV,GACzBD,EDX2B,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDACxCqL,EAAS,CACPrJ,KAAM,gCACNiG,QAASqD,EAAIE,OAAO3J,QAHkB,2CAAT,wDCWlBmK,CAAyBV,KAEpC9I,oBAAqB,SAAC8I,GACpBD,EDasB,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDACnCqL,EAAS,CACPrJ,KAAM,yBACNiG,QAASqD,EAAIE,OAAO3J,QAHa,2CAAT,wDCbbW,CAAoB8I,KAE/B7I,qBAAsB,SAAC6I,GACrBD,EDiBuB,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDACpCqL,EAAS,CACPrJ,KAAM,0BACNiG,QAASqD,EAAIE,OAAO3J,QAHc,2CAAT,wDCjBdY,CAAqB6I,KAEhC/I,qBAAsB,SAAC+I,GACrBD,EDqBuB,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,iBAAAvL,EAAA,sDAC9ByL,EAAOH,EAAIE,OAAOE,MAAM,IACxBC,EAAS,IAAIC,YACZC,OAAS,WACdR,EAAS,CACPrJ,KAAM,0BACNiG,QAAS0D,EAAOG,UAGpBH,EAAOI,kBAAkBN,GATW,2CAAT,wDCrBdlJ,CAAqB+I,KAEhCvF,0BAA2B,SAACuF,GAC1BD,ED6B4B,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDACzCqL,EAAS,CACPrJ,KAAM,iCACNiG,QAASqD,EAAIE,OAAO3J,QAHmB,2CAAT,wDC7BnBkE,CAA0BuF,KAErCtF,2BAA4B,SAACsF,GAC3BD,EDiC6B,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDAC1CqL,EAAS,CACPrJ,KAAM,kCACNiG,QAASqD,EAAIE,OAAO3J,QAHoB,2CAAT,wDCjCpBmE,CAA2BsF,KAEtCpF,2BAA4B,SAACoF,GAC3BD,EDqC6B,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,iBAAAvL,EAAA,sDACpCyL,EAAOH,EAAIE,OAAOE,MAAM,IACxBC,EAAS,IAAIC,YACZC,OAAS,WACdR,EAAS,CACPrJ,KAAM,kCACNiG,QAAS0D,EAAOG,UAGpBH,EAAOI,kBAAkBN,GATiB,2CAAT,wDCrCpBvF,CAA2BoF,KAEtC5J,cAAe,SAAC4J,GACdD,EDpEgB,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,yDACJ,QAArBsL,EAAIE,OAAO3J,MADc,uBAE3BlF,EAAQM,KAAK,cAFc,0BAK7BoO,EAAS,CACPrJ,KAAM,kBACNiG,QAAStH,SAAS2K,EAAIE,OAAO3J,SAPF,2CAAT,wDCoEPH,CAAc4J,KAEzBlH,kBAAmB,SAACkH,GAClBD,ED5DoB,SAACC,GAAD,8CAAS,WAAOD,GAAP,SAAArL,EAAA,sDACjCqL,EAAS,CACPrJ,KAAM,wBACNiG,QAASqD,EAAIE,OAAO3J,QAHW,2CAAT,sDC4DXuC,CAAkBkH,KAE7B9H,4BAA6B,SAAC8H,GAC5BD,EDwC8B,SAACC,GAAD,8CAAS,WAAOD,EAAUE,GAAjB,SAAAvL,EAAA,sDAC3CqL,EAAS,CACPrJ,KAAM,mCACNiG,QAASqD,EAAIE,OAAO3J,QAHqB,2CAAT,wDCxCrB2B,CAA4B8H,KAEvClJ,KAAM,WACJiJ,ED+WO,uCAAM,WAAOA,EAAUE,GAAjB,yBAAAvL,EAAA,+EAGA2K,KAHA,OAGfpD,EAHe,8DAKflH,QAAQmB,MAAR,MALe,8BAQXmD,EAAQ4G,IAAW5G,MACnBrD,EAAQqD,EAAMrD,MATH,wBAWf2K,MAAM,kBAXS,sDAgBE1E,EAAO2E,kBAAkB5K,GAhB3B,QAgBf6K,EAhBe,iEAkBf9L,QAAQmB,MAAR,MACAyK,MAAM,qCAnBS,8BAsBXjO,EAAc,CAClBoO,QAAS,GACTlO,MAAOyG,EAAMzG,MACbiD,YAAawD,EAAMxD,YACnBG,MAAO6K,EACPrK,QAAS6C,EAAM7C,SAEZyF,EAAO8E,cAAcrO,GA7BT,wBA8BfiO,MAAM,wBA9BS,kCAiCbK,EAAS,KAjCI,oBAmCA/E,EAAOgF,gBAAgBvO,EAAa,CAAE4F,QAAS2D,EAAO3D,UAnCtD,QAmCf0I,EAnCe,iEAqCfjM,QAAQmB,MAAR,MACAyK,MAAM,mCAtCS,sDA0CT1E,EAAOiF,WAAWF,GA1CT,kEA4CfjM,QAAQmB,MAAR,MACAyK,MAAM,0CA7CS,4CAgDXnB,KAhDW,QAiDjBnO,EAAQM,KAAK,UAjDI,iFAAN,0DC7WT8D,iBAAkB,SAAC0L,GD+DE,IAAC1O,EC9DpBsN,GD8DoBtN,EC9DM0O,ED8DP,uCAAgB,WAAOpB,GAAP,yBAAArL,EAAA,6DACvCqL,EAAS,CACPrJ,KAAM,sBACNiG,QAAS,OAH4B,kBAOtBwC,KAPsB,OAOrClD,EAPqC,8DASrClH,QAAQmB,MAAR,MATqC,sDAcpB+F,EAAOmF,YAAY3O,GAdC,QAcrCF,EAdqC,iEAgBrCwC,QAAQmB,MAAR,MAhBqC,kCAmBvC6J,EAAS,CACPrJ,KAAM,sBACNiG,QAASpK,IAELsO,EAAWtO,EAASG,YAAYsD,MAvBC,oBA0BpBxB,EAAeqM,GA1BK,QA0BrClO,EA1BqC,iEA4BrCoC,QAAQmB,MAAR,MA5BqC,kCA+BvC6J,EAAS,CACPrJ,KAAM,4BACNiG,QAAShK,IAjC4B,oBAoCjBsJ,EAAOoF,SAAS9O,EAASG,YAAY8D,SApCpB,QAoC/Bb,EApC+B,OAqCrCpD,EAASG,YAAYiD,MAAQA,EAC7BoK,EAAS,CACPrJ,KAAM,sBACNiG,QAASpK,IAxC0B,0DA2CrCwC,QAAQmB,MAAR,MA3CqC,sDA+Cf+F,EAAOqF,WAAW/O,EAASd,IA/CZ,QA+C/BiH,EA/C+B,OAgDrCnG,EAASd,GAAKiH,EAAQ9C,KACtBmK,EAAS,CACPrJ,KAAM,sBACNiG,QAASpK,IAnD0B,0DAsDrCwC,QAAQmB,MAAR,MAtDqC,4GAAhB,yDC5DrB/D,kBAAmB,WACjB4N,EDsHoB,uCAAM,WAAOA,EAAUE,GAAjB,yBAAAvL,EAAA,yDAC9BqL,EAAS,CACPrJ,KAAM,uBACNiG,QAAS,KAELtD,EAAQ4G,IAAW5G,MAET,MADVf,EAAUe,EAAMrG,OACCsF,EAPO,uBAQ5BjH,EAAQM,KAAK,QARe,mDAabwN,KAba,OAa5BlD,EAb4B,gEAe5BlH,QAAQmB,MAAR,MAf4B,sDAoBV+F,EAAOsF,qBAAqBjJ,GApBlB,QAoB5BlG,EApB4B,iEAsB5B2C,QAAQmB,MAAR,MAtB4B,2BAyB9B,IAzB8B,WAyBrBsL,GACPhN,EAAepC,EAAUoP,GAAG9O,YAAYsD,OAAOgF,MAAK,SAAArI,GAClDP,EAAUoP,GAAG9O,YAAYC,SAAWA,EACpCoN,EAAS,CACPrJ,KAAM,uBACNiG,QAASvK,QALNoP,EAAI,EAAGA,EAAIpP,EAAUC,OAAQmP,IAAM,EAAnCA,GASTzB,EAAS,CACPrJ,KAAM,uBACNiG,QAASvK,IApCmB,kEAAN,0DCpHtB2D,YAAa,WACXgK,ED2Jc,uCAAM,WAAOA,EAAUE,GAAjB,qBAAAvL,EAAA,+EAGP2K,KAHO,OAGtBpD,EAHsB,8DAKtBlH,QAAQmB,MAAR,MALsB,kCAQlBmD,EAAQ4G,IAAW5G,MACnBf,EAAUe,EAAMrG,KATE,oBAYPiJ,EAAOwF,UAAUnJ,GAZV,QAYtBhC,EAZsB,iEActBvB,QAAQmB,MAAR,MAdsB,2BAiBxB6J,EAAS,CACPrJ,KAAM,iBACNiG,QAASrG,IAnBa,iEAAN,0DCzJhBwB,WAAY,SAACtB,GACXuJ,EDsMa,SAACvJ,GAAD,8CAAa,WAAOuJ,EAAUE,GAAjB,qBAAAvL,EAAA,6DAC9BqL,EAAS,CACPrJ,KAAM,gBACNiG,QAAS,OAHmB,kBAObwC,KAPa,OAO5BlD,EAP4B,8DAS5BlH,QAAQmB,MAAR,MAT4B,sDAcd+F,EAAOoF,SAAS7K,GAdF,QAc5Bb,EAd4B,iEAgB5BZ,QAAQmB,MAAR,MAhB4B,2BAuB9B,IAJA6J,EAAS,CACPrJ,KAAM,gBACNiG,QAAShH,IArBmB,WAuBrB6L,GACPhN,EAAemB,EAAMyC,QAAQoJ,GAAGE,MAAM1G,MAAK,SAAArI,GACzCgD,EAAMyC,QAAQoJ,GAAG7O,SAAWA,EAC5BoN,EAAS,CACPrJ,KAAM,gBACNiG,QAAShH,OAEVgM,OAAM,SAAA1L,QAPFuL,EAAI,EAAGA,EAAI7L,EAAMyC,QAAQ/F,OAAQmP,IAAM,EAAvCA,GAvBqB,iEAAb,wDCtMJ1J,CAAWtB,KAEtBoD,iBAAkB,SAACpD,GACjBuJ,EDsOmB,SAACvJ,GAAD,8CAAa,WAAOuJ,EAAUE,GAAjB,iBAAAvL,EAAA,6DACpCqL,EAAS,CACPrJ,KAAM,6BACNiG,QAASnG,IAEXuJ,EAAS,CACPrJ,KAAM,wBACNiG,QAAS,OAPyB,kBAWnBwC,KAXmB,OAWlClD,EAXkC,8DAalClH,QAAQmB,MAAR,MAbkC,kCAkBtB+J,IAAW5G,MAlBW,oBAqBpB4C,EAAOoF,SAAS7K,GArBI,QAqBlCb,EArBkC,iEAuBlCZ,QAAQmB,MAAR,MAvBkC,2BA0BpC6J,EAAS,CACPrJ,KAAM,wBACNiG,QAAShH,IA5ByB,iEAAb,wDCtOViE,CAAiBpD,KAE5BgD,0BAA2B,WACzBuG,EDmS4B,uCAAM,WAAOA,EAAUE,GAAjB,mCAAAvL,EAAA,+EAGrB2K,KAHqB,OAGpCpD,EAHoC,8DAKpClH,QAAQmB,MAAR,MALoC,kCAQxB+J,IAAW5G,MACnBf,EAAU2D,EAAO3D,QATe,oBAYrB2D,EAAOwF,UAAUnJ,GAZI,QAYpChC,EAZoC,iEAcpCvB,QAAQmB,MAAR,MACAyK,MAAM,+BAf8B,2BAkBlClI,EAAe,GAlBmB,cAmBlBnC,GAnBkB,kEAmB3BX,EAnB2B,QAoB9Ba,EAAUb,EAAMa,QApBc,eAsBnBiC,EAtBmB,UAsBOwD,EAAO2F,cAAcpL,GAtB5B,oBAsBlCiC,EAtBkC,KAsBNoJ,OAtBM,0EAwBlC9M,QAAQmB,MAAR,MAxBkC,yKA4BtC,IAASsL,EAAI,EAAGA,EAAI/I,EAAapG,OAAQmP,IACvC/I,EAAa+I,GAAGpP,UAAY,GAE9B2N,EAAS,CACPrJ,KAAM,iCACNiG,QAASlE,IAjC2B,IAAA/D,EAAA,iBAmC7B8M,GAnC6B,mBAAA9M,EAAA,sEAoCZuH,EAAO6F,mBAAmBrJ,EAAa+I,GAAGhM,IApC9B,OAoC9BpD,EApC8B,OAqCpCqG,EAAa+I,GAAGpP,UAAYA,EAC5B2N,EAAS,CACPrJ,KAAM,iCACNiG,QAASlE,IAEFsJ,EAAI,EA1CuB,YA0CpBA,EAAI3P,EAAUC,QA1CM,iCA2CZ4J,EAAOqF,WAAWlP,EAAU2P,GAAGtQ,IA3CnB,OA2C5BiH,EA3C4B,OA4ClCD,EAAa+I,GAAGpP,UAAU2P,GAAGrJ,QAAUA,EA5CL,QA0CEqJ,IA1CF,uBA8CpCvN,EAAeiE,EAAa+I,GAAGxL,OAAOgF,MAAK,SAAArI,GACzC8F,EAAa+I,GAAG7O,SAAWA,EAC3BoN,EAAS,CACPrJ,KAAM,iCACNiG,QAASlE,OAEVkJ,OAAM,SAAA1L,GACPlB,QAAQmB,MAAMD,MArDoB,2CAmC7BuL,EAAI,EAnCyB,aAmCtBA,EAAI/I,EAAapG,QAnCK,0CAmC7BmP,GAnC6B,iBAmCGA,IAnCH,uGAAN,0DCjS9B9H,wBAAyB,SAACb,GACxBkH,EDuB0B,SAAClH,GAAD,8CAAY,WAAOkH,GAAP,iBAAArL,EAAA,+EAGzByK,KAHyB,OAGxClD,EAHwC,8DAKxClH,QAAQmB,MAAR,MALwC,sDAUpB+F,EAAO+F,QAAQnJ,GAVK,QAUxCnG,EAVwC,iEAYxCqC,QAAQmB,MAAR,MAZwC,2BAe1C6J,EAAS,CACPrJ,KAAM,+BACNiG,QAASjK,IAjB+B,iEAAZ,sDCvBjBgH,CAAwBb,KAEnC2B,mBAAoB,WAClBuF,ED4PqB,uCAAM,WAAOA,EAAUE,GAAjB,iBAAAvL,EAAA,6DAC/BqL,EAAS,CACPrJ,KAAM,0BACNiG,QAAS,OAHoB,kBAOd0C,KAPc,OAO7BpD,EAP6B,8DAS7BlH,QAAQmB,MAAR,MAT6B,sDAcb+F,EAAOqF,WAAWrF,EAAO3D,SAdZ,QAc7BI,EAd6B,iEAgB7B3D,QAAQmB,MAAR,MACAyK,MAAM,4BAjBuB,2BAoB/BZ,EAAS,CACPrJ,KAAM,0BACNiG,QAASjE,IAEXqH,EAAS,CACPrJ,KAAM,iCACNiG,QAASjE,EAAQ9C,OAEnBmK,EAAS,CACPrJ,KAAM,iCACNiG,QAASjE,EAAQuJ,QA9BY,iEAAN,0DC1PvBlQ,OAAQ,WACNgO,EDgKS,uCAAM,WAAOA,GAAP,eAAArL,EAAA,sEACE2K,KADF,WACbpD,EADa,QAEP3D,QAFO,uBAGjBvD,QAAQC,IAAI,oBAHK,iCAMnBD,QAAQC,IAAIiH,EAAO3D,SACnByH,EAAS,CACPrJ,KAAM,YACNiG,QAASV,EAAO3D,UATC,mBAaD2D,EAAOqF,WAAWrF,EAAO3D,SAbxB,wEAejBvD,QAAQmB,MAAR,MACA7E,EAAQM,KAAK,gBAhBI,2BAoBnBN,EAAQM,KAAK,KApBM,0DAAN,wDC9JXiG,cAAe,WACbmI,EDmbgB,uCAAM,WAAOA,EAAUE,GAAjB,yBAAAvL,EAAA,+EAGT2K,KAHS,OAGxBpD,EAHwB,8DAKxBlH,QAAQmB,MAAR,MALwB,kCAQpBmD,EAAQ4G,IAAW5G,MACnBrG,EAAOqG,EAAMrG,KACbwI,EAAYnC,EAAMmC,UAClBE,EAAerC,EAAMqC,aACrBC,EAAatC,EAAMsC,WAZC,oBAclBM,EAAOiG,YAAY1G,EAAWE,EAAcC,EAAY3I,GAdtC,kEAgBxB+B,QAAQmB,MAAR,MACAyK,MAAM,2BAjBkB,4CAoBpBnB,KApBoB,QAqB1BnO,EAAQM,KAAK,QArBa,iEAAN,0DCjblBoG,YAAa,WACXgI,EDqec,uCAAM,WAAOA,EAAUE,GAAjB,6BAAAvL,EAAA,+EAGP2K,KAHO,OAGtBpD,EAHsB,8DAKtBlH,QAAQmB,MAAR,MALsB,kCAQlBmD,EAAQ4G,IAAW5G,MACnB7C,EAAU6C,EAAMuC,cAChBhG,EAAOyD,EAAMwC,gBACbsG,EAAY9I,EAAMyC,mBAClBsG,EAAQ/I,EAAM0C,iBACdpG,EAAQ,CACZa,UACAZ,OACAuM,YACAC,SAjBsB,UAoBEnG,EAAOoG,UAAU1M,EAAO,CAAE2C,QAAS2D,EAAO3D,UApB5C,eAoBlBgK,EApBkB,2BAsBhBrG,EAAOlE,YAAYuK,GAtBH,kEAwBtBvN,QAAQmB,MAAR,MACAyK,MAAM,2BAzBgB,2BA4BxBtP,EAAQM,KAAK,KA5BW,iEAAN,0DCnehB4F,cAAe,WACbwI,EDocgB,uCAAM,WAAOA,EAAUE,GAAjB,6BAAAvL,EAAA,+EAGT2K,KAHS,OAGxBpD,EAHwB,8DAKxBlH,QAAQmB,MAAR,MALwB,kCAQpBmD,EAAQ4G,IAAW5G,MACnBzD,EAAOyD,EAAMe,kBACb6H,EAAQ5I,EAAMiB,mBACdoH,EAAOrI,EAAMkB,mBACbjC,EAAU2D,EAAO3D,QAEjBiK,EAAa,CACjB3M,OACAqM,QACAP,QAjBwB,UAoBEzF,EAAOuG,uBAAuBD,EAAY,CAAEjK,YApB9C,eAoBpBmK,EApBoB,2BAsBlBxG,EAAO1E,cAAckL,GAtBH,kEAwBxB1N,QAAQmB,MAAR,MACAyK,MAAM,kCAzBkB,2BA4B1BtP,EAAQM,KAAK,KA5Ba,iEAAN,0DClclByF,gBAAiB,WACf2I,ED4XkB,uCAAM,WAAOA,EAAUE,GAAjB,6BAAAvL,EAAA,+EAGX2K,KAHW,OAG1BpD,EAH0B,8DAK1BlH,QAAQmB,MAAR,MAL0B,kCAQtBmD,EAAQ4G,IAAW5G,MACnBzD,EAAOyD,EAAMc,YACb8H,EAAQ5I,EAAMgB,aACdqI,EAAYrJ,EAAMY,aAClB3B,EAAUe,EAAMrG,KAZM,oBAgBbiJ,EAAO2E,kBAAkB8B,GAhBZ,QAgB1BhB,EAhB0B,iEAkB1B3M,QAAQmB,MAAR,MACAyK,MAAM,mCAnBoB,sDAwBJ1E,EAAO0G,YAAY,CACvC/M,OACAqM,QACAP,QACC,CACDpJ,YA7BwB,QAwB1BmK,EAxB0B,iEAgC1B1N,QAAQmB,MAAR,MACAyK,MAAM,2BAjCoB,sDAqCpB1E,EAAO2G,cAActK,EAASmK,GArCV,kEAuC1B1N,QAAQmB,MAAR,MACAyK,MAAM,+BAxCoB,2BA2C5BtP,EAAQM,KAAK,KA3Ce,iFAAN,0DC1XpBwG,aAAc,WACZ4H,EDqiBe,uCAAM,WAAOA,EAAUE,GAAjB,6BAAAvL,EAAA,+EAGR2K,KAHQ,OAGvBpD,EAHuB,8DAKvBlH,QAAQmB,MAAR,MALuB,kCAQnBmD,EAAQ4G,IAAW5G,MACnBwJ,EAAgBxJ,EAAMrG,KACtBwD,EAAU6C,EAAM1D,MAAMa,QACtByL,EAAQ5I,EAAMoC,oBAXK,oBAcP4B,GAAYyF,yBAAyBb,GAd9B,QAcvB3J,EAduB,iEAgBvBvD,QAAQmB,MAAR,MACAyK,MAAM,4BAjBiB,sDAsBF1E,EAAO8G,6BAA6BzK,EAAS,CAAEA,QAASuK,IAtBtD,QAsBvBG,EAtBuB,iEAwBvBjO,QAAQmB,MAAR,MACAyK,MAAM,kCAzBiB,sDA6BjB1E,EAAOgH,oBAAoBzM,EAASwM,GA7BnB,kEA+BvBjO,QAAQmB,MAAR,MACAyK,MAAM,8BAhCiB,sDAqCT1E,EAAOoF,SAAS7K,GArCP,QAqCvBb,EArCuB,iEAuCvBZ,QAAQmB,MAAR,MAvCuB,2BA0CzB6J,EAAS,CACPrJ,KAAM,gBACNiG,QAAShH,IA5Cc,yFAAN,0DCniBjBoD,MAAO,SAACF,GACNkH,EDufQ,SAAClH,GAAD,8CAAY,WAAOkH,EAAUE,GAAjB,2BAAAvL,EAAA,+EAGP2K,KAHO,OAGtBpD,EAHsB,8DAKtBlH,QAAQmB,MAAR,MALsB,kCAQlBmD,EAAQ4G,IAAW5G,MACnBrG,EAAOqG,EAAMrG,KACGqG,EAAMrG,KACtBkQ,EAAU7J,EAAMkC,UAXE,oBAcX8B,GAAYyF,yBAAyBI,GAd1B,QActBzR,EAdsB,iEAgBtBsD,QAAQmB,MAAR,MACAyK,MAAM,uDAjBgB,kCAoBlBpO,EAAW,CACfsG,SACA7F,OACAvB,MAvBsB,oBA2BPwK,EAAOkH,oBAAoB5Q,EAAU,CAAE+F,QAAStF,IA3BzC,QA2BtBgO,EA3BsB,iEA6BtBjM,QAAQmB,MAAR,MACAyK,MAAM,mCA9BgB,sDAkChB1E,EAAOmH,eAAepC,GAlCN,kEAoCtBjM,QAAQmB,MAAR,MACAyK,MAAM,oCArCgB,4CAwClBnB,KAxCkB,QAyCxBnO,EAAQM,KAAK,KAzCW,iFAAZ,wDCvfCoH,CAAMF,KAEjBN,mBAAoB,SAAC/B,EAAS8B,GAC5ByH,ED+kBqB,SAACvJ,EAAS8B,GAAV,8CAAsB,WAAOyH,EAAUE,GAAjB,iBAAAvL,EAAA,+EAG9B2K,KAH8B,OAG7CpD,EAH6C,8DAK7ClH,QAAQmB,MAAR,MAL6C,kCAQjC+J,IAAW5G,MARsB,UASnB4C,EAAOoH,8BAA8B/K,EAAS,CAAEA,QAAS2D,EAAO3D,UAT7C,eASzCgL,EATyC,2BAWvCrH,EAAO1D,mBAAmB/B,EAAS8M,GAXI,kEAa7CvO,QAAQmB,MAAR,MAb6C,oFAAtB,wDC/kBZqC,CAAmB/B,EAAS8B,KAEvCK,mBAAoB,SAAClG,GACnBsN,ED8lBqB,SAACtN,GAAD,8CAAgB,WAAOsN,EAAUE,GAAjB,qCAAAvL,EAAA,+EAGxB2K,KAHwB,OAGvCpD,EAHuC,8DAKvClH,QAAQmB,MAAR,MALuC,4CAQZ+F,EAAOsH,4BAA4B9Q,EAAY,CAAE6F,QAAS2D,EAAO3D,UARrD,eAQnCkL,EARmC,OASzCzO,QAAQC,IAAIwO,GAT6B,oBAWjCvH,EAAOtD,mBAAmB6K,GAXO,kEAavCzO,QAAQmB,MAAR,MAbuC,4CAgBnCsJ,KAhBmC,eAkB3BS,IAAW5G,MACnBf,EAAU2D,EAAO3D,QAnBkB,oBAsBxB2D,EAAOwF,UAAUnJ,GAtBO,QAsBvChC,EAtBuC,iEAwBvCvB,QAAQmB,MAAR,MACAyK,MAAM,+BAzBiC,2BA4BrClI,EAAe,GA5BsB,cA6BrBnC,GA7BqB,kEA6B9BX,EA7B8B,QA8BjCa,EAAUb,EAAMa,QA9BiB,eAgCtBiC,EAhCsB,UAgCIwD,EAAO2F,cAAcpL,GAhCzB,oBAgCrCiC,EAhCqC,KAgCToJ,OAhCS,0EAkCrC9M,QAAQmB,MAAR,MAlCqC,yKAsCzC,IAASsL,EAAI,EAAGA,EAAI/I,EAAapG,OAAQmP,IACvC/I,EAAa+I,GAAGpP,UAAY,GAE9B2N,EAAS,CACPrJ,KAAM,iCACNiG,QAASlE,IA3C8B,IAAA/D,EAAA,iBA6ChC8M,GA7CgC,mBAAA9M,EAAA,sEA8CfuH,EAAO6F,mBAAmBrJ,EAAa+I,GAAGhM,IA9C3B,OA8CjCpD,EA9CiC,OA+CvCqG,EAAa+I,GAAGpP,UAAYA,EAC5B2N,EAAS,CACPrJ,KAAM,iCACNiG,QAASlE,IAEFsJ,EAAI,EApD0B,YAoDvBA,EAAI3P,EAAUC,QApDS,iCAqDf4J,EAAOqF,WAAWlP,EAAU2P,GAAGtQ,IArDhB,OAqD/BiH,EArD+B,OAsDrCD,EAAa+I,GAAGpP,UAAU2P,GAAGrJ,QAAUA,EAtDF,QAoDDqJ,IApDC,uBAwDvCvN,EAAeiE,EAAa+I,GAAGxL,OAAOgF,MAAK,SAAArI,GACzC8F,EAAa+I,GAAG7O,SAAWA,EAC3BoN,EAAS,CACPrJ,KAAM,iCACNiG,QAASlE,OAEVkJ,OAAM,SAAA1L,GACPlB,QAAQmB,MAAMD,MA/DuB,2CA6ChCuL,EAAI,EA7C4B,aA6CzBA,EAAI/I,EAAapG,QA7CQ,0CA6ChCmP,GA7CgC,iBA6CAA,IA7CA,+GAAhB,wDC9lBZ7I,CAAmBlG,QAKpBqN,CAA6C2D,YAAWzK,IAEtE0K,IAASvK,OACP,cAAC,IAAD,CAAU4D,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAQ1L,QAASA,EAAjB,SACE,cAACwO,GAAD,QAGJ8D,SAASC,eAAe,SAM1B/I,K","file":"static/js/main.625d4d95.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import history from \"history/createHashHistory\";\n\nexport default history();\n","import history from \"./history\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header(props) {\n  return (\n    <header className=\"App-header\">\n      <div className=\"header-wrapper\">\n        <Link to=\"/\" className=\"logo\">GxCert</Link>\n        <Link to=\"/issue\" className=\"header-left-link\">ISSUE</Link>\n      </div>\n      <div className=\"sign-in-button\" onClick={() => history.push(\"/signup\")}>SIGN IN</div>\n    </header>\n  );\n}\n\nexport default Header;\n","\nimport { Link } from \"react-router-dom\";\n\nfunction Top() {\n  return (\n    <div className=\"top\">\n      <div className=\"top-left\">\n        \n      </div>\n      <div className=\"top-right\">\n        <p className=\"concept\">確かな証明書を誰にでも簡単に</p>\n        <p className=\"concept-large\">ブロックチェーン技術による、改ざんされない確かな証明書を簡単に発行、受け取りすることができます。</p>\n        <Link to=\"/signup\">\n          <div className=\"sign-up\">\n            SIGN UP\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Top;\n","\nfunction SignIn(props) {\n  return (\n    <div className=\"sign-in\">\n      <div className=\"sign-in-content\">\n        <p className=\"sign-in-message\">サービスの利用にはGoogleアカウントでの認証が必須です。Googleアカウントで認証を行った後、登録を完了させてください。</p>\n        <img src=\"/google.png\" onClick={props.signIn}/>\n      </div>\n    </div>\n  );\n}\n\nexport default SignIn;\n","\nfunction Registration() {\n  return (\n    <div className=\"registration\">\n      <div className=\"registration-content\">\n        <p className=\"registration-title\">ユーザー登録</p>\n        <img src=\"\" className=\"registration-icon\" />\n        <div className=\"registration-form\">\n          <p className=\"registration-form-title\">Name</p>\n          <input type=\"text\" className=\"registration-form-name\" />\n          <p className=\"registration-form-title\">E-mail</p>\n          <input type=\"text\" className=\"registration-form-email\" />\n        </div>\n        <div className=\"register-button\">\n          登録\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Registration;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Certificates extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchCertificates();\n  }\n  render() {\n    return (\n      <div className=\"certificates\">\n        <div className=\"certificates-content\">\n          <p className=\"certificates-title\">\n            証明書\n          </p>\n          <div className=\"certificates-list\">\n            { this.props.userCerts.length === 0 ? <p className=\"certificate-not-found\">Certificate not found.</p> : \"\" }\n            { this.props.userCerts.map((userCert, index) => {\n              return (\n                <Link to={\"/certs/\" + userCert.userCertId}>\n                  <div className=\"certificates-list-cell\">\n                    <img src={userCert.certificate.imageUrl} className=\"certificates-list-cell-icon\"/>\n                    <div className=\"certificates-list-cell-detail\">\n                      <p className=\"certificates-list-cell-title\">\n                        {userCert.certificate.title} \n                      </p>\n                      <p className=\"certificates-list-cell-date\">\n                        { userCert.certificate.timestamp ? (new Date(userCert.certificate.timestamp)).toISOString() : \"\" }\n                      </p>\n                      <p className=\"certificates-list-cell-by\">\n                        { userCert.certificate.from}\n                      </p>\n                    </div>\n                  </div>\n                </Link>\n              );\n            }) }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Certificates;\n","import * as IpfsHttpClient from \"ipfs-http-client\";\nconst ipfs = IpfsHttpClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\nasync function postCertificate(blob) {\n  const response = await ipfs.add(blob);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the certificate to IPFS network.\");\n}\nasync function postText(text) {\n  const response = await ipfs.add(text);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the text to IPFS network.\");\n}\n\nfunction createImageUrlFromUint8Array(arr) {\n  const blob = new Blob([arr]);\n  const urlCreator = window.URL || window.webkitURL;\n  const imageUrl = urlCreator.createObjectURL(blob);\n  return imageUrl;\n}\nvar concatBuffer = function (buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n};\n\nasync function getImageOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    const url = createImageUrlFromUint8Array(content);\n    return url;\n  }\n  return null;\n}\n\nfunction uintToString(array) {\n  var out, i, len, c;\n  var char2, char3;\n\n  out = \"\";\n  len = array.length;\n  i = 0;\n  while (i < len) {\n    c = array[i++];\n    switch (c >> 4)\n    {\n      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12: case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(((c & 0x0F) << 12) |\n                                   ((char2 & 0x3F) << 6) |\n                                   ((char3 & 0x3F) << 0));\n        break;\n    }\n  }\n  return out;\n}\nasync function getTextOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    return uintToString(new Uint8Array(content));\n  }\n  return null;\n}\n\n\nexport { getImageOnIpfs, getTextOnIpfs, postCertificate, postText, createImageUrlFromUint8Array };\n","import { getImageOnIpfs } from \"../util/ipfs\"\nimport React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\n\nclass Certificate extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    const userCertId = parseInt(this.props.match.params.id);\n    this.props.fetchCertificate(userCertId);\n  }\n  render() {\n    console.log(this.props.userCert);\n    return (\n      <div className=\"certificate\">\n        { (!this.props.userCert || !this.props.userCert.certificate) ? (\n            <div className=\"certificate-content\">\n              <p className=\"certificate-not-found\">Certificate not found.</p>\n            </div>\n          ) : (\n            <div className=\"certificate-content\">\n              <p className=\"certificate-title\">\n                {this.props.userCert.certificate.title}\n              </p>\n              <img src={this.props.certificateImage} className=\"certificate-icon\" />\n              <table className=\"certificate-detail\">\n                <tr>\n                  <td>Issuer: </td>\n                  <td>\n                    {!this.props.userCert.certificate.group ? \"\" : this.props.userCert.certificate.group.name }\n                  </td>\n                </tr>\n                <tr>\n                  <td>To: </td>\n                  <td>\n                    { this.props.userCert.to }\n                  </td>\n                </tr>\n                <tr>\n                  <td>Title: </td>\n                  <td>\n                    {this.props.userCert.certificate.title}\n                  </td>\n                </tr>\n                <tr>\n                  <td>Description: </td>\n                  <td>{this.props.userCert.certificate.description}</td>\n                </tr>\n                <tr>\n                  <td>Issued at: </td>\n                  <td>{(new Date(parseInt(this.props.userCert.timestamp * 1000))).toISOString()}</td>\n                </tr>\n              </table>\n              <div className=\"certificate-buttons\">\n                <div className=\"certificate-button\">\n                  参照URLの発行\n                </div>\n                <div className=\"certificate-button\">\n                  PDFのダウンロード\n                </div>\n              </div>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default Certificate;\n","import React from \"react\";\nimport { createImageUrlFromUint8Array } from \"../util/ipfs\";\nimport { Link } from \"react-router-dom\";\n\nclass NewCert extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchGroups();\n  }\n  render() {\n    let imageUrl = \"\";\n    try {\n      imageUrl = createImageUrlFromUint8Array(this.props.image);\n    } catch(err) {\n      console.error(err);\n    }\n    return (\n      <div className=\"new-cert\">\n        <div className=\"sidebar\">\n          <ul>\n            <li className=\"sidebar-title\">ISSUE</li>\n            <li><Link to=\"/issue\">CERTIFICATE</Link></li>\n            <li>MEMBERS</li>\n            <li>PUBLISHER</li>\n          </ul>\n        </div>\n        <div className=\"new-cert-content\">\n          <p className=\"new-cert-title\">\n            証明書の登録 \n          </p>\n          <p className=\"new-cert-description\">\n            証明書を登録してください。証明書は複数登録することができ、それぞれの複数のユーザーに対して発行することができます。\n          </p>\n          <div className=\"new-cert-form\">\n            <p className=\"new-cert-form-title\">\n              Group\n            </p>\n            <select className=\"new-cert-form-group\" onChange={this.props.onChangeGroup}>\n              <option hidden>Choose group</option>\n              { this.props.groups.map(group => {\n                return (\n                  <option value={group.groupId.toString()}>{group.name}</option>\n                )\n              }) }\n              <option value=\"new\">Create new group</option>\n            </select>\n            <p className=\"new-cert-form-title\">\n              Title of Certificate\n            </p>\n            <input type=\"text\" className=\"new-cert-form-name\" onChange={this.props.onChangeTitle}/>\n            <p className=\"new-cert-form-title\">\n              Description of Certificate\n            </p>\n            <textarea className=\"new-cert-form-description\" onChange={this.props.onChangeDescription} ></textarea>\n            <p className=\"new-cert-form-title\">\n              Certificate Image\n            </p>\n            <img src={imageUrl} className=\"new-cert-form-image\" />\n            <div className=\"new-cert-form-image-file-div\">\n              <label className=\"new-cert-form-image-file-label\">\n                <input type=\"file\" className=\"new-cert-form-image-file\" onChange={this.props.onChangeImage} />\n                画像選択\n              </label>\n            </div>\n            <div className=\"register-button\" onClick={() => this.props.sign()} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewCert;\n","import React from \"react\";\nimport { createImageUrlFromUint8Array } from \"../util/ipfs\";\n\nclass NewProfile extends React.Component {\n  constructor() {\n    super();\n  }\n  render() {\n    let imageUrl = \"\";\n    try {\n      imageUrl = createImageUrlFromUint8Array(this.props.image);\n    } catch(err) {\n      console.error(err);\n    }\n    return (\n      <div className=\"new-profile\">\n        <div className=\"new-profile-content\">\n          <p className=\"new-profile-title\">\n            ユーザー登録\n          </p>\n          <div className=\"new-profile-form\">\n            <div className=\"new-profile-form-image\">\n              <label for=\"new-profile-form-image-file\">\n                <img src={imageUrl} className=\"new-profile-form-image\" />\n              </label>\n              <input id=\"new-profile-form-image-file\" type=\"file\" onChange={this.props.onChangeProfileImage} />\n            </div>\n            <p className=\"new-profile-form-title\">Name</p>\n            <input type=\"text\" className=\"new-profile-form-name\" onChange={this.props.onChangeProfileName} />\n            <p className=\"new-profile-form-title\">E-mail</p>\n            <input type=\"text\" className=\"new-profile-form-email\" onChange={this.props.onChangeProfileEmail} />\n            <div className=\"register-button\" onClick={this.props.registerProfile} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewProfile;\n","import React from \"react\";\nimport { getImageOnIpfs } from \"../util/ipfs\";\nimport { createImageUrlFromUint8Array } from \"../util/ipfs\";\n\nclass EditProfile extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchProfile();\n  }\n  render() {\n    let imageUrl = \"\";\n    try {\n      imageUrl = createImageUrlFromUint8Array(this.props.image);\n    } catch(err) {\n      console.error(err);\n    }\n    console.log(this.props);\n    return (\n      <div className=\"edit-profile\">\n        <div className=\"edit-profile-content\">\n          <p className=\"edit-profile-title\">\n            プロフィール編集\n          </p>\n          <div className=\"edit-profile-form\">\n            <div className=\"edit-profile-form-image\">\n              <label for=\"edit-profile-form-image-file\">\n                <img src={imageUrl} className=\"edit-profile-form-image\" />\n              </label>\n              <input id=\"edit-profile-form-image-file\" type=\"file\" onChange={this.props.onChangeProfileImage} />\n            </div>\n            <p className=\"edit-profile-form-title\">Name</p>\n            <input type=\"text\" className=\"edit-profile-form-name\" onChange={this.props.onChangeProfileName} />\n            <p className=\"edit-profile-form-title\">E-mail</p>\n            <input type=\"text\" className=\"edit-profile-form-email\" onChange={this.props.onChangeProfileEmail} />\n            <div className=\"register-button\" onClick={this.props.updateProfile} >\n              更新\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditProfile;\n","import React from \"react\";\n\nclass NewGroup extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div className=\"new-group\">\n        <div className=\"new-group-content\">\n          <p className=\"new-group-title\">発行元の登録</p>\n          <p className=\"new-group-description\">証明書の発行には発行元となる団体（企業、教育機関、NPO法人など）の登録が必要です。</p>\n          <div className=\"new-group-form\">\n            <p className=\"new-group-form-title\">Name</p>\n            <input type=\"text\" className=\"new-group-form-name\" onChange={this.props.onChangeGroupName} />\n            <p className=\"new-group-form-title\">Address</p>\n            <input type=\"text\" className=\"new-group-form-address\" onChange={this.props.onChangeGroupAddress} />\n            <p className=\"new-group-form-title\">Phone</p>\n            <input type=\"text\" className=\"new-group-form-phone\" onChange={this.props.onChangeGroupPhone} />\n\n            <div className=\"register-button\" onClick={this.props.registerGroup} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewGroup;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass EditGroup extends React.Component {\n  constructor() {\n    super();\n  }\n\n  componentDidMount() {\n    const groupId = parseInt(this.props.match.params.groupId);\n    this.props.fetchGroup(groupId);\n  }\n  render() {\n    if (!this.props.group) {\n      return (\n        <div className=\"edit-group\">\n        </div>\n      );\n    }\n    return (\n      <div className=\"edit-group\">\n        <div className=\"sidebar\">\n          <ul>\n            <li className=\"sidebar-title\">ISSUE</li>\n            <li><Link to=\"/issue\">CERTIFICATE</Link></li>\n            <li>MEMBERS</li>\n            <li>PUBLISHER</li>\n          </ul>\n        </div>\n        <div className=\"edit-group-content\">\n          <p className=\"edit-group-title\">発行元 {this.props.group.name}の更新</p>\n          <p className=\"edit-group-description\">証明書の発行には発行元となる団体（企業、教育機関、NPO法人など）の登録が必要です。</p>\n          <div className=\"edit-group-form\">\n            <p className=\"edit-group-form-title\">Name</p>\n            <input type=\"text\" className=\"edit-group-form-name\" onChange={this.props.onChangeGroupName} />\n            <p className=\"edit-group-form-title\">Address</p>\n            <input type=\"text\" className=\"edit-group-form-address\" onChange={this.props.onChangeGroupAddress} />\n            <p className=\"edit-group-form-title\">Phone</p>\n            <input type=\"text\" className=\"edit-group-form-phone\" onChange={this.props.onChangeGroupPhone} />\n\n            <div className=\"register-button\" onClick={this.props.updateGroup} >\n              更新\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditGroup;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass GroupMembers extends React.Component {\n\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchGroup(parseInt(this.props.match.params.id));\n  }\n\n  render() {\n    return (\n      <div className=\"group-members\">\n        <div className=\"sidebar\">\n          <ul>\n            <li className=\"sidebar-title\">ISSUE</li>\n            <li><Link to=\"/issue\">CERTIFICATE</Link></li>\n            <li>MEMBERS</li>\n            <li>PUBLISHER</li>\n          </ul>\n        </div>\n        <div className=\"group-members-content\">\n          { (() => {\n            const that = this;\n            if (!this.props.group) {\n              return (\n                <p>Group not found.</p>\n              );\n            }\n            return (\n              <div>\n                <p className=\"group-members-title\">{ this.props.group.name }のメンバー</p>\n                <input type=\"text\" className=\"group-members-invite\" onChange={this.props.onChangeGroupMemberToInvite} />\n                <button className=\"group-members-invite-button\" onClick={this.props.inviteMember} >Invite</button>\n                <div className=\"group-members-list\">\n                  { this.props.group.members.map(member => {\n                    return (\n                      <div className=\"group-members-list-cell\">\n                        <img src={member.imageUrl} className=\"group-members-list-cell-icon\"/>\n                        <div className=\"group-members-list-cell-detail\">\n                          <p className=\"group-members-list-cell-name\">\n                            {member.name} \n                          </p>\n                          <p className=\"group-members-list-cell-address\">\n                            {member.address}\n                          </p>\n                        </div>\n                        <div className=\"group-members-list-cell-disable\" onClick={() => that.props.disableGroupMember(that.props.group.groupId, member.address) }>無効化</div>\n                      </div>\n                    );\n                  }) }\n                </div>\n              </div>\n            );\n          })() }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GroupMembers;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Issuer extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchCertificates();\n  }\n  render() {\n    return (\n      <div className=\"issuer\">\n        <div className=\"issuer-certificates\">\n          <Link to=\"/new\">\n            <div className=\"issuer-certificates-new\">新規作成</div>\n          </Link>\n          <br/>\n          <p className=\"issuer-certificates-title\">証明書</p>\n          <div className=\"issuer-certificates-list\">\n            {\n              this.props.certificates.map(certificate => {\n                return (\n                  <div className=\"issuer-certificates-list-cell\">\n                    <img src={certificate.imageUrl} className=\"issuer-certificates-list-cell-icon\"/>\n                    <p className=\"issuer-certificates-list-cell-title\">\n                      {certificate.title} \n                    </p>\n                    <Link to={\"/issue/\" + certificate.id}>\n                      <div className=\"issuer-certificates-list-cell-issue\">発行</div>\n                    </Link>\n                  </div>\n                );\n              })\n            }\n          </div>\n        </div>\n        { this.props.certificates.map((certificate) => {\n          return (\n            <div className=\"issuer-certificate\">\n              <p className=\"issuer-certificate-title\">\n                {certificate.title}\n              </p>\n              <div className=\"issuer-certificate-list\">\n                { certificate.userCerts.map((userCert, index) => {\n                  return (\n                    <div className=\"certificates-list-cell\">\n                      <img src={userCert.profile ? userCert.profile.imageUrl : \"\"} className=\"issuer-certificate-list-cell-icon\"/>\n                      <div className=\"issuer-certificate-list-cell-detail\">\n                        <p className=\"issuer-certificate-list-cell-name\">\n                          {userCert.profile ? userCert.profile.name : \"\"} \n                        </p>\n                        <p className=\"issuer-certificate-list-cell-address\">\n                          { userCert.to }\n                        </p>\n                      </div>\n                      <div className=\"issuer-certificate-list-cell-invalidate\" onClick={() => this.props.invalidateUserCert(userCert.userCertId)}>無効化</div>\n                    </div>\n                  );\n                }) }\n              </div>\n            </div>\n          );\n        }) }\n      </div>\n    );\n  }\n}\n\nexport default Issuer;\n","import React from \"react\";\n\nclass Issue extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.certId = parseInt(this.props.match.params.certId);\n    this.props.fetchCertificate(this.certId);\n  }\n  render() {\n    return (\n      <div className=\"issue\">\n        { !this.props.certificate ? (\n          <div className=\"issue-content\">\n            <p className=\"certificate-not-found\">Certificate not found.</p> \n          </div>\n        ) : (\n          <div className=\"issue-content\">\n            <p className=\"issue-title\">\n              {this.props.certificate.title}の発行\n            </p>\n            <p className=\"issue-form-title\">Add Address</p>\n            <div className=\"issue-form\">\n              <input type=\"text\" className=\"issue-form-to\" onChange={this.props.onChangeToInIssue}/>\n              <button className=\"issue-form-issue\" onClick={ () => { this.props.issue(this.certId)}}>発行</button>\n            </div>\n          </div>\n        ) }\n      </div>\n    );\n  }\n}\n\nexport default Issue;\n","import React from \"react\";\nimport logo from './logo.svg';\nimport Header from \"./Header\";\nimport Top from \"./views/Top\";\nimport SignIn from \"./views/SignIn\";\nimport Registration from \"./views/Registration\";\nimport Certificates from \"./views/Certificates\";\nimport Certificate from \"./views/Certificate\";\nimport NewCert from \"./views/NewCert\";\nimport NewProfile from \"./views/NewProfile\";\nimport EditProfile from \"./views/EditProfile\";\nimport NewGroup from \"./views/NewGroup\";\nimport EditGroup from \"./views/EditGroup\";\nimport GroupMembers from \"./views/GroupMembers\";\nimport Issuer from \"./views/Issuer\";\nimport Issue from \"./views/Issue\";\nimport './App.css';\nimport { Switch, Route } from \"react-router-dom\";\n\nclass App extends React.Component {\n  constructor() {\n    super(); \n  }\n  render() {\n    const that = this;\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <Switch>\n          <Route exact={true} path=\"/\" render={ (routeProps) => {\n            if (that.props.state.from === \"\") { \n              return (\n                <Top />\n              );\n            }\n            return (<Certificates\n              {...routeProps}\n              userCerts={that.props.state.certificates}\n              fetchCertificates={that.props.fetchCertificates}\n            />)\n\n          } }/>\n          <Route exact={true} path=\"/signup\" render={ (routeProps) => <SignIn\n            {...routeProps}\n            signIn={that.props.signIn}\n            />\n          } />\n          <Route exact={true} path=\"/new/\" render={ () => <NewCert\n              fetchGroups={that.props.fetchGroups}\n              onChangeTitle={that.props.onChangeTitle}\n              onChangeDescription={that.props.onChangeDescription}\n              onChangeImage={that.props.onChangeImage}\n              onChangeGroup={that.props.onChangeGroup}\n              sign={that.props.sign}\n              from={that.props.state.from}\n              image={that.props.state.image}\n              groups={that.props.state.groups}\n            />\n          } />\n          <Route exact={true} path=\"/issue/\" render={ (routeProps) => <Issuer\n            {...routeProps}\n            groups={that.props.state.groupsInIssuer}\n            certificates={that.props.state.certificatesInIssuer}\n            fetchCertificates={that.props.fetchCertificatesInIssuer}\n            issue={that.props.issue}\n            invalidateUserCert={that.props.invalidateUserCert}\n            />\n          } />\n          <Route exact={true} path=\"/issue/:certId\" render={ (routeProps) => <Issue\n            {...routeProps}\n            certificate={that.props.state.certificateInIssue}\n            fetchCertificate={that.props.fetchCertificateInIssue}\n            onChangeToInIssue={that.props.onChangeToInIssue}\n            issue={that.props.issue}\n          />\n          } />\n          <Route exact={true} path=\"/certs/:id\" render={ (routeProps) => <Certificate\n\n            {...routeProps}\n            userCert={that.props.state.certificate}\n            certificateImage={that.props.state.certificateImage}\n            fetchCertificate={that.props.fetchCertificate}\n            />\n          } />\n          <Route exact={true} path=\"/group/new\" render={ (routeProps) => <NewGroup\n            {...routeProps}\n            registerGroup={that.props.registerGroup}\n            onChangeGroupName={that.props.onChangeGroupName}\n            onChangeGroupAddress={that.props.onChangeGroupAddress}\n            onChangeGroupPhone={that.props.onChangeGroupPhone}\n            />\n          } />\n          <Route exact={true} path=\"/group/edit/:groupId\" render={ (routeProps) => <EditGroup\n            {...routeProps}\n            group={that.props.state.groupInEdit}\n            updateGroup={that.props.updateGroup}\n            fetchGroup={that.props.fetchGroupInEdit}\n            onChangeGroupId={that.props.onChangeGroupIdInEdit}\n            onChangeGroupName={that.props.onChangeGroupNameInEdit}\n            onChangeGroupAddress={that.props.onChangeGroupAddressInEdit}\n            onChangeGroupPhone={that.props.onChangeGroupPhone}\n            />\n          } />\n          <Route exact={true} path=\"/group/:id\" render={ (routeProps) => <GroupMembers\n            {...routeProps}\n            group={that.props.state.group}\n            fetchGroup={that.props.fetchGroup}\n            inviteMember={that.props.inviteMember}\n            onChangeGroupMemberToInvite={that.props.onChangeGroupMemberToInvite}\n            disableGroupMember={that.props.disableGroupMember}\n            />\n          } />\n          <Route exact={true} path=\"/profile/new\" render={ (routeProps) => <NewProfile\n            {...routeProps}\n            image={that.props.state.profileImage}\n            registerProfile={that.props.registerProfile}\n            onChangeProfileName={that.props.onChangeProfileName}\n            onChangeProfileEmail={that.props.onChangeProfileEmail}\n            onChangeProfileImage={that.props.onChangeProfileImage}\n            />\n          } />\n          <Route exact={true} path=\"/profile/edit\" render={ (routeProps) => <EditProfile\n            {...routeProps}\n            image={that.props.state.profileImage}\n            updateProfile={that.props.updateProfile}\n            profile={that.props.state.profileInEdit}\n            profileName={that.props.state.profileNameInEdit}\n            profileEmail={that.props.state.profileEmailInEdit}\n            profileImage={that.props.state.profileImageInEdit}\n            fetchProfile={that.props.fetchProfileInEdit}\n            onChangeProfileName={that.props.onChangeProfileNameInEdit}\n            onChangeProfileEmail={that.props.onChangeProfileEmailInEdit}\n            onChangeProfileIcon={that.props.onChangeProfileImageInEdit}\n            />\n          } />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nconst initialState = {\n  from: \"\",\n  to: \"\",\n  title: \"\",\n  description: \"\",\n  image: null,\n  toInIssue: \"\",\n  groupId: null,\n  groupInEdit: null,\n  groupName: \"\",\n  groupMemberToInvite: \"\",\n  groupAddress: \"\",\n  groupPhone: \"\",\n  groupIdInEdit: \"\",\n  groupNameInEdit: \"\",\n  groupAddressInEdit: \"\",\n  groupPhoneInEdit: \"\",\n  groupInIssuer: null,\n  certificate: {},\n  certificateImage: \"\",\n  certificates: [],\n  certificatesInIssuer: [],\n  certificateInIssue: null,\n  group: null,\n  groups: [],\n  profileName: \"\",\n  profileEmail: \"\",\n  profileImage: \"\",\n  profileNameInEdit: \"\",\n  profileEmailInEdit: \"\",\n  profileImageInEdit: \"\",\n}\n\nexport default initialState;\n","import GxCertClient from \"gxcert-lib\";\nimport Web3 from \"web3\";\nimport torusClient from \"./torus\";\n\nimport config from \"./config\";\n\n\nlet gxCertWithoutLogin = new GxCertClient(new Web3(config.web3Host), config.contractAddress);\nlet gxCert;\n\nasync function getGxCertWithoutLogin() {\n  if (!gxCertWithoutLogin.isInitialized()) {\n    await gxCertWithoutLogin.init();\n  }\n  return gxCertWithoutLogin;\n}\nasync function getGxCert() {\n  let web3;\n  try {\n    await torusClient.init();\n    web3 = await torusClient.login();\n  } catch(err) {\n    console.error(err);\n  }\n  console.log(web3);\n  if (web3) {\n    try {\n      gxCert = new GxCertClient(web3, config.contractAddress, config.gxApi);\n      await gxCert.init();\n    } catch(err) {\n      console.error(err);\n      throw new Error(\"gxCert is not initialized.\");\n    }\n  }\n  if (gxCert === null) {\n    throw new Error(\"gxCert is not initialized.\");\n  }\n  if (!gxCert.address) {\n    await gxCert.getMyAddress();\n  }\n  return gxCert;\n}\n\nexport {\n  getGxCert,\n  getGxCertWithoutLogin,\n};\n","import { combineReducers, createStore, compose, applyMiddleware } from \"redux\";\nimport Reducer from \"./reducer\";\nimport thunk from \"redux-thunk\";\nimport { persistReducer, persistStore } from 'redux-persist'\nimport sessionStorage from 'redux-persist/lib/storage/session'\nimport initialState from \"./initialState\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage: sessionStorage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, Reducer);\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers({\n    state: persistedReducer,\n  }),\n  initialState,\n  storeEnhancers(applyMiddleware(thunk))\n);\n\nexport const persistor = persistStore(store);\nexport default store;\n","\nimport initialState from \"./initialState\";\n\nexport default function Reducer(state=initialState, action) {\n  switch(action.type) {\n    case \"ON_CHANGE_TITLE\":\n      return Object.assign({}, state, {\n        title: action.payload\n      });\n    case \"ON_CHANGE_DESCRIPTION\":\n      return Object.assign({}, state, {\n        description: action.payload\n      });\n    case \"ON_CHANGE_IMAGE\":\n      return Object.assign({}, state, {\n        image: action.payload\n      });\n    case \"ON_CHANGE_GROUP\":\n      return Object.assign({}, state, {\n        groupId: action.payload\n      });\n    case \"ON_CHANGE_GROUP_NAME\":\n      return Object.assign({}, state, {\n        groupName: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_ADDRESS\":\n      return Object.assign({}, state, {\n        groupAddress: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_PHONE\":\n      return Object.assign({}, state, {\n        groupPhone: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_MEMBER_TO_INVITE\":\n      return Object.assign({}, state, {\n        groupMemberToInvite: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_ID_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupIdInEdit: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_NAME_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupNameInEdit: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_ADDRESS_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupAddressInEdit: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_PHONE_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupPhoneInEdit: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_NAME\":\n      return Object.assign({}, state, {\n        profileName: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_EMAIL\":\n      return Object.assign({}, state, {\n        profileEmail: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_IMAGE\":\n      return Object.assign({}, state, {\n        profileImage: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_NAME_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileNameInEdit: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_EMAIL_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileEmailInEdit: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_IMAGE_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileImageInEdit: action.payload,\n      });\n    case \"ON_CHANGE_TO_IN_ISSUE\":\n      return Object.assign({}, state, {\n        toInIssue: action.payload,\n      });\n    case \"LOGGED_IN\":\n      return Object.assign({}, state, {\n        from: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE\":\n      return Object.assign({}, state, {\n        certificate: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE_IN_ISSUE\":\n      return Object.assign({}, state, {\n        certificateInIssue: action.payload,\n      });\n    case \"FETCHED_CERTIFICATES\":\n      return Object.assign({}, state, {\n        certificates: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE_IMAGE\":\n      return Object.assign({}, state, {\n        certificateImage: action.payload,\n      });\n    case \"FETCHED_GROUPS\":\n      return Object.assign({}, state, {\n        groups: action.payload,\n      });\n    case \"FETCHED_GROUP\":\n      return Object.assign({}, state, {\n        group: action.payload,\n      });\n    case \"FETCHED_GROUP_IN_EDIT\":\n      return Object.assign({}, state, {\n        groupInEdit: action.payload,\n      });\n    case \"FETCHED_CERTIFICATES_IN_ISSUER\":\n      return Object.assign({}, state, {\n        certificatesInIssuer: action.payload,\n      });\n    case \"FETCHED_PROFILE_IN_EDIT\":\n      return Object.assign({}, state, {\n        profileInEdit: action.payload,\n      });\n    default:\n      return initialState;\n  }\n}\n\n","import Torus from \"@toruslabs/torus-embed\";\nimport Web3 from \"web3\";\n\nclass TorusClient {\n  constructor() {\n    this.torus = new Torus();\n  }\n  async init() {\n    await this.torus.init({\n      buildEnv: \"production\",\n      enableLogging: true,\n      network: {\n        host: \"https://matic-mumbai.chainstacklabs.com\",\n        chainId: 80001,\n        networkName: \"Mumbai Testnet\"\n      },\n      showTorusButton: true,\n      enabledVerifiers: {\n        google: true,\n        facebook:false,\n        reddit: false,\n        twitch: false,\n        discord: false,\n      }\n    });\n    /*\n    await this.torus.init({\n      buildEnv: \"production\",\n      enableLogging: true,\n      network: {\n        host: \"http://localhost:7545\",\n        chainId: 80001,\n        networkName: \"localhost:7545\"\n      },\n      showTorusButton: true,\n    });\n    */\n  }\n  async login() {\n    const response = await this.torus.login();\n    console.log(response);\n    console.log(this.torus);\n    this.web3 = new Web3(this.torus.provider);\n    console.log(this.web3);\n    return this.web3;\n  }\n  async getPublicAddressByGoogle(gmail) {\n    return await this.torus.getPublicAddress({\n      verifier: \"google\",\n      verifierId: gmail,\n    });\n  }\n}\n\nconst torusClient = new TorusClient();\nexport default torusClient;\n","\nlet config;\nif (process.env.NODE_ENV === \"development\") {\n  config = {\n    web3Host: \"https://matic-mumbai.chainstacklabs.com\",\n    contractAddress: \"0xE19F38e0fA7B005E8E62E837B0D79C8558fAd8E0\",\n    gxApi: \"http://localhost:5001/gxcert-21233/asia-northeast1/gxcert\",\n  };\n} else if (process.env.NODE_ENV === \"production\") {\n  //TODO: Change here\n  config = {\n    web3Host: \"https://matic-mumbai.chainstacklabs.com\",\n    contractAddress: \"0xE19F38e0fA7B005E8E62E837B0D79C8558fAd8E0\",\n    gxApi: \"https://asia-northeast1-gxcert-21233.cloudfunctions.net/gxcert\",\n  }\n}\n\n\nexport default config;\n","import { getGxCert, getGxCertWithoutLogin } from \"./gxcert-client\";\nimport { getImageOnIpfs } from \"./util/ipfs\";\nimport torusClient from \"./torus\";\nimport history from \"./history\";\n\nfunction wait() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, 6000);\n  });\n}\nconst onChangeTitle = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_TITLE\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeDescription = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_DESCRIPTION\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeImage = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_IMAGE\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\nconst onChangeGroup = (evt) => async (dispatch, getState) => {\n  if (evt.target.value === \"new\") {\n    history.push(\"/group/new\");\n    return;\n  }\n  dispatch({\n    type: \"ON_CHANGE_GROUP\",\n    payload: parseInt(evt.target.value),\n  });\n}\n\nconst onChangeToInIssue = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_TO_IN_ISSUE\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupIdInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ID_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupNameInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_NAME_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupAddressInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ADDRESS_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupPhoneInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_PHONE_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupName = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupAddress = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ADDRESS\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupPhone = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_PHONE\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileName = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileEmail = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_EMAIL\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileImage = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_PROFILE_IMAGE\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\nconst onChangeProfileNameInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileEmailInEdit = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_EMAIL_IN_EDIT\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileImageInEdit = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_PROFILE_IMAGE_IN_EDIT\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\n\nconst onChangeGroupMemberToInvite = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_MEMBER_TO_INVITE\",\n    payload: evt.target.value,\n  });\n}\n\nconst fetchCertificateInIssue = (certId) => async (dispatch) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let certificate;\n  try {\n    certificate = await gxCert.getCert(certId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE_IN_ISSUE\",\n    payload: certificate,\n  });\n}\n\nconst fetchCertificate = (userCertId) => async (dispatch) => {\n  dispatch({\n    type: \"FETCHED_CERTIFICATE\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let userCert;\n  try {\n    userCert = await gxCert.getUserCert(userCertId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE\",\n    payload: userCert,\n  });\n  const imageCid = userCert.certificate.image;\n  let imageUrl;\n  try {\n    imageUrl = await getImageOnIpfs(imageCid);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE_IMAGE\",\n    payload: imageUrl,\n  });\n  try {\n    const group = await gxCert.getGroup(userCert.certificate.groupId);\n    userCert.certificate.group = group;\n    dispatch({\n      type: \"FETCHED_CERTIFICATE\",\n      payload: userCert,\n    });\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  try {\n    const profile = await gxCert.getProfile(userCert.to);\n    userCert.to = profile.name;\n    dispatch({\n      type: \"FETCHED_CERTIFICATE\",\n      payload: userCert,\n    });\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\n\nconst fetchCertificates = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"FETCHED_CERTIFICATES\",\n    payload: [],\n  });\n  const state = getState().state;\n  const address = state.from;\n  if (address === \"\" || !address) {\n    history.push(\"/top\");\n    return;\n  }\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let userCerts;\n  try {\n    userCerts = await gxCert.getReceivedUserCerts(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  for (let i = 0; i < userCerts.length; i++) {\n    getImageOnIpfs(userCerts[i].certificate.image).then(imageUrl => {\n      userCerts[i].certificate.imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES\",\n        payload: userCerts,\n      });\n    });\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES\",\n    payload: userCerts,\n  });\n}\n\nconst fetchGroups = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const address = state.from;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUPS\",\n    payload: groups,\n  });\n}\n\nconst signIn = () => async (dispatch) => {\n  const gxCert = await getGxCert();\n  if (!gxCert.address) {\n    console.log(\"Failed to login.\");\n    return;\n  }\n  console.log(gxCert.address);\n  dispatch({\n    type: \"LOGGED_IN\",\n    payload: gxCert.address,\n  });\n  let profile;\n  try {\n    profile = await gxCert.getProfile(gxCert.address);\n  } catch(err) {\n    console.error(err);\n    history.push(\"/profile/new\");\n    return;\n  }\n\n  history.push(\"/\");\n}\n\nconst fetchGroup = (groupId) => async (dispatch, getState) => {\n  dispatch({\n    type: \"FETCHED_GROUP\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let group;\n  try {\n    group = await gxCert.getGroup(groupId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUP\",\n    payload: group,\n  });\n  for (let i = 0; i < group.members.length; i++) {\n    getImageOnIpfs(group.members[i].icon).then(imageUrl => {\n      group.members[i].imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_GROUP\",\n        payload: group,\n      });\n    }).catch(err => {\n\n    });\n  }\n}\nconst fetchGroupInEdit = (groupId) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ID_IN_EDIT\",\n    payload: groupId,\n  });\n  dispatch({\n    type: \"FETCHED_GROUP_IN_EDIT\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n\n\n  const state = getState().state;\n  let group;\n  try {\n    group = await gxCert.getGroup(groupId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUP_IN_EDIT\",\n    payload: group,\n  });\n}\nconst fetchProfileInEdit = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"FETCHED_PROFILE_IN_EDIT\",\n    payload: null,\n  });\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let profile;\n  try {\n    profile = await gxCert.getProfile(gxCert.address);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to fetch profile.\");\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_PROFILE_IN_EDIT\",\n    payload: profile,\n  });\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME_IN_EDIT\",\n    payload: profile.name,\n  });\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME_IN_EDIT\",\n    payload: profile.email,\n  });\n}\nconst fetchCertificatesInIssuer = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const address = gxCert.address;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to fetch your groups\");\n    return;\n  }\n  let certificates = [];\n  for (const group of groups) {\n    const groupId = group.groupId;\n    try {\n      certificates = certificates.concat(await gxCert.getGroupCerts(groupId));\n    } catch(err) {\n      console.error(err);\n      continue;\n    }\n  }\n  for (let i = 0; i < certificates.length; i++) {\n    certificates[i].userCerts = [];\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n    payload: certificates,\n  });\n  for (let i = 0; i < certificates.length; i++) {\n    const userCerts = await gxCert.getIssuedUserCerts(certificates[i].id);\n    certificates[i].userCerts = userCerts;\n    dispatch({\n      type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n      payload: certificates,\n    });\n    for (let j = 0; j < userCerts.length; j++) {\n      const profile = await gxCert.getProfile(userCerts[j].to);\n      certificates[i].userCerts[j].profile = profile;\n    }\n    getImageOnIpfs(certificates[i].image).then(imageUrl => {\n      certificates[i].imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n}\n\nconst sign = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const image = state.image;\n  if (!image) {\n    alert(\"Image not set.\");\n    return;\n  }\n  let imageCid;\n  try {\n    imageCid = await gxCert.uploadImageToIpfs(image);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to post the image to IPFS.\");\n    return;\n  }\n  const certificate = {\n    context: {},\n    title: state.title,\n    description: state.description,\n    image: imageCid,\n    groupId: state.groupId,\n  }\n  if (!gxCert.isCertificate(certificate)) {\n    alert(\"Invalid Certificate.\");\n    return;\n  }\n  let signed = null;\n  try {\n    signed = await gxCert.signCertificate(certificate, { address: gxCert.address });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign the certificate.\");\n    return;\n  }\n  try {\n    await gxCert.createCert(signed);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to post the signed certificate.\");\n    return;\n  }\n  await wait();\n  history.push(\"/issue\");\n}\n\nconst registerProfile = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const name = state.profileName;\n  const email = state.profileEmail;\n  const iconImage = state.profileImage;\n  const address = state.from;\n\n  let icon;\n  try {\n    icon = await gxCert.uploadImageToIpfs(iconImage);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to upload image to IPFS.\"); \n    return;\n  }\n  let signedProfile;\n  try {\n    signedProfile = await gxCert.signProfile({\n      name,\n      email,\n      icon,\n    }, { \n      address,\n    });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign profile.\");\n    return;\n  }\n  try {\n    await gxCert.createProfile(address, signedProfile);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to register profile.\");\n    return;\n  }\n  history.push(\"/\");\n\n}\nconst registerGroup = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const from = state.from;\n  const groupName = state.groupName;\n  const groupAddress = state.groupAddress;\n  const groupPhone = state.groupPhone;\n  try {\n    await gxCert.createGroup(groupName, groupAddress, groupPhone, from);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to create group.\");\n    return;\n  }\n  await wait();\n  history.push(\"/new\");\n}\nconst updateProfile = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const name = state.profileNameInEdit;\n  const email = state.profileEmailInEdit;\n  const icon = state.profileImageInEdit;\n  const address = gxCert.address;\n\n  const newProfile = {\n    name,\n    email,\n    icon,\n  }\n\n  const signedProfile = await gxCert.signProfileForUpdating(newProfile, { address });\n  try {\n    await gxCert.updateProfile(signedProfile);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to update your profile.\");\n    return;\n  }\n  history.push(\"/\");\n}\nconst updateGroup = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const groupId = state.groupIdInEdit;\n  const name = state.groupNameInEdit;\n  const residence = state.groupAddressInEdit;\n  const phone = state.groupPhoneInEdit;\n  const group = {\n    groupId,\n    name,\n    residence,\n    phone,\n  }\n\n  const signedGroup = await gxCert.signGroup(group, { address: gxCert.address });\n  try {\n    await gxCert.updateGroup(signedGroup);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to update group.\");\n    return;\n  }\n  history.push(\"/\");\n}\nconst issue = (certId) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const from = state.from;\n  const signerAddress = state.from;\n  const toEmail = state.toInIssue;\n  let to;\n  try {\n    to = await torusClient.getPublicAddressByGoogle(toEmail);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to get public address of the Google account.\");\n    return;\n  }\n  const userCert = {\n    certId,\n    from,\n    to,\n  }\n  let signed;\n  try {\n    signed = await gxCert.signUserCertificate(userCert, { address: from });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign the certificate.\");\n    return;\n  }\n  try {\n    await gxCert.createUserCert(signed);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to issue the certificate.\");\n    return;\n  }\n  await wait();\n  history.push(\"/\");\n}\nconst inviteMember = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const signerAddress = state.from;\n  const groupId = state.group.groupId;\n  const email = state.groupMemberToInvite;\n  let address;\n  try {\n    address = await torusClient.getPublicAddressByGoogle(email);\n  } catch(err) {\n    console.error(err);\n    alert(\"Email is not registered.\");\n    return;\n  }\n  let signedMember;\n  try {\n    signedMember = await gxCert.signMemberAddressForInviting(address, { address: signerAddress });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign for invitation.\");\n    return;\n  }\n  try {\n    await gxCert.inviteMemberToGroup(groupId, signedMember);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to send invitation.\");\n    return;\n  }\n  let group;\n  try {\n    group = await gxCert.getGroup(groupId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUP\",\n    payload: group,\n  });\n}\n\nconst disableGroupMember = (groupId, address) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const signedAddress = await gxCert.signMemberAddressForDisabling(address, { address: gxCert.address });\n  try {\n    await gxCert.disableGroupMember(groupId, signedAddress);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\n\nconst invalidateUserCert = (userCertId) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const signedUserCert = await gxCert.signUserCertForInvalidation(userCertId, { address: gxCert.address });\n  console.log(signedUserCert);\n  try {\n    await gxCert.invalidateUserCert(signedUserCert);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  await wait();\n\n  const state = getState().state;\n  const address = gxCert.address;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to fetch your groups\");\n    return;\n  }\n  let certificates = [];\n  for (const group of groups) {\n    const groupId = group.groupId;\n    try {\n      certificates = certificates.concat(await gxCert.getGroupCerts(groupId));\n    } catch(err) {\n      console.error(err);\n      continue;\n    }\n  }\n  for (let i = 0; i < certificates.length; i++) {\n    certificates[i].userCerts = [];\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n    payload: certificates,\n  });\n  for (let i = 0; i < certificates.length; i++) {\n    const userCerts = await gxCert.getIssuedUserCerts(certificates[i].id);\n    certificates[i].userCerts = userCerts;\n    dispatch({\n      type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n      payload: certificates,\n    });\n    for (let j = 0; j < userCerts.length; j++) {\n      const profile = await gxCert.getProfile(userCerts[j].to);\n      certificates[i].userCerts[j].profile = profile;\n    }\n    getImageOnIpfs(certificates[i].image).then(imageUrl => {\n      certificates[i].imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n}\nexport {\n  onChangeTitle,\n  onChangeDescription,\n  onChangeImage,\n  onChangeGroup,\n  onChangeGroupName,\n  onChangeGroupAddress,\n  onChangeGroupPhone,\n  onChangeGroupNameInEdit,\n  onChangeGroupAddressInEdit,\n  onChangeGroupPhoneInEdit,\n  onChangeProfileName,\n  onChangeProfileEmail,\n  onChangeProfileImage,\n  onChangeProfileNameInEdit,\n  onChangeProfileEmailInEdit,\n  onChangeProfileImageInEdit,\n  onChangeToInIssue,\n  onChangeGroupMemberToInvite,\n  sign,\n  signIn,\n  fetchProfileInEdit,\n  fetchCertificate,\n  fetchCertificateInIssue,\n  fetchCertificates,\n  fetchGroups,\n  fetchGroup,\n  fetchGroupInEdit,\n  fetchCertificatesInIssuer,\n  registerGroup,\n  registerProfile,\n  inviteMember,\n  issue,\n  updateGroup,\n  updateProfile,\n  disableGroupMember,\n  invalidateUserCert,\n\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { connect, Provider } from \"react-redux\";\nimport { withRouter, HashRouter as Router } from \"react-router-dom\";\nimport store from \"./store\";\nimport history from \"./history\";\nimport {\n  onChangeTitle,\n  onChangeDescription,\n  onChangeImage,\n  onChangeToInIssue,\n  onChangeGroup,\n  onChangeGroupName,\n  onChangeGroupAddress,\n  onChangeGroupPhone,\n  onChangeProfileName,\n  onChangeProfileEmail,\n  onChangeProfileImage,\n  onChangeGroupNameInEdit,\n  onChangeGroupIdInEdit,\n  onChangeGroupAddressInEdit,\n  onChangeGroupPhoneInEdit,\n  onChangeProfileNameInEdit,\n  onChangeProfileEmailInEdit,\n  onChangeProfileImageInEdit,\n  onChangeGroupMemberToInvite,\n  sign,\n  signIn,\n  fetchCertificate,\n  fetchCertificates,\n  fetchCertificatesInIssuer,\n  fetchGroups,\n  fetchGroup,\n  fetchGroupInEdit,\n  fetchGroupsInIssuer,\n  fetchCertificateInIssue,\n  fetchProfileInEdit,\n  invalidateUserCert,\n  updateProfile,\n  updateGroup,\n  issue,\n  registerGroup,\n  registerProfile,\n  inviteMember,\n  disableGroupMember,\n} from \"./actions\";\n//import CertClient from \"./client\"\n\nfunction mapStateToProps(state, props) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    onChangeTitle: (evt) => {\n      dispatch(onChangeTitle(evt));\n    },\n    onChangeDescription: (evt) => {\n      dispatch(onChangeDescription(evt));\n    },\n    onChangeImage: (evt) => {\n      dispatch(onChangeImage(evt));\n    },\n    onChangeGroupName: (evt) => {\n      dispatch(onChangeGroupName(evt));\n    },\n    onChangeGroupAddress: (evt) => {\n      dispatch(onChangeGroupAddress(evt));\n    },\n    onChangeGroupPhone: (evt) => {\n      dispatch(onChangeGroupPhone(evt));\n    },\n    onChangeGroupNameInEdit: (evt) => {\n      dispatch(onChangeGroupNameInEdit(evt));\n    },\n    onChangeGroupAddressInEdit: (evt) => {\n      dispatch(onChangeGroupAddressInEdit(evt));\n    },\n    onChangeGroupPhoneInEdit: (evt) => {\n      dispatch(onChangeGroupPhoneInEdit(evt));\n    },\n    onChangeProfileName: (evt) => {\n      dispatch(onChangeProfileName(evt));\n    },\n    onChangeProfileEmail: (evt) => {\n      dispatch(onChangeProfileEmail(evt));\n    },\n    onChangeProfileImage: (evt) => {\n      dispatch(onChangeProfileImage(evt));\n    },\n    onChangeProfileNameInEdit: (evt) => {\n      dispatch(onChangeProfileNameInEdit(evt));\n    },\n    onChangeProfileEmailInEdit: (evt) => {\n      dispatch(onChangeProfileEmailInEdit(evt));\n    },\n    onChangeProfileImageInEdit: (evt) => {\n      dispatch(onChangeProfileImageInEdit(evt));\n    },\n    onChangeGroup: (evt) => {\n      dispatch(onChangeGroup(evt));\n    },\n    onChangeToInIssue: (evt) => {\n      dispatch(onChangeToInIssue(evt));\n    },\n    onChangeGroupMemberToInvite: (evt) => {\n      dispatch(onChangeGroupMemberToInvite(evt));\n    },\n    sign: () => {\n      dispatch(sign());\n    },\n    fetchCertificate: (cid) => {\n      dispatch(fetchCertificate(cid));\n    },\n    fetchCertificates: () => {\n      dispatch(fetchCertificates());\n    },\n    fetchGroups: () => {\n      dispatch(fetchGroups());\n    },\n    fetchGroup: (groupId) => {\n      dispatch(fetchGroup(groupId));\n    },\n    fetchGroupInEdit: (groupId) => {\n      dispatch(fetchGroupInEdit(groupId));\n    },\n    fetchCertificatesInIssuer: () => {\n      dispatch(fetchCertificatesInIssuer());\n    },\n    fetchCertificateInIssue: (certId) => {\n      dispatch(fetchCertificateInIssue(certId));\n    },\n    fetchProfileInEdit: () => {\n      dispatch(fetchProfileInEdit());\n    },\n    signIn: () => {\n      dispatch(signIn());\n    },\n    registerGroup: () => {\n      dispatch(registerGroup());\n    },\n    updateGroup: () => {\n      dispatch(updateGroup());\n    },\n    updateProfile: () => {\n      dispatch(updateProfile());\n    },\n    registerProfile: () => {\n      dispatch(registerProfile());\n    },\n    inviteMember: () => {\n      dispatch(inviteMember());\n    },\n    issue: (certId) => {\n      dispatch(issue(certId));\n    },\n    disableGroupMember: (groupId, address) => {\n      dispatch(disableGroupMember(groupId, address));\n    },\n    invalidateUserCert: (userCertId) => {\n      dispatch(invalidateUserCert(userCertId));\n    },\n  }\n}\n\nconst RxApp = connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <RxApp />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}