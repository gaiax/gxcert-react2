{"version":3,"sources":["logo.svg","history.js","Header.js","views/Top.js","torus.js","config.js","gxcert-client.js","views/SignIn.js","views/Registration.js","views/Certificates.js","util/ipfs.js","views/Certificate.js","views/NewCert.js","views/NewProfile.js","views/NewGroup.js","App.js","reportWebVitals.js","initialState.js","store.js","reducer.js","index.js","actions.js"],"names":["history","Header","props","className","to","onClick","push","Top","torusClient","this","torus","Torus","a","init","buildEnv","enableLogging","network","host","chainId","networkName","showTorusButton","enabledVerifiers","google","facebook","reddit","twitch","discord","login","response","console","log","web3","Web3","provider","gmail","getPublicAddress","verifier","verifierId","config","web3Host","contractAddress","gxApi","gxCert","gxCertWithoutLogin","GxCertClient","getGxCertWithoutLogin","isInitialized","getGxCert","Error","SignIn","src","signIn","Registration","Certificates","fetchCertificates","certificates","length","map","certificate","index","cid","imageUrl","title","issued_at","Date","toISOString","from","React","Component","ipfs","IpfsHttpClient","port","protocol","createImageUrlFromUint8Array","arr","blob","Blob","window","URL","webkitURL","createObjectURL","concatBuffer","buffer1","buffer2","tmp","Uint8Array","byteLength","set","buffer","getImageOnIpfs","ipfsHash","async","get","data","content","ArrayBuffer","url","Certificate","state","description","image","match","params","id","fetchCertificate","certificateImage","href","target","NewCert","fetchGroups","err","error","onChange","onChangeGroup","hidden","groups","group","value","groupId","toString","name","type","onChangeTo","onChangeTitle","onChangeDescription","onChangeUrl","onChangeImage","sign","NewProfile","onChangeProfileName","onChangeProfileEmail","registerProfile","NewGroup","onChangeGroupName","onChangeGroupAddress","onChangeGroupPhone","registerGroup","App","that","exact","path","component","render","routeProps","profileImageUrl","onChangeProfileImage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","groupName","groupAddress","groupPhone","profileName","profileEmail","profileImage","persistConfig","key","storage","persistedReducer","persistReducer","action","Object","assign","payload","parseInt","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","persistor","persistStore","RxApp","connect","dispatch","evt","getState","file","files","reader","FileReader","onload","result","readAsArrayBuffer","alert","uploadImageToIpfs","imageCid","eth","getAccounts","accounts","getPublicAddressByGoogle","context","getTime","isCertificate","signed","signCertificate","sendSignedCertificateToGx","getCertByCid","getGroup","getProfile","profile","address","getReceivedCerts","i","fetchCertificateImage","getGroups","createGroup","email","signProfile","signedProfile","sendSignedProfileToGx","withRouter","ReactDOM","loading","document","getElementById"],"mappings":"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","file":"static/js/main.4bf3ecd3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import history from \"history/createHashHistory\";\n\nexport default history();\n","import history from \"./history\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header(props) {\n  return (\n    <header className=\"App-header\">\n      <div className=\"header-wrapper\">\n        <Link to=\"/\" className=\"logo\">GxCert</Link>\n        <Link to=\"/certs\" className=\"header-left-link\">CREATED</Link>\n        <Link to=\"/new\" className=\"header-left-link\">ISSUE</Link>\n      </div>\n      <div className=\"sign-in-button\" onClick={() => history.push(\"/signup\")}>SIGN IN</div>\n    </header>\n  );\n}\n\nexport default Header;\n","\nimport { Link } from \"react-router-dom\";\n\nfunction Top() {\n  return (\n    <div className=\"top\">\n      <div className=\"top-left\">\n        \n      </div>\n      <div className=\"top-right\">\n        <p className=\"concept\">確かな証明書を誰にでも簡単に</p>\n        <p className=\"concept-large\">ブロックチェーン技術による、改ざんされない確かな証明書を簡単に発行、受け取りすることができます。</p>\n        <Link to=\"/signup\">\n          <div className=\"sign-up\">\n            SIGN UP\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Top;\n","import Torus from \"@toruslabs/torus-embed\";\nimport Web3 from \"web3\";\n\nclass TorusClient {\n  constructor() {\n    this.torus = new Torus();\n  }\n  async init() {\n    await this.torus.init({\n      buildEnv: \"production\",\n      enableLogging: true,\n      network: {\n        host: \"https://matic-mumbai.chainstacklabs.com\",\n        chainId: 80001,\n        networkName: \"Mumbai Testnet\"\n      },\n      showTorusButton: true,\n      enabledVerifiers: {\n        google: true,\n        facebook:false,\n        reddit: false,\n        twitch: false,\n        discord: false,\n      }\n    });\n    /*\n    await this.torus.init({\n      buildEnv: \"production\",\n      enableLogging: true,\n      network: {\n        host: \"http://localhost:7545\",\n        chainId: 80001,\n        networkName: \"localhost:7545\"\n      },\n      showTorusButton: true,\n    });\n    */\n  }\n  async login() {\n    const response = await this.torus.login();\n    console.log(response);\n    console.log(this.torus);\n    this.web3 = new Web3(this.torus.provider);\n    console.log(this.web3);\n    return this.web3;\n  }\n  async getPublicAddressByGoogle(gmail) {\n    return await this.torus.getPublicAddress({\n      verifier: \"google\",\n      verifierId: gmail,\n    });\n  }\n}\n\nconst torusClient = new TorusClient();\nexport default torusClient;\n","\nlet config;\nif (process.env.NODE_ENV === \"development\") {\n  config = {\n    web3Host: \"https://matic-mumbai.chainstacklabs.com\",\n    contractAddress: \"0xF9322C8f678244e5391B1B6c7aB32E1d5d3857A3\",\n    gxApi: \"https://asia-northeast1-gxcert-21233.cloudfunctions.net/gxcert\",\n  };\n} else if (process.env.NODE_ENV === \"production\") {\n  //TODO: Change here\n  config = {\n    web3Host: \"https://matic-mumbai.chainstacklabs.com\",\n    contractAddress: \"0xF9322C8f678244e5391B1B6c7aB32E1d5d3857A3\",\n    gxApi: \"https://asia-northeast1-gxcert-21233.cloudfunctions.net/gxcert\",\n  }\n}\n\n\nexport default config;\n","import GxCertClient from \"gxcert-lib\";\nimport Web3 from \"web3\";\n\nimport config from \"./config\";\n\n\nlet gxCert = null;\nlet gxCertWithoutLogin = new GxCertClient(new Web3(config.web3Host), config.contractAddress);\n\nasync function getGxCertWithoutLogin() {\n  if (!gxCertWithoutLogin.isInitialized()) {\n    await gxCertWithoutLogin.init();\n  }\n  return gxCertWithoutLogin;\n}\nfunction getGxCert(web3) {\n  if (gxCert === null && web3) {\n    gxCert = new GxCertClient(web3, config.contractAddress, config.gxApi);\n  }\n  if (gxCert === null) {\n    throw new Error(\"gxCert is not initialized.\");\n  }\n  return gxCert;\n}\n\nexport {\n  getGxCert,\n  getGxCertWithoutLogin,\n};\n","import torusClient from \"../torus\";\nimport { getGxCert } from \"../gxcert-client\";\n\nfunction SignIn(props) {\n  return (\n    <div className=\"sign-in\">\n      <div className=\"sign-in-content\">\n        <p className=\"sign-in-message\">サービスの利用にはGoogleアカウントでの認証が必須です。Googleアカウントで認証を行った後、登録を完了させてください。</p>\n        <img src=\"/google.png\" onClick={props.signIn}/>\n      </div>\n    </div>\n  );\n}\n\nexport default SignIn;\n","\nfunction Registration() {\n  return (\n    <div className=\"registration\">\n      <div className=\"registration-content\">\n        <p className=\"registration-title\">ユーザー登録</p>\n        <img src=\"\" className=\"registration-icon\" />\n        <div className=\"registration-form\">\n          <p className=\"registration-form-title\">Name</p>\n          <input type=\"text\" className=\"registration-form-name\" />\n          <p className=\"registration-form-title\">E-mail</p>\n          <input type=\"text\" className=\"registration-form-email\" />\n        </div>\n        <div className=\"register-button\">\n          登録\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Registration;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Certificates extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchCertificates();\n  }\n  render() {\n    return (\n      <div className=\"certificates\">\n        <div className=\"certificates-content\">\n          <Link to=\"/new\" className=\"new-cert-button\">\n              新規作成\n          </Link>\n          <br />\n          <p className=\"certificates-title\">\n            証明書\n          </p>\n          <div className=\"certificates-list\">\n            { this.props.certificates.length === 0 ? <p className=\"certificate-not-found\">Certificate not found.</p> : \"\" }\n            { this.props.certificates.map((certificate, index) => {\n              return (\n                <Link to={\"/certs/\" + certificate.cid}>\n                  <div className=\"certificates-list-cell\">\n                    <img src={certificate.imageUrl} className=\"certificates-list-cell-icon\"/>\n                    <div className=\"certificates-list-cell-detail\">\n                      <p className=\"certificates-list-cell-title\">\n                        {certificate.title} \n                      </p>\n                      <p className=\"certificates-list-cell-date\">\n                        { certificate.issued_at ? (new Date(certificate.issued_at)).toISOString() : \"\" }\n                      </p>\n                      <p className=\"certificates-list-cell-by\">\n                        {certificate.from}\n                      </p>\n                    </div>\n                  </div>\n                </Link>\n              );\n            }) }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Certificates;\n","import * as IpfsHttpClient from \"ipfs-http-client\";\nconst ipfs = IpfsHttpClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\nasync function postCertificate(blob) {\n  const response = await ipfs.add(blob);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the certificate to IPFS network.\");\n}\nasync function postText(text) {\n  const response = await ipfs.add(text);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the text to IPFS network.\");\n}\n\nfunction createImageUrlFromUint8Array(arr) {\n  const blob = new Blob([arr]);\n  const urlCreator = window.URL || window.webkitURL;\n  const imageUrl = urlCreator.createObjectURL(blob);\n  return imageUrl;\n}\nvar concatBuffer = function (buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n};\n\nasync function getImageOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    const url = createImageUrlFromUint8Array(content);\n    return url;\n  }\n  return null;\n}\n\nfunction uintToString(array) {\n  var out, i, len, c;\n  var char2, char3;\n\n  out = \"\";\n  len = array.length;\n  i = 0;\n  while (i < len) {\n    c = array[i++];\n    switch (c >> 4)\n    {\n      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12: case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(((c & 0x0F) << 12) |\n                                   ((char2 & 0x3F) << 6) |\n                                   ((char3 & 0x3F) << 0));\n        break;\n    }\n  }\n  return out;\n}\nasync function getTextOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    return uintToString(new Uint8Array(content));\n  }\n  return null;\n}\n\n\nexport { getImageOnIpfs, getTextOnIpfs, postCertificate, postText, createImageUrlFromUint8Array };\n","import { getImageOnIpfs } from \"../util/ipfs\"\nimport React from \"react\";\n\n\n\nclass Certificate extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      from: \"\",\n      to: \"\",\n      title: \"\",\n      description: \"\",\n      issued_at: new Date(0),\n      url: \"\",\n      image: \"\",\n    }\n  }\n  componentDidMount() {\n    const cid = this.props.match.params.id;\n    this.props.fetchCertificate(cid);\n  }\n  render() {\n    return (\n      <div className=\"certificate\">\n        <div className=\"certificate-content\">\n          <p className=\"certificate-title\">\n            {this.props.certificate.title}\n          </p>\n          <img src={this.props.certificateImage} className=\"certificate-icon\" />\n          {this.state.description}\n          <table className=\"certificate-detail\">\n            <tr>\n              <td>From: </td>\n              <td>{this.props.certificate.from}</td>\n            </tr>\n            <tr>\n              <td>To: </td>\n              <td>{this.props.certificate.to}</td>\n            </tr>\n            <tr>\n              <td>Date of issue: </td>\n              <td>{this.props.certificate.issued_at ? (new Date(this.props.certificate.issued_at)).toISOString() : \"\"}</td>\n            </tr>\n            <tr>\n              <td>URL: </td>\n              <td><a href={this.props.certificate.url} target=\"_blank\">{this.props.certificate.url}</a></td>\n            </tr>\n            <tr>\n              <td>Description: </td>\n              <td>{this.props.certificate.description}</td>\n            </tr>\n          </table>\n          <div className=\"certificate-buttons\">\n            <div className=\"certificate-button\">\n              参照URLの発行\n            </div>\n            <div className=\"certificate-button\">\n              PDFのダウンロード\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Certificate;\n","import React from \"react\";\nimport { createImageUrlFromUint8Array } from \"../util/ipfs\";\n\nclass NewCert extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchGroups();\n  }\n  render() {\n    let imageUrl = \"\";\n    try {\n      imageUrl = createImageUrlFromUint8Array(this.props.image);\n    } catch(err) {\n      console.error(err);\n    }\n    return (\n      <div className=\"new-cert\">\n        <div className=\"new-cert-content\">\n          <p className=\"new-cert-title\">\n            証明書の登録 \n          </p>\n          <p className=\"new-cert-description\">\n            証明書を登録してください。証明書は複数登録することができ、それぞれの複数のユーザーに対して発行することができます。\n          </p>\n\n          <div className=\"new-cert-form\">\n            <p className=\"new-cert-form-title\">\n              From\n            </p>\n            <select className=\"new-cert-form-group\" onChange={this.props.onChangeGroup}>\n              <option hidden>Select group</option>\n              { this.props.groups.map(group => {\n                return (\n                  <option value={group.groupId.toString()}>{group.name}</option>\n                );\n              }) }\n              <option value=\"new\">Create new group</option>\n            </select>\n            <p className=\"new-cert-form-title\">\n              To\n            </p>\n            <input type=\"text\" className=\"new-cert-form-to\" onChange={this.props.onChangeTo} />\n            <p className=\"new-cert-form-title\">\n              Name of Certificate\n            </p>\n            <input type=\"text\" className=\"new-cert-form-name\" onChange={this.props.onChangeTitle}/>\n            <p className=\"new-cert-form-title\">\n              Description of Certificate\n            </p>\n            <textarea className=\"new-cert-form-description\" onChange={this.props.onChangeDescription} ></textarea>\n            <p className=\"new-cert-form-title\">\n              URL\n            </p>\n            <input type=\"text\" className=\"new-cert-form-name\" onChange={this.props.onChangeUrl} />\n            <p className=\"new-cert-form-title\">\n              Certificate Image\n            </p>\n            <img src={imageUrl} className=\"new-cert-form-image\" />\n            <div className=\"new-cert-form-image-file-div\">\n              <label className=\"new-cert-form-image-file-label\">\n                <input type=\"file\" className=\"new-cert-form-image-file\" onChange={this.props.onChangeImage} />\n                画像選択\n              </label>\n            </div>\n            <div className=\"register-button\" onClick={this.props.sign} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewCert;\n","import React from \"react\";\n\nclass NewProfile extends React.Component {\n  constructor() {\n    super();\n  }\n  render() {\n    return (\n      <div className=\"new-profile\">\n        <div className=\"new-profile-content\">\n          <p className=\"new-profile-title\">\n            ユーザー登録\n          </p>\n          <div className=\"new-profile-form\">\n            <img src={this.props.imageUrl} className=\"new-profile-form-image\" />\n            <p className=\"new-profile-form-title\">Name</p>\n            <input type=\"text\" className=\"new-profile-form-name\" onChange={this.props.onChangeProfileName} />\n            <p className=\"new-profile-form-title\">E-mail</p>\n            <input type=\"text\" className=\"new-profile-form-email\" onChange={this.props.onChangeProfileEmail} />\n            <div className=\"register-button\" onClick={this.props.registerProfile} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewProfile;\n","import React from \"react\";\n\nclass NewGroup extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div className=\"new-group\">\n        <div className=\"new-group-content\">\n          <p className=\"new-group-title\">発行元の登録</p>\n          <p className=\"new-group-description\">証明書の発行には発行元となる団体（企業、教育機関、NPO法人など）の登録が必要です。</p>\n          <div className=\"new-group-form\">\n            <p className=\"new-group-form-title\">Name</p>\n            <input type=\"text\" className=\"new-group-form-name\" onChange={this.props.onChangeGroupName} />\n            <p className=\"new-group-form-title\">Address</p>\n            <input type=\"text\" className=\"new-group-form-address\" onChange={this.props.onChangeGroupAddress} />\n            <p className=\"new-group-form-title\">Phone</p>\n            <input type=\"text\" className=\"new-group-form-phone\" onChange={this.props.onChangeGroupPhone} />\n\n            <div className=\"register-button\" onClick={this.props.registerGroup} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewGroup;\n","import React from \"react\";\nimport logo from './logo.svg';\nimport Header from \"./Header\";\nimport Top from \"./views/Top\";\nimport SignIn from \"./views/SignIn\";\nimport Registration from \"./views/Registration\";\nimport Certificates from \"./views/Certificates\";\nimport Certificate from \"./views/Certificate\";\nimport NewCert from \"./views/NewCert\";\nimport NewProfile from \"./views/NewProfile\";\nimport NewGroup from \"./views/NewGroup\";\nimport './App.css';\nimport { Switch, Route } from \"react-router-dom\";\n\nclass App extends React.Component {\n  constructor() {\n    super(); \n  }\n  render() {\n    const that = this;\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <Switch>\n          <Route exact={true} path=\"/\" component={Top} />\n          <Route exact={true} path=\"/signup\" render={ (routeProps) => <SignIn\n            {...routeProps}\n            signIn={that.props.signIn}\n            />\n          } />\n          <Route exact={true} path=\"/new\" render={ () => <NewCert\n              onChangeTitle={that.props.onChangeTitle}\n              onChangeDescription={that.props.onChangeDescription}\n              onChangeUrl={that.props.onChangeUrl}\n              onChangeImage={that.props.onChangeImage}\n              onChangeTo={that.props.onChangeTo}\n              onChangeGroup={that.props.onChangeGroup}\n              fetchGroups={that.props.fetchGroups}\n              sign={that.props.sign}\n              from={that.props.state.from}\n              image={that.props.state.image}\n              groups={that.props.state.groups}\n            />\n          } />\n          <Route exact={true} path=\"/certs/:id\" render={ (routeProps) => <Certificate\n\n            {...routeProps}\n            certificate={that.props.state.certificate}\n            certificateImage={that.props.state.certificateImage}\n            fetchCertificate={that.props.fetchCertificate}\n            />\n          } />\n          <Route exact={true} path=\"/certs\" render={ (routeProps) => <Certificates\n            {...routeProps}\n            certificates={that.props.state.certificates}\n            fetchCertificates={that.props.fetchCertificates}\n            />\n          } />\n          <Route exact={true} path=\"/group/new\" render={ (routeProps) => <NewGroup\n            {...routeProps}\n            registerGroup={that.props.registerGroup}\n            onChangeGroupName={that.props.onChangeGroupName}\n            onChangeGroupAddress={that.props.onChangeGroupAddress}\n            onChangeGroupPhone={that.props.onChangeGroupPhone}\n            />\n          } />\n          <Route exact={true} path=\"/profile/new\" render={ (routeProps) => <NewProfile\n            {...routeProps}\n            imageUrl={that.props.state.profileImageUrl}\n            registerProfile={that.props.registerProfile}\n            onChangeProfileName={that.props.onChangeProfileName}\n            onChangeProfileEmail={that.props.onChangeProfileEmail}\n            onChangeProfileImage={that.props.onChangeProfileImage}\n            />\n          } />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nconst initialState = {\n  from: \"\",\n  to: \"\",\n  title: \"\",\n  description: \"\",\n  image: null,\n  url: \"\",\n  groupName: \"\",\n  groupAddress: \"\",\n  groupPhone: \"\",\n  certificate: {},\n  certificateImage: \"\",\n  certificates: [],\n  groups: [],\n  groupId: null,\n  profileName: \"\",\n  profileEmail: \"\",\n  profileImage: \"\",\n}\n\nexport default initialState;\n","import { combineReducers, createStore, compose, applyMiddleware } from \"redux\";\nimport Reducer from \"./reducer\";\nimport thunk from \"redux-thunk\";\nimport { persistReducer, persistStore } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport initialState from \"./initialState\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, Reducer);\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers({\n    state: persistedReducer,\n  }),\n  initialState,\n  storeEnhancers(applyMiddleware(thunk))\n);\n\nexport const persistor = persistStore(store);\nexport default store;\n","\nimport initialState from \"./initialState\";\n\nexport default function Reducer(state=initialState, action) {\n  switch(action.type) {\n    case \"ON_CHANGE_TITLE\":\n      return Object.assign({}, state, {\n        title: action.payload\n      });\n    case \"ON_CHANGE_DESCRIPTION\":\n      return Object.assign({}, state, {\n        description: action.payload\n      });\n    case \"ON_CHANGE_IMAGE\":\n      return Object.assign({}, state, {\n        image: action.payload\n      });\n    case \"ON_CHANGE_URL\":\n      return Object.assign({}, state, {\n        url: action.payload\n      });\n    case \"ON_CHANGE_TO\":\n      return Object.assign({}, state, {\n        to: action.payload\n      });\n    case \"ON_CHANGE_GROUP_NAME\":\n      return Object.assign({}, state, {\n        groupName: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_ADDRESS\":\n      return Object.assign({}, state, {\n        groupAddress: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_PHONE\":\n      return Object.assign({}, state, {\n        groupPhone: action.payload,\n      });\n    case \"ON_CHANGE_GROUP\":\n      return Object.assign({}, state, {\n        groupId: parseInt(action.payload),\n      });\n    case \"ON_CHANGE_PROFILE_NAME\":\n      return Object.assign({}, state, {\n        profileName: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_EMAIL\":\n      return Object.assign({}, state, {\n        profileEmail: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_EMAIL\":\n      return Object.assign({}, state, {\n        profileEmail: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_IMAGE\":\n      return Object.assign({}, state, {\n        image: action.payload,\n      });\n    case \"LOGGED_IN\":\n      return Object.assign({}, state, {\n        from: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE\":\n      return Object.assign({}, state, {\n        certificate: action.payload,\n      });\n    case \"FETCHED_CERTIFICATES\":\n      return Object.assign({}, state, {\n        certificates: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE_IMAGE\":\n      return Object.assign({}, state, {\n        certificateImage: action.payload,\n      });\n    case \"FETCHED_GROUPS\":\n      return Object.assign({}, state, {\n        groups: action.payload,\n      });\n    default:\n      return initialState;\n  }\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { connect, Provider } from \"react-redux\";\nimport store, { persistor } from \"./store\";\nimport { withRouter, HashRouter as Router } from \"react-router-dom\";\nimport history from \"./history\";\nimport {\n  onChangeTitle,\n  onChangeDescription,\n  onChangeUrl,\n  onChangeTo,\n  onChangeImage,\n  onChangeGroupName,\n  onChangeGroupAddress,\n  onChangeGroupPhone,\n  onChangeGroup,\n  onChangeProfileName,\n  onChangeProfileEmail,\n  onChangeProfileImage,\n  sign,\n  signIn,\n  fetchCertificate,\n  fetchCertificates,\n  fetchCertificateImage,\n  fetchGroups,\n  registerGroup,\n  registerProfile,\n} from \"./actions\";\n//import CertClient from \"./client\"\n\nfunction mapStateToProps(state, props) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    onChangeTitle: (evt) => {\n      dispatch(onChangeTitle(evt));\n    },\n    onChangeDescription: (evt) => {\n      dispatch(onChangeDescription(evt));\n    },\n    onChangeUrl: (evt) => {\n      dispatch(onChangeUrl(evt));\n    },\n    onChangeTo: (evt) => {\n      dispatch(onChangeTo(evt));\n    },\n    onChangeImage: (evt) => {\n      dispatch(onChangeImage(evt));\n    },\n    onChangeGroupName: (evt) => {\n      dispatch(onChangeGroupName(evt));\n    },\n    onChangeGroupAddress: (evt) => {\n      dispatch(onChangeGroupAddress(evt));\n    },\n    onChangeGroupPhone: (evt) => {\n      dispatch(onChangeGroupPhone(evt));\n    },\n    onChangeGroup: (evt) => {\n      dispatch(onChangeGroup(evt));\n    },\n    onChangeProfileName: (evt) => {\n      dispatch(onChangeProfileName(evt));\n    },\n    onChangeProfileEmail: (evt) => {\n      dispatch(onChangeProfileEmail(evt));\n    },\n    onChangeProfileImage: (evt) => {\n      dispatch(onChangeProfileImage(evt));\n    },\n    sign: () => {\n      dispatch(sign());\n    },\n    fetchCertificate: (cid) => {\n      dispatch(fetchCertificate(cid));\n    },\n    fetchCertificates: () => {\n      dispatch(fetchCertificates());\n    },\n    fetchCertificateImage: (cid) => {\n      dispatch(fetchCertificateImage(cid));\n    },\n    fetchGroups: () => {\n      dispatch(fetchGroups());\n    },\n    signIn: () => {\n      dispatch(signIn());\n    },\n    registerGroup: () => {\n      dispatch(registerGroup());\n    },\n    registerProfile: () => {\n      dispatch(registerProfile());\n    }\n  }\n}\n\nconst RxApp = connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Router history={history}>\n        <RxApp />\n      </Router>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { getGxCert, getGxCertWithoutLogin } from \"./gxcert-client\";\nimport { getImageOnIpfs } from \"./util/ipfs\";\nimport torusClient from \"./torus\";\nimport history from \"./history\";\n\nconst onChangeTitle = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_TITLE\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeDescription = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_DESCRIPTION\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeUrl = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_URL\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeImage = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_IMAGE\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\nconst onChangeTo = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_TO\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupName = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupAddress = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ADDRESS\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupPhone = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_PHONE\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroup = (evt) => async (dispatch, getState) => {\n  if (evt.target.value === \"new\") {\n    history.push(\"/group/new\");\n    return;\n  }\n  dispatch({\n    type: \"ON_CHANGE_GROUP\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileName = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileEmail = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_EMAIL\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileImage = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_PROFILE_IMAGE\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\n\n\nconst fetchCertificate = (cid) => async (dispatch) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let certificate;\n  try {\n    certificate = await gxCert.getCertByCid(cid);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE\",\n    payload: certificate,\n  });\n  const imageCid = certificate.image;\n  let imageUrl;\n  try {\n    imageUrl = await getImageOnIpfs(imageCid);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE_IMAGE\",\n    payload: imageUrl,\n  });\n  const group = await gxCert.getGroup(certificate.groupId);\n  certificate.from = group.name;\n  dispatch({\n    type: \"FETCHED_CERTIFICATE\",\n    payload: certificate,\n  });\n  const profile = await gxCert.getProfile(certificate.to);\n  certificate.to = profile.name;\n  dispatch({\n    type: \"FETCHED_CERTIFICATE\",\n    payload: certificate,\n  });\n}\n\nconst fetchCertificates = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const address = state.from;\n  if (address === \"\" || !address) {\n    history.push(\"/top\");\n    return;\n  }\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let certificates;\n  try {\n    certificates = await gxCert.getReceivedCerts(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  for (let i = 0; i < certificates.length; i++) {\n    getImageOnIpfs(certificates[i].image).then(imageUrl => {\n      certificates[i].imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES\",\n        payload: certificates,\n      });\n    });\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES\",\n    payload: certificates,\n  });\n}\n\nconst fetchCertificateImage = (cid) => async (dispatch) => {\n  let imageUrl;\n  try {\n    imageUrl = await getImageOnIpfs(cid);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE_IMAGE\",\n    payload: imageUrl,\n  });\n}\nconst fetchGroups = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const address = state.from;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUPS\",\n    payload: groups,\n  });\n}\n\nconst signIn = () => async (dispatch) => {\n  await torusClient.init();\n  const web3 = await torusClient.login();\n  const gxCert = getGxCert(web3);\n  await gxCert.init();\n  const accounts = await gxCert.web3.eth.getAccounts();\n  if (accounts.length === 0) {\n    console.log(\"Failed to login.\");\n    return;\n  }\n  const address = accounts[0];\n  dispatch({\n    type: \"LOGGED_IN\",\n    payload: address,\n  });\n  let profile;\n  try {\n    profile = await gxCert.getProfile(address);\n  } catch(err) {\n    console.error(err);\n    history.push(\"/profile/new\");\n    return;\n  }\n\n  history.push(\"/certs\");\n}\n\nconst sign = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const image = state.image;\n  if (!image) {\n    alert(\"Image not set.\");\n    return;\n  }\n  let imageCid;\n  try {\n    imageCid = await gxCert.uploadImageToIpfs(image);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to post the image to IPFS.\");\n    return;\n  }\n  const accounts = await gxCert.web3.eth.getAccounts();\n  let to;\n  try {\n    to = await torusClient.getPublicAddressByGoogle(state.to);\n  } catch(err) {\n    console.error(err);\n    alert(\"to google email address is invalid.\");\n    return;\n  }\n  if (!to) {\n    alert(\"to google email address is invalid.\");\n    return;\n  }\n  const groupId = state.groupId;\n  const certificate = {\n    context: {},\n    title: state.title,\n    description: state.description,\n    from: accounts[0],\n    to: to,\n    issued_at: (new Date()).getTime(),\n    url: state.url,\n    image: imageCid,\n    groupId: groupId,\n  }\n  if (!gxCert.isCertificate(certificate)) {\n    alert(\"Invalid Certificate.\");\n    return;\n  }\n  let signed = null;\n  try {\n    signed = await gxCert.signCertificate(certificate);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign the certificate.\");\n    return;\n  }\n  try {\n    await gxCert.sendSignedCertificateToGx(signed);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to post the signed certificate.\");\n    return;\n  }\n\n  history.push(\"/certs\");\n}\n\nconst registerProfile = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const name = state.profileName;\n  const email = state.profileEmail;\n  const address = state.from;\n  let signedProfile;\n  try {\n    signedProfile = await gxCert.signProfile({\n      name,\n      email,\n    }, { \n      address,\n    });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign profile.\");\n    return;\n  }\n  try {\n    await gxCert.sendSignedProfileToGx(address, signedProfile);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to register profile.\");\n    return;\n  }\n  history.push(\"/certs\");\n\n}\nconst registerGroup = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const from = state.from;\n  const groupName = state.groupName;\n  const groupAddress = state.groupAddress;\n  const groupPhone = state.groupPhone;\n  try {\n    await gxCert.createGroup(groupName, from);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to create group.\");\n    return;\n  }\n  history.push(\"/certs\");\n}\nexport {\n  onChangeTitle,\n  onChangeDescription,\n  onChangeImage,\n  onChangeUrl,\n  onChangeTo,\n  onChangeGroupName,\n  onChangeGroupAddress,\n  onChangeGroupPhone,\n  onChangeGroup,\n  onChangeProfileName,\n  onChangeProfileEmail,\n  onChangeProfileImage,\n  sign,\n  signIn,\n  fetchCertificate,\n  fetchCertificates,\n  fetchCertificateImage,\n  fetchGroups,\n  registerGroup,\n  registerProfile,\n\n};\n"],"sourceRoot":""}