{"version":3,"sources":["logo.svg","history.js","Header.js","views/Top.js","torus.js","config.js","gxcert-client.js","views/SignIn.js","views/Registration.js","views/Certificates.js","util/ipfs.js","views/Certificate.js","views/NewCert.js","views/NewProfile.js","views/NewGroup.js","views/GroupMembers.js","views/Issuer.js","views/Issue.js","App.js","reportWebVitals.js","initialState.js","store.js","reducer.js","index.js","actions.js"],"names":["history","Header","props","className","to","onClick","push","Top","torusClient","this","torus","Torus","a","init","buildEnv","enableLogging","network","host","chainId","networkName","showTorusButton","enabledVerifiers","google","facebook","reddit","twitch","discord","login","response","console","log","web3","Web3","provider","gmail","getPublicAddress","verifier","verifierId","config","web3Host","contractAddress","gxApi","gxCert","gxCertWithoutLogin","GxCertClient","getGxCertWithoutLogin","isInitialized","getGxCert","Error","SignIn","src","signIn","Registration","Certificates","fetchCertificates","userCerts","length","map","userCert","index","userCertId","certificate","imageUrl","title","timestamp","Date","toISOString","from","React","Component","ipfs","IpfsHttpClient","port","protocol","createImageUrlFromUint8Array","arr","blob","Blob","window","URL","webkitURL","createObjectURL","concatBuffer","buffer1","buffer2","tmp","Uint8Array","byteLength","set","buffer","getImageOnIpfs","ipfsHash","async","get","data","content","ArrayBuffer","url","Certificate","parseInt","match","params","id","fetchCertificate","certificateImage","group","name","description","NewCert","fetchGroups","image","err","error","onChange","onChangeGroup","hidden","groups","value","groupId","toString","type","onChangeTitle","onChangeDescription","onChangeImage","sign","NewProfile","onChangeProfileName","onChangeProfileEmail","registerProfile","NewGroup","onChangeGroupName","onChangeGroupAddress","onChangeGroupPhone","registerGroup","GroupMembers","fetchGroup","inviteMember","members","member","address","Issuer","certificates","Issue","certId","onChangeToInIssue","issue","App","that","exact","path","render","routeProps","state","groupsInIssuer","certificatesInIssuer","fetchCertificatesInIssuer","certificateInIssue","fetchCertificateInIssue","profileImageUrl","onChangeProfileImage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","toInIssue","groupName","groupAddress","groupPhone","groupInIssuer","profileName","profileEmail","profileImage","persistConfig","key","storage","persistedReducer","persistReducer","action","Object","assign","payload","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","persistor","persistStore","RxApp","connect","dispatch","evt","getState","target","file","files","reader","FileReader","onload","result","readAsArrayBuffer","alert","uploadImageToIpfs","imageCid","eth","getAccounts","context","isCertificate","signed","signCertificate","createCert","cid","getUserCert","getGroup","getProfile","profile","getReceivedUserCerts","i","getGroups","getGroupCerts","concat","catch","getCert","accounts","createGroup","email","signProfile","signedProfile","createProfile","signerAddress","emailToInvite","getPublicAddressByGoogle","signMemberAddress","signedMember","inviteMemberToGroup","toEmail","signUserCertificate","createUserCert","withRouter","ReactDOM","loading","document","getElementById"],"mappings":"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","file":"static/js/main.2389f3ff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import history from \"history/createHashHistory\";\n\nexport default history();\n","import history from \"./history\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header(props) {\n  return (\n    <header className=\"App-header\">\n      <div className=\"header-wrapper\">\n        <Link to=\"/\" className=\"logo\">GxCert</Link>\n        <Link to=\"/issue\" className=\"header-left-link\">ISSUE</Link>\n      </div>\n      <div className=\"sign-in-button\" onClick={() => history.push(\"/signup\")}>SIGN IN</div>\n    </header>\n  );\n}\n\nexport default Header;\n","\nimport { Link } from \"react-router-dom\";\n\nfunction Top() {\n  return (\n    <div className=\"top\">\n      <div className=\"top-left\">\n        \n      </div>\n      <div className=\"top-right\">\n        <p className=\"concept\">確かな証明書を誰にでも簡単に</p>\n        <p className=\"concept-large\">ブロックチェーン技術による、改ざんされない確かな証明書を簡単に発行、受け取りすることができます。</p>\n        <Link to=\"/signup\">\n          <div className=\"sign-up\">\n            SIGN UP\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Top;\n","import Torus from \"@toruslabs/torus-embed\";\nimport Web3 from \"web3\";\n\nclass TorusClient {\n  constructor() {\n    this.torus = new Torus();\n  }\n  async init() {\n    await this.torus.init({\n      buildEnv: \"production\",\n      enableLogging: true,\n      network: {\n        host: \"https://matic-mumbai.chainstacklabs.com\",\n        chainId: 80001,\n        networkName: \"Mumbai Testnet\"\n      },\n      showTorusButton: true,\n      enabledVerifiers: {\n        google: true,\n        facebook:false,\n        reddit: false,\n        twitch: false,\n        discord: false,\n      }\n    });\n    /*\n    await this.torus.init({\n      buildEnv: \"production\",\n      enableLogging: true,\n      network: {\n        host: \"http://localhost:7545\",\n        chainId: 80001,\n        networkName: \"localhost:7545\"\n      },\n      showTorusButton: true,\n    });\n    */\n  }\n  async login() {\n    const response = await this.torus.login();\n    console.log(response);\n    console.log(this.torus);\n    this.web3 = new Web3(this.torus.provider);\n    console.log(this.web3);\n    return this.web3;\n  }\n  async getPublicAddressByGoogle(gmail) {\n    return await this.torus.getPublicAddress({\n      verifier: \"google\",\n      verifierId: gmail,\n    });\n  }\n}\n\nconst torusClient = new TorusClient();\nexport default torusClient;\n","\nlet config;\nif (process.env.NODE_ENV === \"development\") {\n  config = {\n    web3Host: \"https://matic-mumbai.chainstacklabs.com\",\n    contractAddress: \"0xddcFaf6fF9232058D1E2A759008cfdC2d057C6c2\",\n    gxApi: \"http://localhost:5001/gxcert-21233/asia-northeast1/gxcert\",\n  };\n} else if (process.env.NODE_ENV === \"production\") {\n  //TODO: Change here\n  config = {\n    web3Host: \"https://matic-mumbai.chainstacklabs.com\",\n    contractAddress: \"0xddcFaf6fF9232058D1E2A759008cfdC2d057C6c2\",\n    gxApi: \"https://asia-northeast1-gxcert-21233.cloudfunctions.net/gxcert\",\n  }\n}\n\n\nexport default config;\n","import GxCertClient from \"gxcert-lib\";\nimport Web3 from \"web3\";\n\nimport config from \"./config\";\n\n\nlet gxCert = null;\nlet gxCertWithoutLogin = new GxCertClient(new Web3(config.web3Host), config.contractAddress);\n\nasync function getGxCertWithoutLogin() {\n  if (!gxCertWithoutLogin.isInitialized()) {\n    await gxCertWithoutLogin.init();\n  }\n  return gxCertWithoutLogin;\n}\nfunction getGxCert(web3) {\n  if (gxCert === null && web3) {\n    gxCert = new GxCertClient(web3, config.contractAddress, config.gxApi);\n  }\n  if (gxCert === null) {\n    throw new Error(\"gxCert is not initialized.\");\n  }\n  return gxCert;\n}\n\nexport {\n  getGxCert,\n  getGxCertWithoutLogin,\n};\n","import torusClient from \"../torus\";\nimport { getGxCert } from \"../gxcert-client\";\n\nfunction SignIn(props) {\n  return (\n    <div className=\"sign-in\">\n      <div className=\"sign-in-content\">\n        <p className=\"sign-in-message\">サービスの利用にはGoogleアカウントでの認証が必須です。Googleアカウントで認証を行った後、登録を完了させてください。</p>\n        <img src=\"/google.png\" onClick={props.signIn}/>\n      </div>\n    </div>\n  );\n}\n\nexport default SignIn;\n","\nfunction Registration() {\n  return (\n    <div className=\"registration\">\n      <div className=\"registration-content\">\n        <p className=\"registration-title\">ユーザー登録</p>\n        <img src=\"\" className=\"registration-icon\" />\n        <div className=\"registration-form\">\n          <p className=\"registration-form-title\">Name</p>\n          <input type=\"text\" className=\"registration-form-name\" />\n          <p className=\"registration-form-title\">E-mail</p>\n          <input type=\"text\" className=\"registration-form-email\" />\n        </div>\n        <div className=\"register-button\">\n          登録\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Registration;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Certificates extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchCertificates();\n  }\n  render() {\n    return (\n      <div className=\"certificates\">\n        <div className=\"certificates-content\">\n          <p className=\"certificates-title\">\n            証明書\n          </p>\n          <div className=\"certificates-list\">\n            { this.props.userCerts.length === 0 ? <p className=\"certificate-not-found\">Certificate not found.</p> : \"\" }\n            { this.props.userCerts.map((userCert, index) => {\n              return (\n                <Link to={\"/certs/\" + userCert.userCertId}>\n                  <div className=\"certificates-list-cell\">\n                    <img src={userCert.certificate.imageUrl} className=\"certificates-list-cell-icon\"/>\n                    <div className=\"certificates-list-cell-detail\">\n                      <p className=\"certificates-list-cell-title\">\n                        {userCert.certificate.title} \n                      </p>\n                      <p className=\"certificates-list-cell-date\">\n                        { userCert.certificate.timestamp ? (new Date(userCert.certificate.timestamp)).toISOString() : \"\" }\n                      </p>\n                      <p className=\"certificates-list-cell-by\">\n                        { userCert.certificate.from}\n                      </p>\n                    </div>\n                  </div>\n                </Link>\n              );\n            }) }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Certificates;\n","import * as IpfsHttpClient from \"ipfs-http-client\";\nconst ipfs = IpfsHttpClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\nasync function postCertificate(blob) {\n  const response = await ipfs.add(blob);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the certificate to IPFS network.\");\n}\nasync function postText(text) {\n  const response = await ipfs.add(text);\n  if (response) {\n    return response.path;\n  }\n  throw new Error(\"couldn't post the text to IPFS network.\");\n}\n\nfunction createImageUrlFromUint8Array(arr) {\n  const blob = new Blob([arr]);\n  const urlCreator = window.URL || window.webkitURL;\n  const imageUrl = urlCreator.createObjectURL(blob);\n  return imageUrl;\n}\nvar concatBuffer = function (buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n};\n\nasync function getImageOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    const url = createImageUrlFromUint8Array(content);\n    return url;\n  }\n  return null;\n}\n\nfunction uintToString(array) {\n  var out, i, len, c;\n  var char2, char3;\n\n  out = \"\";\n  len = array.length;\n  i = 0;\n  while (i < len) {\n    c = array[i++];\n    switch (c >> 4)\n    {\n      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12: case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(((c & 0x0F) << 12) |\n                                   ((char2 & 0x3F) << 6) |\n                                   ((char3 & 0x3F) << 0));\n        break;\n    }\n  }\n  return out;\n}\nasync function getTextOnIpfs(ipfsHash) {\n  const response = await ipfs.get(ipfsHash);\n  for await (const data of response) {\n    console.log(data);\n    let content = new ArrayBuffer(0);\n    for await (const chunk of data.content) {\n      content = concatBuffer(content, chunk);\n    }\n    return uintToString(new Uint8Array(content));\n  }\n  return null;\n}\n\n\nexport { getImageOnIpfs, getTextOnIpfs, postCertificate, postText, createImageUrlFromUint8Array };\n","import { getImageOnIpfs } from \"../util/ipfs\"\nimport React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\n\nclass Certificate extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    const userCertId = parseInt(this.props.match.params.id);\n    this.props.fetchCertificate(userCertId);\n  }\n  render() {\n    console.log(this.props.userCert);\n    return (\n      <div className=\"certificate\">\n        { (!this.props.userCert || !this.props.userCert.certificate) ? (\n            <div className=\"certificate-content\">\n              <p className=\"certificate-not-found\">Certificate not found.</p>\n            </div>\n          ) : (\n            <div className=\"certificate-content\">\n              <p className=\"certificate-title\">\n                {this.props.userCert.certificate.title}\n              </p>\n              <img src={this.props.certificateImage} className=\"certificate-icon\" />\n              <table className=\"certificate-detail\">\n                <tr>\n                  <td>Publisher: </td>\n                  <td>\n                    {!this.props.userCert.certificate.group ? \"\" : this.props.userCert.certificate.group.name }\n                  </td>\n                </tr>\n                <tr>\n                  <td>Title: </td>\n                  <td>\n                    {this.props.userCert.certificate.title}\n                  </td>\n                </tr>\n                <tr>\n                  <td>Description: </td>\n                  <td>{this.props.userCert.certificate.description}</td>\n                </tr>\n                <tr>\n                  <td>Issued at: </td>\n                  <td>{(new Date(parseInt(this.props.userCert.timestamp * 1000))).toISOString()}</td>\n                </tr>\n              </table>\n              <div className=\"certificate-buttons\">\n                <div className=\"certificate-button\">\n                  参照URLの発行\n                </div>\n                <div className=\"certificate-button\">\n                  PDFのダウンロード\n                </div>\n              </div>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default Certificate;\n","import React from \"react\";\nimport { createImageUrlFromUint8Array } from \"../util/ipfs\";\n\nclass NewCert extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchGroups();\n  }\n  render() {\n    let imageUrl = \"\";\n    try {\n      imageUrl = createImageUrlFromUint8Array(this.props.image);\n    } catch(err) {\n      console.error(err);\n    }\n    return (\n      <div className=\"new-cert\">\n        <div className=\"new-cert-content\">\n          <p className=\"new-cert-title\">\n            証明書の登録 \n          </p>\n          <p className=\"new-cert-description\">\n            証明書を登録してください。証明書は複数登録することができ、それぞれの複数のユーザーに対して発行することができます。\n          </p>\n          <div className=\"new-cert-form\">\n            <p className=\"new-cert-form-title\">\n              Group\n            </p>\n            <select className=\"new-cert-form-group\" onChange={this.props.onChangeGroup}>\n              <option hidden>Choose group</option>\n              { this.props.groups.map(group => {\n                return (\n                  <option value={group.groupId.toString()}>{group.name}</option>\n                )\n              }) }\n              <option value=\"new\">Create new group</option>\n            </select>\n            <p className=\"new-cert-form-title\">\n              Title of Certificate\n            </p>\n            <input type=\"text\" className=\"new-cert-form-name\" onChange={this.props.onChangeTitle}/>\n            <p className=\"new-cert-form-title\">\n              Description of Certificate\n            </p>\n            <textarea className=\"new-cert-form-description\" onChange={this.props.onChangeDescription} ></textarea>\n            <p className=\"new-cert-form-title\">\n              Certificate Image\n            </p>\n            <img src={imageUrl} className=\"new-cert-form-image\" />\n            <div className=\"new-cert-form-image-file-div\">\n              <label className=\"new-cert-form-image-file-label\">\n                <input type=\"file\" className=\"new-cert-form-image-file\" onChange={this.props.onChangeImage} />\n                画像選択\n              </label>\n            </div>\n            <div className=\"register-button\" onClick={() => this.props.sign()} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewCert;\n","import React from \"react\";\n\nclass NewProfile extends React.Component {\n  constructor() {\n    super();\n  }\n  render() {\n    return (\n      <div className=\"new-profile\">\n        <div className=\"new-profile-content\">\n          <p className=\"new-profile-title\">\n            ユーザー登録\n          </p>\n          <div className=\"new-profile-form\">\n            <img src={this.props.imageUrl} className=\"new-profile-form-image\" />\n            <p className=\"new-profile-form-title\">Name</p>\n            <input type=\"text\" className=\"new-profile-form-name\" onChange={this.props.onChangeProfileName} />\n            <p className=\"new-profile-form-title\">E-mail</p>\n            <input type=\"text\" className=\"new-profile-form-email\" onChange={this.props.onChangeProfileEmail} />\n            <div className=\"register-button\" onClick={this.props.registerProfile} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewProfile;\n","import React from \"react\";\n\nclass NewGroup extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div className=\"new-group\">\n        <div className=\"new-group-content\">\n          <p className=\"new-group-title\">発行元の登録</p>\n          <p className=\"new-group-description\">証明書の発行には発行元となる団体（企業、教育機関、NPO法人など）の登録が必要です。</p>\n          <div className=\"new-group-form\">\n            <p className=\"new-group-form-title\">Name</p>\n            <input type=\"text\" className=\"new-group-form-name\" onChange={this.props.onChangeGroupName} />\n            <p className=\"new-group-form-title\">Address</p>\n            <input type=\"text\" className=\"new-group-form-address\" onChange={this.props.onChangeGroupAddress} />\n            <p className=\"new-group-form-title\">Phone</p>\n            <input type=\"text\" className=\"new-group-form-phone\" onChange={this.props.onChangeGroupPhone} />\n\n            <div className=\"register-button\" onClick={this.props.registerGroup} >\n              登録\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewGroup;\n","import React from \"react\";\n\nclass GroupMembers extends React.Component {\n\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchGroup(parseInt(this.props.match.params.id));\n  }\n\n  render() {\n    return (\n      <div className=\"group-members\">\n        <div className=\"group-members-content\">\n          { (() => {\n            if (!this.props.group) {\n              return (\n                <p>Group not found.</p>\n              );\n            }\n            return (\n              <div>\n                <p className=\"group-members-title\">{ this.props.group.name }のメンバー</p>\n                <input type=\"text\" className=\"group-members-invite\" />\n                <button className=\"group-members-invite-button\" onClick={this.props.inviteMember} >Invite</button>\n                <div className=\"group-members-list\">\n                  { this.props.group.members.map(member => {\n                    return (\n                      <div className=\"group-members-list-cell\">\n                        <img src={member.imageUrl} className=\"group-members-list-cell-icon\"/>\n                        <div className=\"group-members-list-cell-detail\">\n                          <p className=\"group-members-list-cell-name\">\n                            {member.name} \n                          </p>\n                          <p className=\"group-members-list-cell-address\">\n                            {member.address}\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  }) }\n                </div>\n              </div>\n            );\n          })() }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GroupMembers;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Issuer extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.props.fetchCertificates();\n  }\n  render() {\n    return (\n      <div className=\"issuer\">\n        <div className=\"issuer-certificates\">\n          <Link to=\"/new\">\n            <div className=\"issuer-certificates-new\">新規作成</div>\n          </Link>\n          <br/>\n          <p className=\"issuer-certificates-title\">証明書</p>\n          <div className=\"issuer-certificates-list\">\n            {\n              this.props.certificates.map(certificate => {\n                return (\n                  <div className=\"issuer-certificates-list-cell\">\n                    <img src={certificate.imageUrl} className=\"issuer-certificates-list-cell-icon\"/>\n                    <p className=\"issuer-certificates-list-cell-title\">\n                      {certificate.title} \n                    </p>\n                    <Link to={\"/issue/\" + certificate.id}>\n                      <div className=\"issuer-certificates-list-cell-issue\">発行</div>\n                    </Link>\n                  </div>\n                );\n              })\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Issuer;\n","import React from \"react\";\n\nclass Issue extends React.Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    this.certId = parseInt(this.props.match.params.certId);\n    this.props.fetchCertificate(this.certId);\n  }\n  render() {\n    return (\n      <div className=\"issue\">\n        { !this.props.certificate ? (\n          <div className=\"issue-content\">\n            <p className=\"certificate-not-found\">Certificate not found.</p> \n          </div>\n        ) : (\n          <div className=\"issue-content\">\n            <p className=\"issue-title\">\n              {this.props.certificate.title}の発行\n            </p>\n            <p className=\"issue-form-title\">Add Address</p>\n            <div className=\"issue-form\">\n              <input type=\"text\" className=\"issue-form-to\" onChange={this.props.onChangeToInIssue}/>\n              <button className=\"issue-form-issue\" onClick={ () => { this.props.issue(this.certId)}}>発行</button>\n            </div>\n          </div>\n        ) }\n      </div>\n    );\n  }\n}\n\nexport default Issue;\n","import React from \"react\";\nimport logo from './logo.svg';\nimport Header from \"./Header\";\nimport Top from \"./views/Top\";\nimport SignIn from \"./views/SignIn\";\nimport Registration from \"./views/Registration\";\nimport Certificates from \"./views/Certificates\";\nimport Certificate from \"./views/Certificate\";\nimport NewCert from \"./views/NewCert\";\nimport NewProfile from \"./views/NewProfile\";\nimport NewGroup from \"./views/NewGroup\";\nimport GroupMembers from \"./views/GroupMembers\";\nimport Issuer from \"./views/Issuer\";\nimport Issue from \"./views/Issue\";\nimport './App.css';\nimport { Switch, Route } from \"react-router-dom\";\n\nclass App extends React.Component {\n  constructor() {\n    super(); \n  }\n  render() {\n    const that = this;\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <Switch>\n          <Route exact={true} path=\"/\" render={ (routeProps) => {\n            if (that.props.state.from === \"\") { \n              return (\n                <Top />\n              );\n            }\n            return (<Certificates\n              {...routeProps}\n              userCerts={that.props.state.certificates}\n              fetchCertificates={that.props.fetchCertificates}\n            />)\n\n          } }/>\n          <Route exact={true} path=\"/signup\" render={ (routeProps) => <SignIn\n            {...routeProps}\n            signIn={that.props.signIn}\n            />\n          } />\n          <Route exact={true} path=\"/new/\" render={ () => <NewCert\n              fetchGroups={that.props.fetchGroups}\n              onChangeTitle={that.props.onChangeTitle}\n              onChangeDescription={that.props.onChangeDescription}\n              onChangeImage={that.props.onChangeImage}\n              onChangeGroup={that.props.onChangeGroup}\n              sign={that.props.sign}\n              from={that.props.state.from}\n              image={that.props.state.image}\n              groups={that.props.state.groups}\n            />\n          } />\n          <Route exact={true} path=\"/issue/\" render={ (routeProps) => <Issuer\n            {...routeProps}\n            groups={that.props.state.groupsInIssuer}\n            certificates={that.props.state.certificatesInIssuer}\n            fetchCertificates={that.props.fetchCertificatesInIssuer}\n            issue={that.props.issue}\n            />\n          } />\n          <Route exact={true} path=\"/issue/:certId\" render={ (routeProps) => <Issue\n            {...routeProps}\n            certificate={that.props.state.certificateInIssue}\n            fetchCertificate={that.props.fetchCertificateInIssue}\n            onChangeToInIssue={that.props.onChangeToInIssue}\n            issue={that.props.issue}\n          />\n          } />\n          <Route exact={true} path=\"/certs/:id\" render={ (routeProps) => <Certificate\n\n            {...routeProps}\n            userCert={that.props.state.certificate}\n            certificateImage={that.props.state.certificateImage}\n            fetchCertificate={that.props.fetchCertificate}\n            />\n          } />\n          <Route exact={true} path=\"/group/new\" render={ (routeProps) => <NewGroup\n            {...routeProps}\n            registerGroup={that.props.registerGroup}\n            onChangeGroupName={that.props.onChangeGroupName}\n            onChangeGroupAddress={that.props.onChangeGroupAddress}\n            onChangeGroupPhone={that.props.onChangeGroupPhone}\n            />\n          } />\n          <Route exact={true} path=\"/group/:id\" render={ (routeProps) => <GroupMembers\n            {...routeProps}\n            group={that.props.state.group}\n            fetchGroup={that.props.fetchGroup}\n            inviteMember={that.props.inviteMember}\n            />\n          } />\n          <Route exact={true} path=\"/profile/new\" render={ (routeProps) => <NewProfile\n            {...routeProps}\n            imageUrl={that.props.state.profileImageUrl}\n            registerProfile={that.props.registerProfile}\n            onChangeProfileName={that.props.onChangeProfileName}\n            onChangeProfileEmail={that.props.onChangeProfileEmail}\n            onChangeProfileImage={that.props.onChangeProfileImage}\n            />\n          } />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nconst initialState = {\n  from: \"\",\n  to: \"\",\n  title: \"\",\n  description: \"\",\n  image: null,\n  toInIssue: \"\",\n  groupId: null,\n  groupName: \"\",\n  groupAddress: \"\",\n  groupPhone: \"\",\n  groupInIssuer: null,\n  certificate: {},\n  certificateImage: \"\",\n  certificates: [],\n  certificatesInIssuer: [],\n  certificateInIssue: null,\n  group: null,\n  groups: [],\n  profileName: \"\",\n  profileEmail: \"\",\n  profileImage: \"\",\n}\n\nexport default initialState;\n","import { combineReducers, createStore, compose, applyMiddleware } from \"redux\";\nimport Reducer from \"./reducer\";\nimport thunk from \"redux-thunk\";\nimport { persistReducer, persistStore } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport initialState from \"./initialState\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, Reducer);\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers({\n    state: persistedReducer,\n  }),\n  initialState,\n  storeEnhancers(applyMiddleware(thunk))\n);\n\nexport const persistor = persistStore(store);\nexport default store;\n","\nimport initialState from \"./initialState\";\n\nexport default function Reducer(state=initialState, action) {\n  switch(action.type) {\n    case \"ON_CHANGE_TITLE\":\n      return Object.assign({}, state, {\n        title: action.payload\n      });\n    case \"ON_CHANGE_DESCRIPTION\":\n      return Object.assign({}, state, {\n        description: action.payload\n      });\n    case \"ON_CHANGE_IMAGE\":\n      return Object.assign({}, state, {\n        image: action.payload\n      });\n    case \"ON_CHANGE_GROUP\":\n      return Object.assign({}, state, {\n        groupId: action.payload\n      });\n    case \"ON_CHANGE_GROUP_NAME\":\n      return Object.assign({}, state, {\n        groupName: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_ADDRESS\":\n      return Object.assign({}, state, {\n        groupAddress: action.payload,\n      });\n    case \"ON_CHANGE_GROUP_PHONE\":\n      return Object.assign({}, state, {\n        groupPhone: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_NAME\":\n      return Object.assign({}, state, {\n        profileName: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_EMAIL\":\n      return Object.assign({}, state, {\n        profileEmail: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_EMAIL\":\n      return Object.assign({}, state, {\n        profileEmail: action.payload,\n      });\n    case \"ON_CHANGE_PROFILE_IMAGE\":\n      return Object.assign({}, state, {\n        image: action.payload,\n      });\n    case \"ON_CHANGE_TO_IN_ISSUE\":\n      return Object.assign({}, state, {\n        toInIssue: action.payload,\n      });\n    case \"LOGGED_IN\":\n      return Object.assign({}, state, {\n        from: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE\":\n      return Object.assign({}, state, {\n        certificate: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE_IN_ISSUE\":\n      return Object.assign({}, state, {\n        certificateInIssue: action.payload,\n      });\n    case \"FETCHED_CERTIFICATES\":\n      return Object.assign({}, state, {\n        certificates: action.payload,\n      });\n    case \"FETCHED_CERTIFICATE_IMAGE\":\n      return Object.assign({}, state, {\n        certificateImage: action.payload,\n      });\n    case \"FETCHED_GROUPS\":\n      return Object.assign({}, state, {\n        groups: action.payload,\n      });\n    case \"FETCHED_GROUP\":\n      return Object.assign({}, state, {\n        group: action.payload,\n      });\n    case \"FETCHED_CERTIFICATES_IN_ISSUER\":\n      return Object.assign({}, state, {\n        certificatesInIssuer: action.payload,\n      });\n    default:\n      return initialState;\n  }\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { connect, Provider } from \"react-redux\";\nimport store, { persistor } from \"./store\";\nimport { withRouter, HashRouter as Router } from \"react-router-dom\";\nimport history from \"./history\";\nimport {\n  onChangeTitle,\n  onChangeDescription,\n  onChangeImage,\n  onChangeToInIssue,\n  onChangeGroup,\n  onChangeGroupName,\n  onChangeGroupAddress,\n  onChangeGroupPhone,\n  onChangeProfileName,\n  onChangeProfileEmail,\n  onChangeProfileImage,\n  sign,\n  signIn,\n  fetchCertificate,\n  fetchCertificates,\n  fetchCertificatesInIssuer,\n  fetchGroups,\n  fetchGroup,\n  fetchGroupsInIssuer,\n  fetchCertificateInIssue,\n  issue,\n  registerGroup,\n  registerProfile,\n  inviteMember,\n} from \"./actions\";\n//import CertClient from \"./client\"\n\nfunction mapStateToProps(state, props) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    onChangeTitle: (evt) => {\n      dispatch(onChangeTitle(evt));\n    },\n    onChangeDescription: (evt) => {\n      dispatch(onChangeDescription(evt));\n    },\n    onChangeImage: (evt) => {\n      dispatch(onChangeImage(evt));\n    },\n    onChangeGroupName: (evt) => {\n      dispatch(onChangeGroupName(evt));\n    },\n    onChangeGroupAddress: (evt) => {\n      dispatch(onChangeGroupAddress(evt));\n    },\n    onChangeGroupPhone: (evt) => {\n      dispatch(onChangeGroupPhone(evt));\n    },\n    onChangeProfileName: (evt) => {\n      dispatch(onChangeProfileName(evt));\n    },\n    onChangeProfileEmail: (evt) => {\n      dispatch(onChangeProfileEmail(evt));\n    },\n    onChangeProfileImage: (evt) => {\n      dispatch(onChangeProfileImage(evt));\n    },\n    onChangeGroup: (evt) => {\n      dispatch(onChangeGroup(evt));\n    },\n    onChangeToInIssue: (evt) => {\n      dispatch(onChangeToInIssue(evt));\n    },\n    sign: () => {\n      dispatch(sign());\n    },\n    fetchCertificate: (cid) => {\n      dispatch(fetchCertificate(cid));\n    },\n    fetchCertificates: () => {\n      dispatch(fetchCertificates());\n    },\n    fetchGroups: () => {\n      dispatch(fetchGroups());\n    },\n    fetchGroup: (groupId) => {\n      dispatch(fetchGroup(groupId));\n    },\n    fetchCertificatesInIssuer: () => {\n      dispatch(fetchCertificatesInIssuer());\n    },\n    fetchCertificateInIssue: (certId) => {\n      dispatch(fetchCertificateInIssue(certId));\n    },\n    signIn: () => {\n      dispatch(signIn());\n    },\n    registerGroup: () => {\n      dispatch(registerGroup());\n    },\n    registerProfile: () => {\n      dispatch(registerProfile());\n    },\n    inviteMember: () => {\n      dispatch(inviteMember());\n    },\n    issue: (certId) => {\n      dispatch(issue(certId));\n    },\n  }\n}\n\nconst RxApp = connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Router history={history}>\n        <RxApp />\n      </Router>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { getGxCert, getGxCertWithoutLogin } from \"./gxcert-client\";\nimport { getImageOnIpfs } from \"./util/ipfs\";\nimport torusClient from \"./torus\";\nimport history from \"./history\";\n\nconst onChangeTitle = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_TITLE\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeDescription = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_DESCRIPTION\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeImage = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_IMAGE\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\nconst onChangeGroup = (evt) => async (dispatch, getState) => {\n  if (evt.target.value === \"new\") {\n    history.push(\"/group/new\");\n    return;\n  }\n  dispatch({\n    type: \"ON_CHANGE_GROUP\",\n    payload: parseInt(evt.target.value),\n  });\n}\n\nconst onChangeToInIssue = (evt) => async (dispatch) => {\n  dispatch({\n    type: \"ON_CHANGE_TO_IN_ISSUE\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupName = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeGroupAddress = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_ADDRESS\",\n    payload: evt.target.value,\n  });\n}\nconst onChangeGroupPhone = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_GROUP_PHONE\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileName = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_NAME\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileEmail = (evt) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ON_CHANGE_PROFILE_EMAIL\",\n    payload: evt.target.value,\n  });\n}\n\nconst onChangeProfileImage = (evt) => async (dispatch, getState) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.onload = () => {\n    dispatch({\n      type: \"ON_CHANGE_PROFILE_IMAGE\",\n      payload: reader.result,\n    });\n  }\n  reader.readAsArrayBuffer(file);\n}\n\nconst fetchCertificateInIssue = (certId) => async (dispatch) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let certificate;\n  try {\n    certificate = await gxCert.getCert(certId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE_IN_ISSUE\",\n    payload: certificate,\n  });\n}\n\nconst fetchCertificate = (userCertId) => async (dispatch) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let userCert;\n  try {\n    userCert = await gxCert.getUserCert(userCertId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE\",\n    payload: userCert,\n  });\n  const imageCid = userCert.certificate.image;\n  let imageUrl;\n  try {\n    imageUrl = await getImageOnIpfs(imageCid);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATE_IMAGE\",\n    payload: imageUrl,\n  });\n  try {\n    const group = await gxCert.getGroup(userCert.certificate.groupId);\n    userCert.certificate.group = group;\n    dispatch({\n      type: \"FETCHED_CERTIFICATE\",\n      payload: userCert,\n    });\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  try {\n    const profile = await gxCert.getProfile(userCert.certificate.to);\n    userCert.certificate.to = profile.name;\n    dispatch({\n      type: \"FETCHED_CERTIFICATE\",\n      payload: userCert,\n    });\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n}\n\nconst fetchCertificates = () => async (dispatch, getState) => {\n  const state = getState().state;\n  const address = state.from;\n  if (address === \"\" || !address) {\n    history.push(\"/top\");\n    return;\n  }\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let userCerts;\n  try {\n    userCerts = await gxCert.getReceivedUserCerts(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  console.log(userCerts);\n  for (let i = 0; i < userCerts.length; i++) {\n    getImageOnIpfs(userCerts[i].certificate.image).then(imageUrl => {\n      userCerts[i].certificate.imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES\",\n        payload: userCerts,\n      });\n    });\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES\",\n    payload: userCerts,\n  });\n}\n\nconst fetchGroups = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const address = state.from;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUPS\",\n    payload: groups,\n  });\n}\n\nconst signIn = () => async (dispatch) => {\n  await torusClient.init();\n  const web3 = await torusClient.login();\n  const gxCert = getGxCert(web3);\n  await gxCert.init();\n  const accounts = await gxCert.web3.eth.getAccounts();\n  if (accounts.length === 0) {\n    console.log(\"Failed to login.\");\n    return;\n  }\n  const address = accounts[0];\n  dispatch({\n    type: \"LOGGED_IN\",\n    payload: address,\n  });\n  let profile;\n  try {\n    profile = await gxCert.getProfile(address);\n  } catch(err) {\n    console.error(err);\n    history.push(\"/profile/new\");\n    return;\n  }\n\n  history.push(\"/\");\n}\n\nconst fetchGroup = (groupId) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = await getGxCertWithoutLogin();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  let group;\n  try {\n    group = await gxCert.getGroup(groupId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUP\",\n    payload: group,\n  });\n}\nconst fetchCertificatesInIssuer = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const address = state.from;\n  let groups;\n  try {\n    groups = await gxCert.getGroups(address);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to fetch your groups\");\n    return;\n  }\n  let certificates = [];\n  for (const group of groups) {\n    const groupId = group.groupId;\n    try {\n      certificates = certificates.concat(await gxCert.getGroupCerts(groupId));\n    } catch(err) {\n      console.error(err);\n      continue;\n    }\n  }\n  dispatch({\n    type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n    payload: certificates,\n  });\n  for (let i = 0; i < certificates.length; i++) {\n    getImageOnIpfs(certificates[i].image).then(imageUrl => {\n      certificates[i].imageUrl = imageUrl;\n      dispatch({\n        type: \"FETCHED_CERTIFICATES_IN_ISSUER\",\n        payload: certificates,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n}\n\nconst sign = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const image = state.image;\n  if (!image) {\n    alert(\"Image not set.\");\n    return;\n  }\n  let imageCid;\n  try {\n    imageCid = await gxCert.uploadImageToIpfs(image);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to post the image to IPFS.\");\n    return;\n  }\n  const accounts = await gxCert.web3.eth.getAccounts();\n  const certificate = {\n    context: {},\n    title: state.title,\n    description: state.description,\n    image: imageCid,\n    groupId: state.groupId,\n  }\n  if (!gxCert.isCertificate(certificate)) {\n    alert(\"Invalid Certificate.\");\n    return;\n  }\n  let signed = null;\n  try {\n    signed = await gxCert.signCertificate(certificate, { address: state.from });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign the certificate.\");\n    return;\n  }\n  try {\n    await gxCert.createCert(signed);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to post the signed certificate.\");\n    return;\n  }\n\n  history.push(\"/issue\");\n}\n\nconst registerProfile = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const name = state.profileName;\n  const email = state.profileEmail;\n  const address = state.from;\n  let signedProfile;\n  try {\n    signedProfile = await gxCert.signProfile({\n      name,\n      email,\n    }, { \n      address,\n    });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign profile.\");\n    return;\n  }\n  try {\n    await gxCert.createProfile(address, signedProfile);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to register profile.\");\n    return;\n  }\n  history.push(\"/\");\n\n}\nconst registerGroup = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const from = state.from;\n  const groupName = state.groupName;\n  const groupAddress = state.groupAddress;\n  const groupPhone = state.groupPhone;\n  try {\n    await gxCert.createGroup(groupName, from);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to create group.\");\n    return;\n  }\n  history.push(\"/new\");\n}\nconst issue = (certId) => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const from = state.from;\n  const signerAddress = state.from;\n  const toEmail = state.toInIssue;\n  let to;\n  try {\n    to = await torusClient.getPublicAddressByGoogle(toEmail);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to get public address of the Google account.\");\n    return;\n  }\n  const userCert = {\n    certId,\n    from,\n    to,\n  }\n  let signed;\n  try {\n    signed = await gxCert.signUserCertificate(userCert, { address: from });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign the certificate.\");\n    return;\n  }\n  try {\n    await gxCert.createUserCert(signed);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to issue the certificate.\");\n    return;\n  }\n  history.push(\"/\");\n}\nconst inviteMember = () => async (dispatch, getState) => {\n  let gxCert;\n  try {\n    gxCert = getGxCert();\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  const state = getState().state;\n  const signerAddress = state.from;\n  const groupId = state.group.groupId;\n  const email = state.group.emailToInvite;\n  let address;\n  try {\n    address = await torusClient.getPublicAddressByGoogle(email);\n  } catch(err) {\n    console.error(err);\n    alert(\"Email is not registered.\");\n    return;\n  }\n  let signedMember;\n  try {\n    signedMember = await gxCert.signMemberAddress(address, { address: signerAddress });\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to sign for invitation.\");\n    return;\n  }\n  try {\n    await gxCert.inviteMemberToGroup(groupId, signedMember);\n  } catch(err) {\n    console.error(err);\n    alert(\"Failed to send invitation.\");\n    return;\n  }\n  let group;\n  try {\n    group = await gxCert.getGroup(groupId);\n  } catch(err) {\n    console.error(err);\n    return;\n  }\n  dispatch({\n    type: \"FETCHED_GROUP\",\n    payload: group,\n  });\n}\nexport {\n  onChangeTitle,\n  onChangeDescription,\n  onChangeImage,\n  onChangeGroup,\n  onChangeGroupName,\n  onChangeGroupAddress,\n  onChangeGroupPhone,\n  onChangeProfileName,\n  onChangeProfileEmail,\n  onChangeProfileImage,\n  onChangeToInIssue,\n  sign,\n  signIn,\n  fetchCertificate,\n  fetchCertificateInIssue,\n  fetchCertificates,\n  fetchGroups,\n  fetchGroup,\n  fetchCertificatesInIssuer,\n  registerGroup,\n  registerProfile,\n  inviteMember,\n  issue,\n\n};\n"],"sourceRoot":""}